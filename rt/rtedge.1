.\" @(#) $Header$ (BRL)
.TH RTEDGE 1 BRL-CAD
.UC 4
.SH NAME
rtedge \(em ray-traces a model, detects edges, and writes a BRL-CAD
color image (.pix) file
.SH SYNOPSIS
.B rtedge
[ options ... ]
model.g
objects ...
> model.pl
.SH DESCRIPTION
.I Rtedge
operates on the indicated
.I objects
in the input
.I model.g
and produces a BRL-CAD .pix file that indicates the 'edges' in the model
file.  
.I Rtedge 
produces images by drawing a
boundary whenever a change in region_id is detected.  It also recognizes
and portrays abrupt changes in surface curvature and changes in surface
height.  This permits the recognition of pits, protrusions, and changes in
surface curvature.
.LP
The orientation of the rays to be fired may be specified by
the
.B \-a
and
.B \-e
options, in which case the model will be autosized, and the grid
will be centered on the centroid of the model, with ray spacing
chosen to span the entire set of
.I objects.
Alternatively,
with the
.B \-M
option, a transformation matrix may be provided on standard input
which maps model-space to view-space.
In this case, the grid ranges from -1.0 <= X,Y <= +1.0 in view space,
with the size of the grid (number of rays fired) specified with
.B \-s
This option is most useful when
.B rtedge
is being invoked from a shell script created by an
.IR mged (1)
\fIsaveview\fR command.
.LP
The following options are recognized.
.TP
.B \-s#
Number of rays to fire in X and Y directions (square grid).
Default is 512 (512x512).
.TP 
.B \-F framebuffer
Indicates that the output should be sent to the
indicated framebuffer. See  
.IR
libfb (3)  
for more details on the specification of a framebuffer.
.TP
.B \-a#
Select azimuth in degrees.  Used with
.B \-e
and conflicts with
.B \-M
.TP
.B \-A#
Select angle for shading.  Default is 5.0 degrees. 89.0 will produce
a plot where only steep drops and rises are shaded.
.TP
.B \-e#
Select elevation in degrees.  Used with
.B \-a
and conflicts with
.B \-M
.TP
.B \-M
Read model2view matrix from standard input.
Conflicts with
.B \-a
and
.B \-e
.TP
.B \-g#
Select grid cell width.
.TP
.B \-G#
Select grid cell height.  If \fInot\fR specified, cell height equals
cell width.
.TP
.B \-P# 
Specify the maximum  number  of  processors  (in  a multi\-processor  
system) to be used for this execution.  
.TP
.B \-U#
sets the Boolean variable
.I use_air
to the given value.
.TP
.B \-o output.pix
specifies a named file for output.
Note that using -o disables parallel processing.
.TP
.B \-x#
Set librt debug flags to (hexadecimal) number.
.TP
.B \-c
Set special 
.I rtedge 
configuration variables.
.LP
The
.I rtedge
program is a simple front-end to
.IR librt (3).
.SH ADDITIONAL OPTIONS
.I Rtedge 
replaces
.IR lgt (1). 
In addition to the simple white edges on a black background 
(or black on white) provided by
.I lgt, 
.
.I rtedge
allows arbitrary color combinations. It also allows 
rendering into an existing framebuffer and occlusion 
detection between two pieces of geometry.
To configure its behavior,
.I rtedge
makes copious use of the \-c option. 

Note that this approach is necessitated by the fact that
.I librt (3)
has used up nearly the entire alphabet. A transition to 
GNU\-style long option names is planned.
.TP
.B \-c"set foreground=#,#,#"

and
.TP
.B \-c"set fg=#,#,#"
set the color of the foreground (edges) to the
given  r,g,b triple. The default is white 
(255,255,255). 
.TP
.B \-c"set background=#,#,#"

and
.TP
.B \-c"set bg=#,#,#"
set the color of the background to the r,g,b 
triple. The default is near-black (0,0,1).
.TP
.B \-c"set region_colors=#

and
.TP
.B \-c"set rc=#"
determine whether to use the material color
assigned to an object as the edge color. Valid
values are 1 (on) and 0 (off). The default is
off. Using region colors overides any 
foreground color setting.
.TP
.B \-c"set detect_regions=#"

and
.TP
.B \-c"set dr=#"
determine whether the boundary between two BRL-CAD regions
is considered to be an edge. Valid values are 1 (on) and
0 (off). The default is off.
.TP
.B \-c"set detect_distance=#"

and
.TP
.B \-c"set dd=#"
determine whether a difference in hit distance between
adjacent pixels defines an edge. Valid values are 1 (on) 
and 0 (off). The default is on.
.TP
.B \-c"set detect_normals"

and
.TP
.B \-c"set dn=#" 
determine whether a difference in surface normals 
between adjacent pixels defines an edge. Valid values 
are 1 (on) and 0 (off). The default is on.
.TP
.B \-c"set detect_ids"

and
.TP
.B \-c"set di=#" 
determine whether a difference in component id numbers 
between adjacent pixels defines an edge. Valid values 
are 1 (on) and 0 (off). The default is on.
.TP
.B \-c"set overlaymode=#"

and
.TP
.B \-c"set ov=#"
configure the overlay mode to be either on (1) or off (0). 
Overlay mode allows 
.I rtedge
to write into an existing framebuffer. The framebuffer is
specified with the \-F option.

.SH OCCLUSION CHECKING
.I Rtedge
has ability to perform occlusion checking between
two sets of BRL-CAD objects from the same database. 
Occlusion checking determines which set of geometry is closer
to the eyepoint and thus should be rendered. The first 
set is that specified in the basic object list (after the
database). This set will be rendered using edge detection.
The second is specified using a \-c option.

Occlusion checking is most handy when combining 
.I rtedge
renderings with
.I rt 
renderings. The syntax for such compositions
is daunting, but the results are cool. 
.TP
.B \-c"set occlusion_objects=\"obj1 obj2 ... objN\" "

and
.TP
.B \-c"set oo=\"obj1 obj2 ... objN\" "
specify the second set of geometry. 
.TP
.B \-c"set occlusion_mode=#"

and
.TP
.B \-c"set om=#"
determine how
.I rtedge
behaves when performing occlusion checking. There are three
valid modes. Mode 2 is the default.

.B mode 1 \-
An edge detected in the first set of geometry is written to 
the framebuffer if and only if it occludes the second set of
geometry. The edge is colored according to the foreground or
region colors options.

.B mode 2 \-
All pixels that hit the first set of geometry that are not
occluded by the second set are written to the framebuffer.
Edges are rendered in the foreground or region color, non-edges 
are rendered in the background color. 

.B mode 3 \-
Like mode 2 except non-edge pixels are dithered to make the 
geometry semi-transparent.

.SH EXAMPLES
.I Rtedge
can be somewhat complicated to configure. These examples 
illustrate both simple and complex examples. Hopefully 
they will be enough to get you started. These examples use
the havoc.g target description that may be found in the
source distribution.

Note that in practice it will usually be easiest to use the
.I saveview 
command in
.I mged
to produce a script and then modify that script to run 
.I rtedge.

.nf
	\fBrtedge -s 1024 -Fnew.pix havoc.g havoc\fR
.fi

results in a 1024 by 1024 BRL-CAD image file showing the 
edges on a Havoc helicopter. The default settings are used,
so the image has white edges on a black background. Edges
exist where there are differences in component id, hit 
distance, surface normal, or between hits and misses.

The command
.nf
	\fBrtedge -s1024 -Fnew.pix -c"set fg=0,255,0 bg=255,0,0"
	havoc.g havoc\fR
.fi

changes the edge color to be green and the background color to
be red. 

The command

.nf
	\fBrtedge -s1024 -Fnew.pix -c"set rc=1 dr=1"
	havoc.g havoc\fR
.fi

activates region detection and uses the region colors for the
edges.

The remaining examples will illustrate how to use
.I rtedge
in concert with
.I rt
to produce interesting images. When merging
.I rtedge 
and 
.I rt
images, it is best to use 
.I saveview
scripts. In
.I mged
configure your view, save it, and then open the file in a editor.
Dupilcate the 
.I rt
command block. After duplicating the block, change the second
to 
.I rtedge.

This script will overlay bright orange edges on the Havoc.

.nf
#!/bin/sh
rt -M -s1280 -Fnew.pix -C255/255/255\\
 $*\\
 havoc.g\\
 havoc\\
 2>> example1.log\\
 <<EOF 
viewsize 8.000e+03;
orientation 2.4809e-01 4.7650e-01 7.4809e-01 3.8943e-01;
eye_pt 2.2146e+04 7.1103e+03 7.1913e+03;
start 0; clean;
end;

EOF

rtedge -M -s1280 -Fnew.pix \\
 -c"set dr=1 dn=1 ov=1"\\
 -c"set fg=255,200,0" \\
 $*\\
 havoc.g\\
 havoc\\
 2>> example1.log\
 <<EOF
viewsize 8.000e+03;
orientation 2.4809e-01 4.7650e-01 7.4809e-01 3.8943e-01;
eye_pt 2.2146e+04 7.1103e+03 7.1913e+03;
start 0; clean;
end;

EOF
.fi

Finally, this script will render the Havoc weapon systems in
full color, render the edges on the remainder of the aircraft
in black, and render the non-edges in dithered gray to make
them semi-transparent. Note that when specifying the occlusion
objects, the delimiting quotes must be escaped.

.nf
#!/bin/sh

rt -M -s1280 -Fnew.pix -C255/255/255 \\
 $*\\
 havoc.g\\
 weapons\\
 2>> example2.log\
 <<EOF
viewsize 8.000e+03;
orientation 2.4809e-01 4.7650e-01 7.4809e-01 3.8943e-01;
eye_pt 2.2146e+04 7.1103e+03 7.1913e+03;
start 0; clean;
end;

EOF

rtedge -M -s1280 -Fnew.pix \\
 -c"set dr=1 dn=1 om=3"\\
 -c"set fg=0,0,0 bg=200,200,200"\\
 -c"set oo=\\"weapons\\" "\\
 $*\\
 havoc.g\\
 havoc_front havoc_middle havoc_tail landing_gear main_rotor\\
 2>> example2.log\
 <<EOF
viewsize 8.000e+03;
orientation 2.4809e-01 4.7650e-01 7.4809e-01 3.8943e-01;
eye_pt 2.2146e+04 7.1103e+03 7.1913e+03;
start 0; clean;
end;

EOF
.fi

In general, if you are mixing 
.I rt 
and
.I rtedge
renderings, and the objects being rendered are different, 
occlusion checking should be used.
.SH "SEE ALSO"
mged(1), rt(1), fbserv(1), librt(3)
.SH DIAGNOSTICS
Numerous error conditions are possible, usually due to errors in
the geometry database.
Descriptive messages are printed on standard error (file descriptor 2).
.SH AUTHOR
Ronald Anthony Bowers
.br
Michael John Muuss
.SH SOURCE
Survivability/Lethality Analysis Directorate
.br
The U. S. Army Research Laboratory
.br
Aberdeen Proving Ground, Maryland  21005-5066
.SH COPYRIGHT
This software is Copyright (C) 2001-2004 by the United States Army.
All rights reserved.
.SH BUGS
.LP
Most deficiencies observed while using the
.B rtedge
program are usually with the
.IR librt (3)
package instead.
.SH "BUG REPORTS"
Reports of bugs or problems should be submitted via electronic
mail to <CAD@ARL.ARMY.MIL>.







