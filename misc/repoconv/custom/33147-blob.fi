blob
data 93157
/*                            B U . H
 * BRL-CAD
 *
 * Copyright (c) 2004-2008 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @addtogroup libbu */
/** @{ */
/** @file bu.h
 *
 * @brief
 * Header file for the BRL-CAD Utility Library, LIBBU.
 *
 * This library provides several layers of low-level utility routines,
 * providing features that make coding much easier.
 *
 * Parallel processing support:  threads, sempahores, parallel-malloc.
 * Consolidated logging support:  bu_log(), bu_exit(), and bu_bomb().
 *
 * The intention is that these routines are general extensions to the
 * data types offered by the C language itself, and to the basic C
 * runtime support provided by the system LIBC.
 *
 * All of the data types provided by this library are defined in bu.h;
 * none of the routines in this library will depend on data types
 * defined in other BRL-CAD header files, such as vmath.h.  Look for
 * those routines in LIBBN.
 *
 */
#ifndef __BU_H__
#define __BU_H__

#include "common.h"

__BEGIN_DECLS

#ifndef BU_EXPORT
#  if defined(_WIN32) && !defined(__CYGWIN__) && defined(BRLCAD_DLL)
#    ifdef BU_EXPORT_DLL
#      define BU_EXPORT __declspec(dllexport)
#    else
#      define BU_EXPORT __declspec(dllimport)
#    endif
#  else
#    define BU_EXPORT
#  endif
#endif

#define BRLCAD_OK 0
#define BRLCAD_HELP 1
#define BRLCAD_ERROR 2
#define BRLCAD_MORE_ARGS 3

/**
 * Flag for non-case-sensitive searching
 */
#define BU_CASEFOLD 0x10


/**
 * @def BU_DIR_SEPARATOR
 * the default directory separator character
 */
#ifdef DIR_SEPARATOR
#  define BU_DIR_SEPARATOR DIR_SEPARATOR
#else
#  ifdef DIR_SEPARATOR_2
#    define BU_DIR_SEPARATOR DIR_SEPARATOR_2
#  else
#    ifdef _WIN32
#      define BU_DIR_SEPARATOR '\\'
#    else
#      define BU_DIR_SEPARATOR '/'
#    endif  /* _WIN32 */
#  endif  /* DIR_SEPARATOR_2 */
#endif  /* DIR_SEPARATOR */

/**
 * Maximum length of a filesystem path.  Typically defined in a system
 * file but if it isn't set, we create it.
 */
#ifndef MAXPATHLEN
#  ifdef _MAX_PATH
#    define MAXPATHLEN _MAX_PATH
#  else
#    define MAXPATHLEN 1024
#  endif
#endif

/**
 * set to the path list separator character
 */
#if defined(PATH_SEPARATOR)
#  define BU_PATH_SEPARATOR PATH_SEPARATOR
#else
#  if defined(_WIN32)
#    define BU_PATH_SEPARATOR ';'
#  else
#    define BU_PATH_SEPARATOR ':'
#  endif  /* _WIN32 */
#endif  /* PATH_SEPARATOR */


/**
 * @def BU_FLSTR
 *
 * Macro for getting a concatenated string of the current file and
 * line number.  Produces something of the form: "filename.c"":""1234"
 */
#define bu_cpp_str(s) # s
#define bu_cpp_xstr(s)  bu_cpp_str(s)
#define bu_cpp_glue(a, b) a ## b
#define bu_cpp_xglue(a, b) bu_cpp_glue(a, b)
#define BU_FLSTR __FILE__ ":" bu_cpp_xstr(__LINE__)

/*
 * Macros for providing function prototypes, regardless of whether
 * the compiler understands them or not.  It is vital that the
 * argument list given for "args" be enclosed in parens.  The setting
 * of USE_PROTOTYPES is determined during configure
 */
#if __STDC__ || USE_PROTOTYPES
#  define	BU_EXTERN(type_and_name, args)	extern type_and_name args
#  define	BU_ARGS(args)			args
#else
#  define	BU_EXTERN(type_and_name, args)	extern type_and_name()
#  define	BU_ARGS(args)			()
#endif

/**
 * This is so we can use gcc's "format string vs arguments"-check for
 * various printf-like functions, and still maintain compatability.
 */
#ifndef __attribute__
/* This feature is only available in gcc versions 2.5 and later. */
#  if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 5)
#    define __attribute__(ignore) /* empty */
#  endif
/* The __-protected variants of `format' and `printf' attributes
 * are accepted by gcc versions 2.6.4 (effectively 2.7) and later.
 */
#  if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 7)
#    define __format__ format
#    define __printf__ printf
#    define __noreturn__ noreturn
#  endif
#endif

/**
 * shorthand declaration of a printf-style functions
 */
#define __BU_ATTR_FORMAT12 __attribute__ ((__format__ (__printf__, 1, 2)))
#define __BU_ATTR_FORMAT23 __attribute__ ((__format__ (__printf__, 2, 3)))

/**
 * shorthand declaration of a function that doesn't return
 */
#define __BU_ATTR_NORETURN __attribute__ ((__noreturn__))

/*
 * I N T E R F A C E    H E A D E R S
 */

/* system interface headers */
#include <setjmp.h> /* for bu_setjmp */
#include <stddef.h> /* for size_t */

/* common interface headers */
#include "tcl.h"	/* Included for Tcl_Interp definition */
#include "magic.h"

/*XXX Temporary global interp */
BU_EXPORT extern Tcl_Interp *brlcad_interp;

/**
 * B U _ F O R T R A N
 *
 * @def BU_FORTRAN
 *
 * This macro is used to take the 'C' function name, and convert it at
 * compile time to the FORTRAN calling convention.
 *
 * Lower case, with a trailing underscore.
 */
#define BU_FORTRAN(lc, uc)	lc ## _


/**
 * Handy memory allocator macro
 *
 * @def BU_GETSTRUCT(ptr, struct_type)
 * Acquire storage for a given struct_type.
 * e.g., BU_GETSTRUCT(ptr, structname);
 *
 * @def BU_GETUNION(ptr, union_type)
 * Allocate storage for a union
*/
#define BU_GETSTRUCT(_p, _str) \
	_p = (struct _str *)bu_calloc(1, sizeof(struct _str), #_str " (getstruct)" BU_FLSTR)
#define BU_GETUNION(_p, _unn) \
	_p = (union _unn *)bu_calloc(1, sizeof(union _unn), #_unn " (getunion)" BU_FLSTR)


/**
 * B U _ G E T T Y P E
 *
 * Acquire storage for a given TYPE, eg, BU_GETTYPE(ptr, typename);
 * Equivalent to BU_GETSTRUCT, except without the 'struct' Useful
 * for typedef'ed objects.
 */
#define BU_GETTYPE(_p, _type) \
	_p = (_type *)bu_calloc(1, sizeof(_type), #_type " (gettype)" )


/**
 * B U _ A S S E R T
 *
 * @def BU_ASSERT(eqn)
 * Quick and easy macros to generate an informative error message and
 * abort execution if the specified condition does not hold true.
 *
 * @def BU_ASSERT_PTR(eqn)
 * Quick and easy macros to generate an informative error message and
 * abort execution if the specified condition does not hold true.
 *
 * @def BU_ASSERT_LONG(eqn)
 * Quick and easy macros to generate an informative error message and
 * abort execution if the specified condition does not hold true.
 *
 * @def BU_ASSERT_DOUBLE(eqn)
 * Quick and easy macros to generate an informative error message and
 * abort execution if the specified condition does not hold true.
 *
 * Example: BU_ASSERT_LONG(j+7, <, 42);
 */
#ifdef NO_BOMBING_MACROS
#  define BU_ASSERT(_equation)
#else
#  define BU_ASSERT(_equation)	\
	if ( !(_equation) )  { \
		bu_log("BU_ASSERT( " #_equation " ) failed, file %s, line %d\n", \
			__FILE__, __LINE__ ); \
		bu_bomb("BU_ASSERT failure\n"); \
	}
#endif

#ifdef NO_BOMBING_MACROS
#  define BU_ASSERT_PTR(_lhs, _relation, _rhs)
#else
#  define BU_ASSERT_PTR(_lhs, _relation, _rhs)	\
	if ( !((_lhs) _relation (_rhs)) )  { \
		bu_log("BU_ASSERT_PTR( " #_lhs #_relation #_rhs " ) failed, lhs=x%lx, rhs=x%lx, file %s, line %d\n", \
			(long)(_lhs), (long)(_rhs), \
			__FILE__, __LINE__ ); \
		bu_bomb("BU_ASSERT_PTR failure\n"); \
	}
#endif


#ifdef NO_BOMBING_MACROS
#  define BU_ASSERT_LONG(_lhs, _relation, _rhs)
#else
#  define BU_ASSERT_LONG(_lhs, _relation, _rhs)	\
	if ( !((_lhs) _relation (_rhs)) )  { \
		bu_log("BU_ASSERT_LONG( " #_lhs #_relation #_rhs " ) failed, lhs=%ld, rhs=%ld, file %s, line %d\n", \
			(long)(_lhs), (long)(_rhs), \
			__FILE__, __LINE__ ); \
		bu_bomb("BU_ASSERT_LONG failure\n"); \
	}
#endif


#ifdef NO_BOMBING_MACROS
#  define BU_ASSERT_DOUBLE(_lhs, _relation, _rhs)
#else
#  define BU_ASSERT_DOUBLE(_lhs, _relation, _rhs)	\
	if ( !((_lhs) _relation (_rhs)) )  { \
		bu_log("BU_ASSERT_DOUBLE( " #_lhs #_relation #_rhs " ) failed, lhs=%lf, rhs=%lf, file %s, line %d\n", \
			(double)(_lhs), (double)(_rhs), \
			__FILE__, __LINE__ ); \
		bu_bomb("BU_ASSERT_DOUBLE failure\n"); \
	}
#endif
/** @} */


/**
 * report version information about LIBBU
 */
BU_EXPORT BU_EXTERN(const char *bu_version, (void));


/**
 * genptr_t - A portable way of declaring a "generic" pointer that is
 * wide enough to point to anything, which can be used on both ANSI C
 * and K&R C environments.  On some machines, pointers to functions
 * can be wider than pointers to data bytes, so a declaration of
 * "char*" isn't generic enough.
 */
#if !defined(GENPTR_NULL)
typedef void *genptr_t;
#  define GENPTR_NULL	((genptr_t)0)
#endif


/**
 * MAX_PSW - The maximum number of processors that can be expected on
 * this hardware.  Used to allocate application-specific per-processor
 * tables at compile-time and represent a hard limit on the number of
 * processors/threads that may be spawned. The actual number of
 * available processors is found at runtime by calling rt_avail_cpus()
 */
#define MAX_PSW	1024


/*----------------------------------------------------------------------*/
/** @addtogroup hton */
/** @{ */
/**
 * Sizes of "network" format data.  We use the same convention as the
 * TCP/IP specification, namely, big-Endian, IEEE format, twos
 * compliment.  This is the BRL-CAD external data representation
 * (XDR).  See also the support routines in libbu/xdr.c
 *
 */
#define SIZEOF_NETWORK_SHORT	2	/* htons(), bu_gshort(), bu_pshort() */
#define SIZEOF_NETWORK_LONG	4	/* htonl(), bu_glong(), bu_plong() */
#define SIZEOF_NETWORK_FLOAT	4	/* htonf() */
#define SIZEOF_NETWORK_DOUBLE	8	/* htond() */
/** @} */

/*----------------------------------------------------------------------*/
/* convert.c
 */
/** @addtogroup conv */
/**@{*/
/*
 * Forward declarations.
 */
BU_EXPORT BU_EXTERN(int bu_cv_itemlen,
		    (int cookie));
BU_EXPORT BU_EXTERN(int bu_cv_cookie,
		    (char *in));
BU_EXPORT BU_EXTERN(int bu_cv_optimize,
		    (int cookie));
BU_EXPORT BU_EXTERN(int bu_cv_w_cookie,
		    (genptr_t,
		     int,
		     size_t,
		     genptr_t,
		     int,
		     int));

BU_EXPORT BU_EXTERN(int bu_cv_ntohss,
		    (signed short *,
		     size_t,
		     genptr_t,
		     int));
BU_EXPORT BU_EXTERN(int bu_cv_ntohus,
		    (unsigned short *,
		     size_t,
		     genptr_t,
		     int));
BU_EXPORT BU_EXTERN(int bu_cv_ntohsl,
		    (signed long int *,
		     size_t,
		     genptr_t,
		     int));
BU_EXPORT BU_EXTERN(int bu_cv_ntohul,
		    (unsigned long int *,
		     size_t,
		     genptr_t,
		     int));
BU_EXPORT BU_EXTERN(int bu_cv_htonss,
		    (genptr_t,
		     size_t,
		     signed short *,
		     int));
BU_EXPORT BU_EXTERN(int bu_cv_htonus,
		    (genptr_t,
		     size_t,
		     unsigned short *,
		     int));
BU_EXPORT BU_EXTERN(int bu_cv_htonsl,
		    (genptr_t,
		     size_t,
		     long *,
		     int));
BU_EXPORT BU_EXTERN(int bu_cv_htonul,
		    (genptr_t,
		     size_t,
		     unsigned long *,
		     int));

#define CV_CHANNEL_MASK	0x00ff
#define CV_HOST_MASK	0x0100
#define CV_SIGNED_MASK	0x0200
#define CV_TYPE_MASK	0x1c00  /* 0001 1100 0000 0000 */
#define CV_CONVERT_MASK 0x6000  /* 0110 0000 0000 0000 */

#define CV_TYPE_SHIFT	10
#define CV_CONVERT_SHIFT 13

#define CV_8	0x0400
#define	CV_16	0x0800
#define CV_32	0x0c00
#define CV_64	0x1000
#define CV_D	0x1400

#define CV_CLIP		0x0000
#define CV_NORMAL	0x2000
#define CV_LIT		0x4000

/** deprecated */
#define	END_NOTSET	0
#define END_BIG		1	/* PowerPC/MIPS */
#define END_LITTLE	2	/* Intel */
#define END_ILL		3	/* PDP-11 */
#define END_CRAY	4	/* Old Cray */

/** deprecated */
#define	IND_NOTSET	0
#define IND_BIG		1
#define IND_LITTLE	2
#define IND_ILL		3
#define IND_CRAY	4


/*----------------------------------------------------------------------*/
/* endian.c */

typedef enum {
    BU_LITTLE_ENDIAN	= 1234, /* LSB first: i386, VAX order */
    BU_BIG_ENDIAN	= 4321, /* MSB first: 68000, IBM, network order */
    BU_PDP_ENDIAN	= 3412  /* LSB first in word, MSW first in long */
} bu_endian_t;


/**
 * b u _ b y t e o r d e r
 *
 * returns the platform byte ordering (e.g., big-/little-endian)
 */
BU_EXPORT BU_EXTERN(inline bu_endian_t bu_byteorder, (void));


/**@}*/

/*----------------------------------------------------------------------*/
/* list.c */

/** @addtogroup bu_list
 *
 * B U _ L I S T
 *
 * Doubly-linked list support
 *
 * These macros assume that all user-provided structures will have a
 * "struct bu_list" as their first element (often named "l" [ell]).
 * Thus, a pointer to the bu_list struct is a "pun" for the
 * user-provided structure as well, and the pointers can be converted
 * back and forth safely with type casts.
 *
 * Furthermore, the head of the linked list could be a full instance
 * of the user-provided structure (although the storage-conscious
 * programmer could make the head just an bu_list structure, with
 * careful type casting).  This results in a doubly-linked circular
 * list, with the head having the same shape as all the list members.
 * The application is free to make use of this symmetry and store data
 * values in the head, or the extra storage in the head can be
 * ignored.
 *
 * Where a macro expects an argument "p", it should be a pointer to a
 * user-provided structure.
 *
 * Where a macro expects an argument "hp", it should be a pointer to a
 * "struct bu_list" located in the list head, e.g., &(head.l).
 *
 * Where a macro expects an argument "old", "new", or "cur", it should
 * be a pointer to the "struct bu_list" located either in a
 * user-provided structure, e.g. &((p)->l), or for the case of "old"
 * it may also be in the list head.
 *
 * --- BEGIN EXAMPLE ---
 * @code

    // make bu_list the first element in your structure
    struct my_structure {
	struct bu_list l;
	int my_data;
    };

    // your actual list
    struct my_structure *my_list = NULL;

    // allocate and initialize your list head
    BU_GETSTRUCT(my_list, my_structure);
    BU_LIST_INIT(&(my_list->l));
    my_list->my_data = -1;

    // add a new element to your list
    struct my_structure *new_entry;
    BU_GETSTRUCT(new_entry, my_structure);
    new_entry->my_data = rand();
    BU_LIST_PUSH(&(my_list->l), &(new_entry->l));

    // iterate over your list, remove all items
    struct my_structure *entry;
    while (BU_LIST_WHILE(entry, my_structure, &(my_list->l))) {
	bu_log("Entry value is %d\n", entry->my_data);
	BU_LIST_DEQUEUE(&(entry->l));
	bu_free(entry, "free my_structure entry");
    }
    bu_free(my_list, "free my_structure list head");

 * @endcode
 * --- END EXAMPLE ---
 *
 * Dequeueing the head of a list is a valid and well defined operation
 * which should be performed with caution.  Unless a pointer to some
 * other element of the list is retained by the application, the rest
 * of the linked list can no longer be referred to.
 *
 * The "magic" field of the list header _must_ be set to the constant
 * BU_LIST_HEAD_MAGIC, but the "magic" field of all list members
 * should be established by user code, to identify the type of
 * structure that the bu_list structure is embedded in.  It is
 * permissible for one list to contain an arbitrarily mixed set of
 * user "magic" numbers, as long as the head is properly marked.
 *
 * There is a dual set of terminology used in some of the macros:
 *   FIRST / LAST	from the point of view of the list head
 *   NEXT / PREV	from the point of view of a list member
 *   forw / back	the actual pointer names
 */
/**@{*/

struct bu_list {
    unsigned long	magic;		/**< @brief Magic # for mem id/check */
    struct bu_list	*forw;		/**< @brief "forward", "next" */
    struct bu_list	*back;		/**< @brief "back", "last" */
};
#define BU_LIST_NULL	((struct bu_list *)0)

typedef struct bu_list bu_list_t;

BU_EXPORT BU_EXTERN(struct bu_list *bu_list_new, ());
BU_EXPORT BU_EXTERN(struct bu_list *bu_list_pop, (struct bu_list *hp));

#define BU_LIST_CLOSE( hp ) { \
	BU_ASSERT( (hp) != NULL ); \
	if ( (hp) == NULL ) \
		return; \
	BU_ASSERT( BU_LIST_IS_EMPTY( (hp) ) ); \
	bu_list_free( (hp) ); \
	bu_free( (char *)(hp), "bu_list head" ); \
}


/**
 * Insert "new" item in front of "old" item.  Often, "old" is the
 * head.  To put the new item at the tail of the list, insert before
 * the head, e.g.  * BU_LIST_INSERT( &(head.l), &((p)->l) );
 */
#define BU_LIST_INSERT(old, new)	{ \
	(new)->back = (old)->back; \
	(old)->back = (new); \
	(new)->forw = (old); \
	(new)->back->forw = (new);  }

/**
 * Append "new" item after "old" item.  Often, "old" is the head.  To
 * put the new item at the head of the list, append after the head,
 * e.g.  * BU_LIST_APPEND( &(head.l), &((p)->l) );
 */
#define BU_LIST_APPEND(old, new)	{ \
	(new)->forw = (old)->forw; \
	(new)->back = (old); \
	(old)->forw = (new); \
	(new)->forw->back = (new);  }

/**
 * Dequeue "cur" item from anywhere in doubly-linked list
 */
#define BU_LIST_DEQUEUE(cur)	{ \
	(cur)->forw->back = (cur)->back; \
	(cur)->back->forw = (cur)->forw; \
	(cur)->forw = (cur)->back = BU_LIST_NULL;  /* sanity */ }

/**
 * Dequeue "cur" but do not fix its links
 */
#define BU_LIST_DQ(cur) {\
	(cur)->forw->back = (cur)->back; \
	(cur)->back->forw = (cur)->forw; }

#define BU_LIST_DQ_T(cur, type) (\
	(cur)->forw->back = (cur)->back, \
	(cur)->back->forw = (cur)->forw, \
	(type *)(cur) )

/**
 * This version of BU_LIST_DEQUEUE uses the comma operator inorder to
 * return a typecast version of the dequeued pointer
 */
#define BU_LIST_DEQUEUE_T( cur, type ) (\
	(cur)->forw->back = (cur)->back, \
	(cur)->back->forw = (cur)->forw, \
	(cur)->forw = (cur)->back = BU_LIST_NULL, \
	(type *)(cur) )


/**
 * The Stack Discipline
 *
 * BU_LIST_PUSH places p at the tail of hp.  BU_LIST_POP sets p to
 * last element in hp's list (else NULL) and, if p is non-null,
 * dequeues it.
 */
#define BU_LIST_PUSH(hp, p)					\
	BU_LIST_APPEND(hp, (struct bu_list *)(p))

#define BU_LIST_POP(structure, hp, p)				\
	{							\
		if (BU_LIST_NON_EMPTY(hp))				\
		{							\
		    (p) = ((struct structure *)((hp)->forw));		\
		    BU_LIST_DEQUEUE((struct bu_list *)(p));		\
		}							\
		else							\
		     (p) = (struct structure *) 0;			\
	}

#define BU_LIST_POP_T(hp, type )				\
	(type *)bu_list_pop( hp )

/**
 * "Bulk transfer" all elements from the list headed by src_hd onto
 * the list headed by dest_hd, without examining every element in the
 * list.  src_hd is left with a valid but empty list.
 *
 * BU_LIST_INSERT_LIST places src_hd elements at head of dest_hd list,
 * BU_LIST_APPEND_LIST places src_hd elements at end of dest_hd list.
 */
#define BU_LIST_INSERT_LIST(dest_hp, src_hp) \
	if ( BU_LIST_NON_EMPTY(src_hp) )  { \
		register struct bu_list	*_first = (src_hp)->forw; \
		register struct bu_list	*_last = (src_hp)->back; \
		(dest_hp)->forw->back = _last; \
		_last->forw = (dest_hp)->forw; \
		(dest_hp)->forw = _first; \
		_first->back = (dest_hp); \
		(src_hp)->forw = (src_hp)->back = (src_hp); \
	}

#define BU_LIST_APPEND_LIST(dest_hp, src_hp) \
	if ( BU_LIST_NON_EMPTY(src_hp) )  {\
		register struct bu_list	*_first = (src_hp)->forw; \
		register struct bu_list	*_last = (src_hp)->back; \
		_first->back = (dest_hp)->back; \
		(dest_hp)->back->forw = _first; \
		(dest_hp)->back = _last; \
		_last->forw = (dest_hp); \
		(src_hp)->forw = (src_hp)->back = (src_hp); \
	}

/**
 * Test if a doubly linked list is empty, given head pointer
 */
#define BU_LIST_IS_EMPTY(hp)	((hp)->forw == (hp))
#define BU_LIST_NON_EMPTY(hp)	((hp)->forw != (hp))
#define BU_LIST_NON_EMPTY_P(p, structure, hp)	\
	(((p)=(struct structure *)((hp)->forw)) != (struct structure *)(hp))
#define BU_LIST_IS_CLEAR(hp)	((hp)->magic == 0 && \
			(hp)->forw == BU_LIST_NULL && \
			(hp)->back == BU_LIST_NULL)

/* Handle list initialization */
#define	BU_LIST_UNINITIALIZED(hp)	((hp)->forw == BU_LIST_NULL)
#define	BU_LIST_IS_INITIALIZED(hp)	((hp)->forw != BU_LIST_NULL)
#define BU_LIST_INIT(hp)	{ \
	(hp)->forw = (hp)->back = (hp); \
	(hp)->magic = BU_LIST_HEAD_MAGIC;	/* used by circ. macros */ }
#define BU_LIST_MAGIC_SET(hp, val)	{(hp)->magic = (val);}
#define BU_LIST_MAGIC_OK(hp, val)	((hp)->magic == (val))
#define BU_LIST_MAGIC_WRONG(hp, val)	((hp)->magic != (val))

/* Return re-cast pointer to first element on list.
 * No checking is performed to see if list is empty.
 */
#define BU_LIST_LAST(structure, hp)	\
	((struct structure *)((hp)->back))
#define BU_LIST_BACK(structure, hp)	\
	((struct structure *)((hp)->back))
#define BU_LIST_PREV(structure, hp)	\
	((struct structure *)((hp)->back))
#define BU_LIST_FIRST(structure, hp)	\
	((struct structure *)((hp)->forw))
#define BU_LIST_FORW(structure, hp)	\
	((struct structure *)((hp)->forw))
#define BU_LIST_NEXT(structure, hp)	\
	((struct structure *)((hp)->forw))

/**
 * Boolean test to see if current list element is the head
 */
#define BU_LIST_IS_HEAD(p, hp)	\
	(((struct bu_list *)(p)) == (hp))
#define BU_LIST_NOT_HEAD(p, hp)	\
	(((struct bu_list *)(p)) != (hp))
#define BU_CK_LIST_HEAD( _p )	BU_CKMAG( (_p), BU_LIST_HEAD_MAGIC, "bu_list")

/**
 * Boolean test to see if previous list element is the head
 */
#define BU_LIST_PREV_IS_HEAD(p, hp)\
	(((struct bu_list *)(p))->back == (hp))
#define BU_LIST_PREV_NOT_HEAD(p, hp)\
	(((struct bu_list *)(p))->back != (hp))

/**
 * Boolean test to see if the next list element is the head
 */
#define BU_LIST_NEXT_IS_HEAD(p, hp)	\
	(((struct bu_list *)(p))->forw == (hp))
#define BU_LIST_NEXT_NOT_HEAD(p, hp)	\
	(((struct bu_list *)(p))->forw != (hp))

#define BU_LIST_EACH( hp, p, type ) \
	 for ( (p)=(type *)BU_LIST_FIRST(bu_list, hp); \
	      (p) && BU_LIST_NOT_HEAD(p, hp); \
	      (p)=(type *)BU_LIST_PNEXT(bu_list, p) ) \

#define BU_LIST_REVEACH( hp, p, type ) \
	 for ( (p)=(type *)BU_LIST_LAST(bu_list, hp); \
	      (p) && BU_LIST_NOT_HEAD(p, hp); \
	      (p)=(type *)BU_LIST_PREV(bu_list, ((struct bu_list *)(p))) ) \

#define BU_LIST_TAIL( hp, start, p, type ) \
	 for ( (p)=(type *)start; \
	      (p) && BU_LIST_NOT_HEAD(p, hp); \
	      (p)=(type *)BU_LIST_PNEXT(bu_list, (p)) )

/**
 * Intended as innards for a for loop to visit all nodes on list, e.g.:
 *
 * for ( BU_LIST_FOR( p, structure, hp ) )  {
 *	work_on( p );
 * }
 */
#define BU_LIST_FOR(p, structure, hp)	\
	(p)=BU_LIST_FIRST(structure, hp); \
	(p) && BU_LIST_NOT_HEAD(p, hp); \
	(p)=BU_LIST_PNEXT(structure, p)

#define BU_LIST_FOR_BACKWARDS(p, structure, hp)	\
	(p)=BU_LIST_LAST(structure, hp); \
	(p) && BU_LIST_NOT_HEAD(p, hp); \
	(p)=BU_LIST_PLAST(structure, p)

/**
 * Process all the list members except hp and the actual head.  Useful
 * when starting somewhere besides the head.
 */
#define BU_LIST_FOR_CIRC(p, structure, hp)	\
	(p)=BU_LIST_PNEXT_CIRC(structure, hp); \
	(p) && (p) != (hp); \
	(p)=BU_LIST_PNEXT_CIRC(structure, p)

/**
 * Intended as innards for a for loop to visit elements of two lists
 * in tandem, e.g.:
 *
 * for (BU_LIST_FOR2(p1, p2, structure, hp1, hp2) ) {
 *	process( p1, p2 );
 * }
 */
#define	BU_LIST_FOR2(p1, p2, structure, hp1, hp2)				\
		(p1)=BU_LIST_FIRST(structure, hp1),			\
		(p2)=BU_LIST_FIRST(structure, hp2);			\
		(p1) && BU_LIST_NOT_HEAD((struct bu_list *)(p1), (hp1)) &&	\
		(p2) && BU_LIST_NOT_HEAD((struct bu_list *)(p2), (hp2));		\
		(p1)=BU_LIST_NEXT(structure, (struct bu_list *)(p1)),	\
		(p2)=BU_LIST_NEXT(structure, (struct bu_list *)(p2))

/**
 * Innards for a while loop that constantly picks off the first
 * element.  Useful mostly for a loop that will dequeue every list
 * element, e.g.:
 *
 *	while ( BU_LIST_WHILE(p, structure, hp) )  {
 *@n		BU_LIST_DEQUEUE( &(p->l) );
 *@n		free( (char *)p );
 *@n	}
 */
#define BU_LIST_WHILE(p, structure, hp)	\
	(((p)=(struct structure *)((hp)->forw)) != (struct structure *)(hp))

/**
 * Return the magic number of the first (or last) item on a list
 */
#define BU_LIST_FIRST_MAGIC(hp)		((hp)->forw->magic)
#define BU_LIST_LAST_MAGIC(hp)		((hp)->back->magic)

/**
 * Return pointer to next (or previous) element, which may be the head
 */
#define BU_LIST_PNEXT(structure, p)	\
	((struct structure *)(((struct bu_list *)(p))->forw))
#define BU_LIST_PLAST(structure, p)	\
	((struct structure *)(((struct bu_list *)(p))->back))

/**
 * Return pointer two links away, which may include the head
 */
#define BU_LIST_PNEXT_PNEXT(structure, p)	\
	((struct structure *)(((struct bu_list *)(p))->forw->forw))
#define BU_LIST_PNEXT_PLAST(structure, p)	\
	((struct structure *)(((struct bu_list *)(p))->forw->back))
#define BU_LIST_PLAST_PNEXT(structure, p)	\
	((struct structure *)(((struct bu_list *)(p))->back->forw))
#define BU_LIST_PLAST_PLAST(structure, p)	\
	((struct structure *)(((struct bu_list *)(p))->back->back))

/**
 * Return pointer to circular next element; ie, ignoring the list head
 */
#define BU_LIST_PNEXT_CIRC(structure, p)	\
	((BU_LIST_FIRST_MAGIC((struct bu_list *)(p)) == BU_LIST_HEAD_MAGIC) ? \
		BU_LIST_PNEXT_PNEXT(structure, (struct bu_list *)(p)) : \
		BU_LIST_PNEXT(structure, p) )

/**
 * Return pointer to circular last element; ie, ignoring the list head
 */
#define BU_LIST_PPREV_CIRC(structure, p)	\
	((BU_LIST_LAST_MAGIC((struct bu_list *)(p)) == BU_LIST_HEAD_MAGIC) ? \
		BU_LIST_PLAST_PLAST(structure, (struct bu_list *)(p)) : \
		BU_LIST_PLAST(structure, p) )

/**
 * Support for membership on multiple linked lists.
 *
 * When a structure of type '_type' contains more than one bu_list
 * structure within it (such as the NMG edgeuse), this macro can be
 * used to convert a pointer '_ptr2' to a "midway" bu_list structure
 * (an element called '_name2' in structure '_type') back into a
 * pointer to the overall enclosing structure.  Examples:
 *
 * eu = BU_LIST_MAIN_PTR( edgeuse, midway, l2 );
 *
 * eu1 = BU_LIST_MAIN_PTR(edgeuse, BU_LIST_FIRST(bu_list, &eg1->eu_hd2), l2);
 *
 * Files using BU_LIST_MAIN_PTR will need to include stddef.h
 */
#define BU_LIST_MAIN_PTR(_type, _ptr2, _name2)	\
	((struct _type *)(((char *)(_ptr2)) - offsetof(struct _type, _name2.magic)))
/** @} */


/**
 * fastf_t - Intended to be the fastest floating point data type on
 * the current machine, with at least 64 bits of precision.  On 16 and
 * 32 bit machine, this is typically "double", but on 64 bit machines,
 * it is often "float".  Virtually all floating point variables (and
 * more complicated data types, like vect_t and mat_t) are defined as
 * fastf_t.  The one exception is when a subroutine return is a
 * floating point value; that is always declared as "double".
 *
 * TODO: If used pervasively, it should eventually be possible to make
 * fastf_t a GMP C++ type for fixed-precision computations.
 */
typedef double fastf_t;

/**
 * Definitions about limits of floating point representation
 * Eventually, should be tied to type of hardware (IEEE, IBM, Cray)
 * used to implement the fastf_t type.
 *
 * MAX_FASTF - Very close to the largest value that can be held by a
 * fastf_t without overflow.  Typically specified as an integer power
 * of ten, to make the value easy to spot when printed.  TODO: macro
 * function syntax instead of constant (DEPRECATED)
 *
 * SQRT_MAX_FASTF - sqrt(MAX_FASTF), or slightly smaller.  Any number
 * larger than this, if squared, can be expected to * produce an
 * overflow.  TODO: macro function syntax instead of constant
 * (DEPRECATED)
 *
 * SMALL_FASTF - Very close to the smallest value that can be
 * represented while still being greater than zero.  Any number
 * smaller than this (and non-negative) can be considered to be
 * zero; dividing by such a number can be expected to produce a
 * divide-by-zero error.  All divisors should be checked against
 * this value before actual division is performed.  TODO: macro
 * function sytax instead of constant (DEPRECATED)
 *
 * SQRT_SMALL_FASTF - sqrt(SMALL_FASTF), or slightly larger.  The
 * value of this is quite a lot larger than that of SMALL_FASTF.  Any
 * number smaller than this, when squared, can be expected to produce
 * a zero result.  TODO: macro function syntax instead of constant
 * (DEPRECATED)
 *
 */
#if defined(vax) || (defined(sgi) && !defined(mips))
   /* DEC VAX "D" format, the most restrictive */
#  define MAX_FASTF		1.0e37	/* Very close to the largest number */
#  define SQRT_MAX_FASTF	1.0e18	/* This squared just avoids overflow */
#  define SMALL_FASTF		1.0e-37	/* Anything smaller is zero */
#  define SQRT_SMALL_FASTF	1.0e-18	/* This squared gives zero */
#else
   /* IBM format, being the next most restrictive format */
#  define MAX_FASTF		1.0e73	/* Very close to the largest number */
#  define SQRT_MAX_FASTF	1.0e36	/* This squared just avoids overflow */
#  define SMALL_FASTF		1.0e-77	/* Anything smaller is zero */
#  if defined(aux)
#    define SQRT_SMALL_FASTF	1.0e-40 /* _doprnt error in libc */
#  else
#    define SQRT_SMALL_FASTF	1.0e-39	/* This squared gives zero */
#  endif
#endif

/** DEPRECATED, do not use */
#define SMALL			SQRT_SMALL_FASTF



/*----------------------------------------------------------------------*/
/* bitv.c */
/*
 *			B U _ B I T V
 */
/** @addtogroup bitv */
/**@{*/

/**
 * bitv_t - The widest fast integer type available, used to implement
 * bit vectors.  On most machines, this is "long", but on some
 * machines a vendor-specific type such as "long long" can give
 * access to wider integers.
 */
typedef long bitv_t;

/**
 * @brief
 * Bit vector data structure.
 *
 * bu_bitv uses a little-endian encoding, placing bit 0 on the right
 * side of the 0th word.
 *
 * This is done only because left-shifting a 1 can be done in an
 * efficient word-length-independent manner; going the other way would
 * require a compile-time constant with only the sign bit set, and an
 * unsigned right shift, which some machines don't have in hardware,
 * or an extra subtraction.
 *
 * Application code should *never* peak at the bit-buffer; use the
 * macros.  The external hex form is most signigicant byte first (bit
 * 0 is at the right).  Note that MUVES does it differently.
 */
struct bu_bitv {
    struct bu_list	l;		/**< @brief linked list for caller's use  */
    unsigned int	nbits;		/**< @brief actual size of bits[], in bits  */
    bitv_t		bits[2];	/**< @brief variable size array  */
};

#define BU_CK_BITV(_vp)		BU_CKMAG(_vp, BU_BITV_MAGIC, "bu_bitv")

/**
 * b u _ b i t v _ s h i f t
 *
 * returns floor(log2(sizeof(bitv_t)*8.0)), i.e. the number of bits
 * required with base-2 encoding to index any bit in an array of
 * length sizeof(bitv_t)*8.0 bits long.  users should not call this
 * directly, instead calling the BU_BITV_SHIFT macro instead.
 */
BU_EXPORT BU_EXTERN(inline int bu_bitv_shift, ());

/** Bit vector index size */
#define BU_BITV_SHIFT bu_bitv_shift()

/** Bit vector mask */
#define BU_BITV_MASK	((1<<BU_BITV_SHIFT)-1)

/*
 * Bit-string manipulators for arbitrarily long bit strings stored as
 * an array of bitv_t's.
 */
#define BU_BITS2BYTES(_nb)	(BU_BITS2WORDS(_nb)*sizeof(bitv_t))
#define BU_BITS2WORDS(_nb)	(((_nb)+BU_BITV_MASK)>>BU_BITV_SHIFT)
#define BU_WORDS2BITS(_nw)	((_nw)*sizeof(bitv_t)*8)



#if 1
#define BU_BITTEST(_bv, bit)	\
	(((_bv)->bits[(bit)>>BU_BITV_SHIFT] & (((bitv_t)1)<<((bit)&BU_BITV_MASK)))!=0)
#else
static __inline__ int BU_BITTEST(volatile void * addr, int nr)
{
	int oldbit;

	__asm__ __volatile__(
		"btl %2,%1\n\tsbbl %0,%0"
		:"=r" (oldbit)
		:"m" (addr), "Ir" (nr));
	return oldbit;
}
#endif

#define BU_BITSET(_bv, bit)	\
	((_bv)->bits[(bit)>>BU_BITV_SHIFT] |= (((bitv_t)1)<<((bit)&BU_BITV_MASK)))
#define BU_BITCLR(_bv, bit)	\
	((_bv)->bits[(bit)>>BU_BITV_SHIFT] &= ~(((bitv_t)1)<<((bit)&BU_BITV_MASK)))

/**
 * requires #include <string.h>
 */
#define BU_BITV_ZEROALL(_bv)	\
	{ memset((char *)((_bv)->bits), 0, BU_BITS2BYTES( (_bv)->nbits )); }

/* This is not done by default for performance reasons */
#ifdef NO_BOMBING_MACROS
#  define BU_BITV_BITNUM_CHECK(_bv, _bit)
#else
#  define BU_BITV_BITNUM_CHECK(_bv, _bit)	/* Validate bit number */ \
	if ( ((unsigned)(_bit)) >= (_bv)->nbits )  {\
		bu_log("BU_BITV_BITNUM_CHECK bit number (%u) out of range (0..%u)\n", \
			((unsigned)(_bit)), (_bv)->nbits); \
		bu_bomb("process self-terminating\n");\
	}
#endif

#ifdef NO_BOMBING_MACROS
#  define BU_BITV_NBITS_CHECK(_bv, _nbits)
#else
#  define BU_BITV_NBITS_CHECK(_bv, _nbits)	/* Validate number of bits */ \
	if ( ((unsigned)(_nbits)) > (_bv)->nbits )  {\
		bu_log("BU_BITV_NBITS_CHECK number of bits (%u) out of range (> %u)", \
			((unsigned)(_nbits)), (_bv)->nbits ); \
		bu_bomb("process self-terminating"); \
		}
#endif


/**
 * Macros to efficiently find all the ONE bits in a bit vector.
 * Counts words down, counts bits in words going up, for speed &
 * portability.  It does not matter if the shift causes the sign bit
 * to smear to the right.
 *
 * @par Example:
@code
	BU_BITV_LOOP_START(bv)  {
		fiddle(BU_BITV_LOOP_INDEX);
	} BU_BITV_LOOP_END;
@endcode
 *
 */
#define BU_BITV_LOOP_START(_bv)	\
{ \
	register int		_wd;	/* Current word number */  \
	BU_CK_BITV(_bv); \
	for ( _wd=BU_BITS2WORDS((_bv)->nbits)-1; _wd>=0; _wd-- )  {  \
		register int	_b;	/* Current bit-in-word number */  \
		register bitv_t	_val;	/* Current word value */  \
		if ((_val = (_bv)->bits[_wd])==0) continue;  \
		for (_b=0; _b < BU_BITV_MASK+1; _b++, _val >>= 1 ) { \
			if ( !(_val & 1) )  continue;

/**
 * This macro is valid only between a BU_BITV_LOOP_START/LOOP_END
 * pair, and gives the bit number of the current iteration.
 */
#define BU_BITV_LOOP_INDEX	((_wd << BU_BITV_SHIFT) | _b)

#define BU_BITV_LOOP_END	\
		} /* end for (_b) */ \
	} /* end for (_wd) */ \
} /* end block */
/** @} */

/*----------------------------------------------------------------------*/
/* hist.c */

/** @addtogroup bu_hist */
/** @{ */
/**
 * B U _ H I S T
 *
 * @struct bu_hist bu.h
 * @brief histogram support
 */
struct bu_hist  {
    unsigned long	magic;		/**< @brief magic # for id/check  */
    fastf_t		hg_min;		/**< @brief minimum value  */
    fastf_t		hg_max;		/**< @brief maximum value  */
    fastf_t		hg_clumpsize;	/**< @brief (max-min+1)/nbins+1  */
    long		hg_nsamples;	/**< @brief total number of samples spread into histogram  */
    long		hg_nbins;	/**< @brief # of bins in hg_bins[]  */
    long		*hg_bins;	/**< @brief array of counters  */
};
#define BU_CK_HIST(_p)	BU_CKMAG(_p, BU_HIST_MAGIC, "struct bu_hist")

#define BU_HIST_TALLY( _hp, _val )	{ \
	if ( (_val) <= (_hp)->hg_min )  { \
		(_hp)->hg_bins[0]++; \
	} else if ( (_val) >= (_hp)->hg_max )  { \
		(_hp)->hg_bins[(_hp)->hg_nbins]++; \
	} else { \
		(_hp)->hg_bins[(int)(((_val)-(_hp)->hg_min)/(_hp)->hg_clumpsize)]++; \
	} \
	(_hp)->hg_nsamples++;  }

#define BU_HIST_TALLY_MULTIPLE( _hp, _val, _count )	{ \
	register int	__count = (_count); \
	if ( (_val) <= (_hp)->hg_min )  { \
		(_hp)->hg_bins[0] += __count; \
	} else if ( (_val) >= (_hp)->hg_max )  { \
		(_hp)->hg_bins[(_hp)->hg_nbins] += __count; \
	} else { \
		(_hp)->hg_bins[(int)(((_val)-(_hp)->hg_min)/(_hp)->hg_clumpsize)] += __count; \
	} \
	(_hp)->hg_nsamples += __count;  }

/** @} */
/*----------------------------------------------------------------------*/
/* ptbl.c */
/**
 * @addtogroup ptbl
 * @struct bu_ptbl
 * @brief
 * Support for generalized "pointer tables".
 */
/** @{ */

struct bu_ptbl {
    struct bu_list	l;	/**< @brief linked list for caller's use  */
    int		end;	/**< @brief index into buffer of first available location  */
    int		blen;	/**< @brief # of (long *)'s worth of storage at *buffer  */
    long 		**buffer; /**< @brief data storage area  */
};
#define BU_CK_PTBL(_p)		BU_CKMAG(_p, BU_PTBL_MAGIC, "bu_ptbl")

#define BU_PTBL_INIT	0	/**< @brief  initialize table pointer struct & get storage */
#define BU_PTBL_INS	1	/**< @brief  insert an item (long *) into a table */
#define BU_PTBL_LOC 	2	/**< @brief  locate a (long *) in an existing table */
#define BU_PTBL_FREE	3	/**< @brief  deallocate buffer associated with a table */
#define BU_PTBL_RST	4	/**< @brief  empty a table, but keep storage on hand */
#define BU_PTBL_CAT	5	/**< @brief  catenate one table onto another */
#define BU_PTBL_RM	6	/**< @brief  remove all occurrences of an item from a table */
#define BU_PTBL_INS_UNIQUE 7	/**< @brief  insert item into table, if not present */
#define BU_PTBL_ZERO	8	/**< @brief  replace all occurrences of an item by 0 */
/*
 * For those routines that have to "peek" into the ptbl a little bit.
 */
#define BU_PTBL_BASEADDR(ptbl)	((ptbl)->buffer)
#define BU_PTBL_LASTADDR(ptbl)	((ptbl)->buffer + (ptbl)->end - 1)
#define BU_PTBL_END(ptbl)	((ptbl)->end)
#define BU_PTBL_LEN(p)	((p)->end)
#define BU_PTBL_GET(ptbl, i)	((ptbl)->buffer[(i)])
#define BU_PTBL_SET(ptbl, i, val)	((ptbl)->buffer[(i)] = (long*)(val))
#define BU_PTBL_TEST(ptbl)	((ptbl)->l.magic == BU_PTBL_MAGIC)
#define BU_PTBL_CLEAR_I(_ptbl, _i) ((_ptbl)->buffer[(_i)] = (long *)0)

/**
 * A handy way to visit all the elements of the table is:
 *
 *	struct edgeuse **eup;
 *	for ( eup = (struct edgeuse **)BU_PTBL_LASTADDR(&eutab);
 *	     eup >= (struct edgeuse **)BU_PTBL_BASEADDR(&eutab); eup-- )  {
 *		NMG_CK_EDGEUSE(*eup);
 *	}
 * or
 *	for ( BU_PTBL_FOR( eup, (struct edgeuse **), &eutab ) )  {
 *		NMG_CK_EDGEUSE(*eup);
 *	}
 */
#define BU_PTBL_FOR(ip, cast, ptbl)	\
    ip = cast BU_PTBL_LASTADDR(ptbl); ip >= cast BU_PTBL_BASEADDR(ptbl); ip--


/* vlist, vlblock?  But they use vmath.h .. hrm. */
/** @} */

/*----------------------------------------------------------------------*/
/* mappedfile.c
 * @addtogroup mf
 * @struct bu_mapped_file bu.h
 * @{
 */

/**
 * B U _ M A P P E D _ F I L E
 *
 * @brief
 * Structure for opening a mapped file.
 *
 * Each file is opened and mapped only once (per application, as
 * tagged by the string in "appl" field).  Subsequent opens require an
 * exact match on both strings.
 *
 * Before allocating apbuf and performing data conversion into it,
 * openers should check to see if the file has already been opened and
 * converted previously.
 *
 * When used in RT, the mapped files are not closed at the end of a
 * frame, so that subsequent frames may take advantage of the large
 * data files having already been read and converted.  Examples
 * include EBMs, texture maps, and height fields.
 *
 * For appl == "db_i", file is a ".g" database & apbuf is (struct db_i *).
 */
struct bu_mapped_file {
    struct bu_list	l;
    char	*name;		/**< @brief bu_strdup() of file name  */
    genptr_t	buf;		/**< @brief In-memory copy of file (may be mmapped)  */
    long	buflen;		/**< @brief # bytes in 'buf'  */
    int		is_mapped;	/**< @brief 1=mmap() used, 0=bu_malloc/fread  */
    char	*appl;		/**< @brief bu_strdup() of tag for application using 'apbuf'  */
    genptr_t	apbuf;		/**< @brief opt: application-specific buffer  */
    long	apbuflen;	/**< @brief opt: application-specific buflen  */
    long	modtime;	/**< @brief date stamp, in case file is modified  */
    int		uses;		/**< @brief # ptrs to this struct handed out  */
    int		dont_restat;	/**< @brief 1=on subsequent opens, don't re-stat()  */
};
#define BU_CK_MAPPED_FILE(_p)	BU_CKMAG(_p, BU_MAPPED_FILE_MAGIC, "bu_mapped_file")

/** @} */
/*----------------------------------------------------------------------*/

/* formerly rt_g.rtg_logindent, now use bu_log_indent_delta() */
typedef int (*bu_hook_t)BU_ARGS((genptr_t, genptr_t));

struct bu_hook_list {
    struct bu_list	l; /**< @brief linked list  */
    bu_hook_t	hookfunc; /**< @brief function to call  */
    genptr_t 	clientdata; /**< @brief data for caller  */
};

#define BU_HOOK_NULL 0
#define BU_HOOK_LIST_NULL	((struct bu_hook_list *) 0)

/** list of callbacks to call during bu_bomb, used by mged. */
BU_EXPORT extern struct bu_hook_list bu_bomb_hook_list;

/*----------------------------------------------------------------------*/
/* avs.c */
/** @addtogroup avs */
/** @{ */
/*
 *  Attribute/value sets
 */

/**
 * B U _ A T T R I B U T E _ V A L U E _ P A I R
 *
 * These strings may or may not be individually allocated, it depends
 * on usage.
 */
struct bu_attribute_value_pair {
    const char	*name;	/**< @brief attribute name  */
    const char	*value; /**< @brief attribute value  */
};

/**
 * B U _ A T T R I B U T E _ V A L U E _ S E T
 *
 * A variable-sized attribute-value-pair array.
 *
 * avp points to an array of [max] slots.  The interface routines will
 * realloc to extend as needed.
 *
 * In general, each of the names and values is a local copy made with
 * bu_strdup(), and each string needs to be freed individually.
 * However, if a name or value pointer is between readonly_min and
 * readonly_max, then it is part of a big malloc block that is being
 * freed by the caller, and should not be individually freed.
 */
struct bu_attribute_value_set {
    unsigned long			magic;
    unsigned int			count;	/**< @brief # valid entries in avp  */
    unsigned int			max;	/**< @brief # allocated slots in avp  */
    genptr_t				readonly_min;
    genptr_t				readonly_max;
    struct bu_attribute_value_pair	*avp;	/**< @brief array[max]  */
};
#define BU_CK_AVS(_avp)		BU_CKMAG(_avp, BU_AVS_MAGIC, "bu_attribute_value_set")

#define BU_AVS_FOR(_pp, _avp)	\
	(_pp) = &(_avp)->avp[(_avp)->count-1]; (_pp) >= (_avp)->avp; (_pp)--

/**
 * Some (but not all) attribute name and value string pointers are
 * taken from an on-disk format bu_external block, while others have
 * been bu_strdup()ed and need to be freed.  This macro indicates
 * whether the pointer needs to be freed or not.
 */
#define AVS_IS_FREEABLE(_avsp, _p)	\
	( (_avsp)->readonly_max == NULL || \
	    ((genptr_t)(_p) < (genptr_t)(_avsp)->readonly_min || (genptr_t)(_p) > (genptr_t)(_avsp)->readonly_max) )

/** @} */
/*----------------------------------------------------------------------*/
/* vls.c */
/** @addtogroup vls */
/** @{ */
/*
 * Variable Length Strings: bu_vls support
 */
struct bu_vls  {
    unsigned long	vls_magic;
    char		*vls_str;	/**< @brief Dynamic memory for buffer  */
    int	vls_offset;	/**< @brief Offset into vls_str where data is good  */
    int	vls_len;	/**< @brief Length, not counting the null  */
    int	vls_max;
};
#define BU_CK_VLS(_vp)		BU_CKMAG(_vp, BU_VLS_MAGIC, "bu_vls")
#define BU_VLS_IS_INITIALIZED(_vp)	\
	((_vp) && ((_vp)->vls_magic == BU_VLS_MAGIC))

/** @} */
/*----------------------------------------------------------------------*/
/* vlb.c */
/** @addtogroup vlb */
/** @{ */
/*
 * Variable Length Buffer: bu_vlb support
 */
struct bu_vlb {
    unsigned long magic;
    unsigned char *buf;  /**< @brief Dynamic memory for the buffer */
    int bufCapacity;     /**< @brief Current capacity of the buffer */
    int nextByte;        /**< @brief Number of bytes currently used in the buffer */
};
#define BU_VLB_BLOCK_SIZE       512
#define BU_CK_VLB(_vp)		BU_CKMAG(_vp, BU_VLB_MAGIC, "bu_vlb")
#define BU_VLB_IS_INITIALIZED(_vp)	\
	((_vp) && ((_vp)->magic == BU_VLB_MAGIC))
/** @} */
/*----------------------------------------------------------------------*/

/*
 * Section for manifest constants for bu_semaphore_acquire()
 */
#define BU_SEM_SYSCALL	0
#define BU_SEM_LISTS	1
#define BU_SEM_BN_NOISE	2
#define BU_SEM_MAPPEDFILE 3
#define BU_SEM_LAST	(BU_SEM_MAPPEDFILE+1)	/* allocate this many for LIBBU+LIBBN */
/*
 * Automatic restart capability in bu_bomb().  The return from
 * BU_SETJUMP is the return from the setjmp().  It is 0 on the first
 * pass through, and non-zero when re-entered via a longjmp() from
 * bu_bomb().  This is only safe to use in non-parallel applications.
 */
#define BU_SETJUMP	setjmp((bu_setjmp_valid=1, bu_jmpbuf))
#define BU_UNSETJUMP	(bu_setjmp_valid=0)
/* These are global because BU_SETJUMP must be macro.  Please don't touch. */
BU_EXPORT extern int	bu_setjmp_valid;		/* !0 = bu_jmpbuf is valid */
BU_EXPORT extern jmp_buf	bu_jmpbuf;			/* for BU_SETJMP() */
/** @} */
/*-------------------------------------------------------------------------*/
/** @addtogroup mro */
/** @{ */
/**
 * B U _ M R O
 *
 * Support for Multiply Represented Objects
 */

struct bu_mro {
    unsigned long	magic;
    struct bu_vls	string_rep;
    char		long_rep_is_valid;
    long		long_rep;
    char		double_rep_is_valid;
    double		double_rep;
};

#define BU_CK_MRO(_vp)		BU_CKMAG(_vp, BU_MRO_MAGIC, "bu_mro")

#define BU_MRO_INVALIDATE(_p ) {\
	_p->long_rep_is_valid = '\0';\
	_p->double_rep_is_valid = '\0';\
}

#define BU_MRO_GETDOUBLE( _p ) ( _p->double_rep_is_valid ? _p->double_rep : \
	(_p->double_rep = strtod( bu_vls_addr( &_p->string_rep ), NULL ), \
	( _p->double_rep_is_valid='y', _p->double_rep ) ) )

#define BU_MRO_GETLONG( _p ) ( _p->long_rep_is_valid ? _p->long_rep : \
	(_p->long_rep = strtol( bu_vls_addr( &_p->string_rep ), NULL, 10 ), \
	( _p->long_rep_is_valid='y', _p->long_rep ) ) )

#define BU_MRO_GETSTRING( _p ) bu_vls_addr( &_p->string_rep )

#define BU_MRO_STRLEN( _p ) bu_vls_strlen( &_p->string_rep )
/** @} */

/*----------------------------------------------------------------------*/
/**
 * @addtogroup bu_debug Debugging
 * @ingroup libbu
 * @{
 */

/*
 * Section for BU_DEBUG values
 *
 * These can be set from the command-line of RT-compatible programs
 * using the "-!" option.
 */
BU_EXPORT extern int	bu_debug;
/* These definitions are each for one bit */
#define BU_DEBUG_OFF		0	/* No debugging */

#define BU_DEBUG_COREDUMP	0x00000001	/* bu_bomb() should dump core on exit */
#define BU_DEBUG_MEM_CHECK	0x00000002	/* Mem barrier & leak checking */
#define BU_DEBUG_MEM_LOG	0x00000004	/* Print all dynamic memory operations */
#define BU_DEBUG_DB		0x00000008	/* Database debug logging */

#define BU_DEBUG_PARALLEL	0x00000010	/* Parallel debug logging */
#define BU_DEBUG_MEM_QCHECK	0x00000020	/* Fast mem leak checking (won't work with corruption) */
#define BU_DEBUG_BACKTRACE	0x00000040	/* Log backtrace details during abnormal exit */
#define BU_DEBUG_ATTACH		0x00000080	/* Waits for a debugger to attach during a crash */

#define BU_DEBUG_MATH		0x00000100	/* Fundamental math routines (plane.c, mat.c) */
#define BU_DEBUG_PTBL		0x00000200	/* bu_ptbl_*() logging */
#define BU_DEBUG_AVS		0x00000400	/* bu_avs_*() logging */
#define BU_DEBUG_MAPPED_FILE	0x00000800	/* bu_mapped_file logging */

#define BU_DEBUG_PATHS		0x00001000	/* File and path debug logging */
#define BU_DEBUG_UNUSED_1	0x00002000	/* unused */
#define BU_DEBUG_UNUSED_2	0x00004000	/* unused */
#define BU_DEBUG_UNUSED_3	0x00008000	/* unused */

#define BU_DEBUG_TABDATA	0x00010000	/* LIBBN: tabdata */
#define BU_DEBUG_UNUSED_4	0x00020000	/* unused */
#define BU_DEBUG_UNUSED_5	0x00040000	/* unused */
#define BU_DEBUG_UNUSED_6	0x00080000	/* unused */

/* Format string for bu_printb() */
#define BU_DEBUG_FORMAT	\
"\020\
\025TABDATA\
\015?\
\014MAPPED_FILE\013AVS\012PTBL\011MATH\010?\7?\6MEM_QCHECK\5PARALLEL\
\4?\3MEM_LOG\2MEM_CHECK\1COREDUMP"

/** @} */
/*----------------------------------------------------------------------*/
/* parse.c */
/** @addtogroup parse */
/** @{ */
/*
 * Structure parse/print
 *
 * Definitions and data structures needed for routines that assign
 * values to elements of arbitrary data structures, the layout of
 * which is described by tables of "bu_structparse" structures.
 */

/**
 * b u _ o f f s e t o f
 * b u _ o f f s e t o f a r r a y
 *
 * The general problem of word-addressed hardware where (int *) and
 * (char *) have different representations is handled in the parsing
 * routines that use sp_offset, because of the limitations placed on
 * compile-time initializers.
 *
 * Files using bu_offsetof or bu_offsetofarray will need to include
 * stddef.h in order to get offsetof()
 */
#ifndef offsetof
#  define bu_offsetof(_t, _m) (size_t)(&(((_t *)0)->_m))
#  define bu_offsetofarray(_t, _m) (size_t)( (((_t *)0)->_m))
#else
#  define bu_offsetof(_t, _m) offsetof(_t, _m)
#  define bu_offsetofarray(_t, _m) offsetof(_t, _m[0])
#endif


/**
 * b u _ b y t e o f f s e t
 *
 * Convert address of global data object into byte "offset" from
 * address 0.
 *
 * Strictly speaking, the C language only permits initializers of the
 * form: address +- constant, where here the intent is to measure the
 * byte address of the indicated variable.  Matching compensation code
 * for the CRAY is located in librt/parse.c
 */
#if defined(CRAY)
#	define bu_byteoffset(_i)	(((size_t)&(_i)))	/* actually a word offset */
#else
#  if defined(IRIX) && IRIX > 5 && _MIPS_SIM != _ABIN32 && _MIPS_SIM != _MIPS_SIM_ABI32
#      define bu_byteoffset(_i)	((size_t)__INTADDR__(&(_i)))
#  else
#    if defined(sgi) || defined(__convexc__) || defined(ultrix) || defined(_HPUX_SOURCE)
       /* "Lazy" way.  Works on reasonable machines with byte addressing */
#      define bu_byteoffset(_i)	((size_t)((char *)&(_i)))
#    else
#      if defined(__ia64__) || defined(__x86_64__) || defined(__sparc64__)
#        if defined (__INTEL_COMPILER)
#          define bu_byteoffset(_i)	((size_t)((char *)&(_i)))
#        else
#          define bu_byteoffset(_i)	((size_t)(((void *)&(_i))-((void *)0)))
#        endif
#      else
	 /* "Conservative" way of finding # bytes as diff of 2 char ptrs */
#        define bu_byteoffset(_i)	((size_t)(((char *)&(_i))-((char *)0)))
#      endif
#    endif
#  endif
#endif

/**
 * The "bu_structparse" struct describes one element of a structure.
 * Collections of these are combined to describe entire structures (or at
 * least those portions for which parse/print/import/export support is
 * desired.  For example:
 *@code
  struct data_structure {
	char	a_char;
	char	str[32];
	short	a_short;
	int	a_int;
	double	a_double;
  }

  struct data_structure data_default =
	{ 'c', "the default string", 32767, 1, 1.0 };

  struct data_structure my_values;

  struct bu_structparse data_sp[] ={

  {"%c", 1,  "a_char",   bu_offsetof(data_structure, a_char),
	BU_STRUCTPARSE_FUNC_NULL,
	"a single character",	(void*)&default.a_char },

  {"%s", 32, "str",      bu_offsetofarray(data_structure, str),
	BU_STRUCTPARSE_FUNC_NULL,
	"This is a full character string", (void*)default.str }, },

  {"%i", 1,  "a_short",  bu_offsetof(data_structure, a_short),
	BU_STRUCTPARSE_FUNC_NULL,
	"A 16bit integer",	(void*)&default.a_short },

  {"%d", 1,  "a_int",    bu_offsetof(data_structure, a_int),
	BU_STRUCTPARSE_FUNC_NULL,
	"A full integer",	(void*)&default.a_int },

  {"%f", 1,  "a_double", bu_offsetof(data_structure, a_double),
	BU_STRUCTPARSE_FUNC_NULL,
	"A double-precision floating point value",  (void*)&default.a_double },

  { "", 0, (char *)NULL, 0,
	BU_STRUCTPARSE_FUNC_NULL,
	(char *)NULL, (void *)NULL }

  };
 @endcode
 *
 * To parse a string, call:
 *
 *	bu_struct_parse( vls_string, data_sp, (char *)my_values)
 *
 * this will parse the vls string and assign values to the members of the
 * structure my_values
 *
 * A gross hack: To set global variables (or others for that matter)
 * you can store the actual address of the variable in the sp_offset
 * field and pass a null pointer as the last argument to
 * bu_struct_parse.  If you don't understand why this would work, you
 * probably shouldn't use this technique.
 */
struct bu_structparse {
    char		sp_fmt[4];		/**< @brief "i" or "%f", etc  */
    long		sp_count;		/**< @brief number of elements  */
    char		*sp_name;		/**< @brief Element's symbolic name  */
    long		sp_offset;		/**< @brief Byte offset in struct  */
    void		(*sp_hook)();	/**< @brief Optional hooked function, or indir ptr  */
    char		*sp_desc;		/**< @brief description of element  */
    void		*sp_default;		/**< @brief ptr to default value  */
};
#define BU_STRUCTPARSE_FUNC_NULL	((void (*)())0)


/*----------------------------------------------------------------------*/
/**
 * B U _ E X T E R N A L
 *
 * An "opaque" handle for holding onto objects, typically in some kind
 * of external form that is not directly usable without passing
 * through an "importation" function.
 *
 * A "bu_external" struct holds the "external binary" representation
 * of a structure or other block of arbitrary data.
 */
struct bu_external  {
    unsigned long	ext_magic;
    long	ext_nbytes;
    genptr_t ext_buf;
};
#define BU_INIT_EXTERNAL(_p)	{(_p)->ext_magic = BU_EXTERNAL_MAGIC; \
	(_p)->ext_buf = (genptr_t)NULL; (_p)->ext_nbytes = 0;}
#define BU_CK_EXTERNAL(_p)	BU_CKMAG(_p, BU_EXTERNAL_MAGIC, "bu_external")

/** @} */
/*----------------------------------------------------------------------*/
/* color.c */
#define	HUE		0
#define	SAT		1
#define	VAL		2
#define	ACHROMATIC	-1.0

struct bu_color
{
    unsigned long buc_magic;
    fastf_t buc_rgb[3];
};
#define	BU_COLOR_NULL		((struct bu_color *) 0)
#define BU_CK_COLOR(_bp)	BU_CKMAG(_bp, BU_COLOR_MAGIC, "bu_color")

/*----------------------------------------------------------------------*/
/* red-black tree support */
/** @addtogroup rb */
/** @{ */
/*
 * The data structures and constants for red-black trees.
 *
 * Many of these routines are based on the algorithms in chapter 13 of
 * T. H. Cormen, C. E. Leiserson, and R. L. Rivest, "_Introduction to
 * algorithms", MIT Press, Cambridge, MA, 1990.
 *
 */

/**
 * B U _ R B _ L I S T
 *
 * List of nodes or packages
 *
 * The red-black tree package uses this structure to maintain lists of
 * all the nodes and all the packages in the tree.  Applications
 * should not muck with these things.  They are maintained only to
 * facilitate freeing bu_rb_trees.
 */
struct bu_rb_list
{
    struct bu_list	l;
    union
    {
	struct bu_rb_node    *rbl_n;
	struct bu_rb_package *rbl_p;
    }			rbl_u;
};
#define	rbl_magic	l.magic
#define	rbl_node	rbl_u.rbl_n
#define	rbl_package	rbl_u.rbl_p
#define	BU_RB_LIST_NULL	((struct bu_rb_list *) 0)


/**
 * B U _ R B _ T R E E
 *
 * This is the only data structure used in the red-black tree package
 * to which application software need make any explicit reference.
 *
 * The members of this structure are grouped into three classes:
 *
 * Class I:	Reading is appropriate, when necessary,
 *		but applications should not modify.
 * Class II:	Reading and modifying are both appropriate,
 *		when necessary.
 * Class III:	All access should be through routines
 *		provided in the package.  Touch these
 *		at your own risk!
 */
typedef struct
{
    /* CLASS I - Applications may read directly. */
    unsigned long 	rbt_magic;	  /**< @brief  Magic no. for integrity check */
    int			rbt_nm_nodes;	  /**< @brief  Number of nodes */
    /* CLASS II - Applications may read/write directly. */
    void		(*rbt_print)(void *);	  /**< @brief  Data pretty-print function */
    int			rbt_debug;	  /**< @brief  Debug bits */
    char		*rbt_description; /**< @brief  Comment for diagnostics */
    /* CLASS III - Applications should not manipulate directly. */
    int		 	rbt_nm_orders;	  /**< @brief  Number of simultaneous orders */
    int			(**rbt_order)();  /**< @brief  Comparison functions */
    struct bu_rb_node	**rbt_root;	  /**< @brief  The actual trees */
    char		*rbt_unique;	  /**< @brief  Uniqueness flags */
    struct bu_rb_node	*rbt_current;	  /**< @brief  Current node */
    struct bu_rb_list	rbt_nodes;	  /**< @brief  All nodes */
    struct bu_rb_list	rbt_packages;	  /**< @brief  All packages */
    struct bu_rb_node	*rbt_empty_node;  /**< @brief  Sentinel representing nil */
}	bu_rb_tree;
#define	BU_RB_TREE_NULL	((bu_rb_tree *) 0)

/*
 * Debug bit flags for member rbt_debug
 */
#define BU_RB_DEBUG_INSERT	0x00000001	/**< @brief  Insertion process */
#define BU_RB_DEBUG_UNIQ	0x00000002	/**< @brief  Uniqueness of inserts */
#define BU_RB_DEBUG_ROTATE	0x00000004	/**< @brief  Rotation process */
#define BU_RB_DEBUG_OS	0x00000008	/**< @brief  Order-statistic operations */
#define BU_RB_DEBUG_DELETE	0x00000010	/**< @brief  Deletion process */

/**
 * B U _ R B _ P A C K A G E
 *
 * Wrapper for application data
 *
 * This structure provides a level of indirection between the
 * application software's data and the red-black nodes in which the
 * data is stored.  It is necessary because of the algorithm for
 * deletion, which generally shuffles data among nodes in the tree.
 * The package structure allows the application data to remember which
 * node "contains" it for each order.
 */
struct bu_rb_package
{
    unsigned long	rbp_magic;	/**< @brief Magic no. for integrity check  */
    struct bu_rb_node	**rbp_node;	/**< @brief Containing nodes  */
    struct bu_rb_list	*rbp_list_pos;	/**< @brief Place in the list of all pkgs.  */
    void		*rbp_data;	/**< @brief Application data  */
};
#define	BU_RB_PKG_NULL	((struct bu_rb_package *) 0)

/**
 * B U _ R B _ N O D E
 *
 * For the most part, there is a one-to-one correspondence between
 * nodes and chunks of application data.  When a node is created, all
 * of its package pointers (one per order of the tree) point to the
 * same chunk of data.  However, subsequent deletions usually muddy
 * this tidy state of affairs.
 */
struct bu_rb_node
{
    unsigned long	rbn_magic;	/**< @brief Magic no. for integrity check  */
    bu_rb_tree		*rbn_tree;	/**< @brief Tree containing this node  */
    struct bu_rb_node	**rbn_parent;	/**< @brief Parents  */
    struct bu_rb_node	**rbn_left;	/**< @brief Left subtrees  */
    struct bu_rb_node	**rbn_right;	/**< @brief Right subtrees  */
    char		*rbn_color;	/**< @brief Colors of this node  */
    int			*rbn_size;	/**< @brief Sizes of subtrees rooted here  */
    struct bu_rb_package **rbn_package;	/**< @brief Contents of this node  */
    int			rbn_pkg_refs;	/**< @brief How many orders are being used?  */
    struct bu_rb_list	*rbn_list_pos;	/**< @brief Place in the list of all nodes  */
};
#define	BU_RB_NODE_NULL	((struct bu_rb_node *) 0)

/*
 * Applications interface to bu_rb_extreme()
 */
#define	SENSE_MIN	0
#define	SENSE_MAX	1
#define	bu_rb_min(t, o)	bu_rb_extreme((t), (o), SENSE_MIN)
#define	bu_rb_max(t, o)	bu_rb_extreme((t), (o), SENSE_MAX)
#define bu_rb_pred(t, o)	bu_rb_neighbor((t), (o), SENSE_MIN)
#define bu_rb_succ(t, o)	bu_rb_neighbor((t), (o), SENSE_MAX)

/*
 * Applications interface to bu_rb_walk()
 */
#define	PREORDER	0
#define	INORDER		1
#define	POSTORDER	2


/**
 * B U _ O B S E R V E R
 */
struct bu_observer {
    struct bu_list	l;
    struct bu_vls		observer;
    struct bu_vls		cmd;
};
#define BU_OBSERVER_NULL	((struct bu_observer *)0)

/**
 * B U _ C M D T A B
 */
struct bu_cmdtab {
    char *ct_name;
    int (*ct_func)();
};

/*----------------------------------------------------------------------*/
/* Miscellaneous macros */
#define bu_made_it()		bu_log("Made it to %s:%d\n",	\
					__FILE__, __LINE__)
/*----------------------------------------------------------------------*/
/*
 * Declarations of external functions in LIBBU.  Source file names
 * listed alphabetically.
 */
/**@}*/

/** @addtogroup avs */
/** @{ */
/* avs.c */
BU_EXPORT BU_EXTERN(void bu_avs_init,
		    (struct bu_attribute_value_set *avp,
		     int len,
		     const char *str));
BU_EXPORT BU_EXTERN(void bu_avs_init_empty,
		    (struct bu_attribute_value_set *avp));
BU_EXPORT BU_EXTERN(struct bu_attribute_value_set *bu_avs_new,
		    (int len,
		     const char *str));
BU_EXPORT BU_EXTERN(int bu_avs_add,
		    (struct bu_attribute_value_set *avp,
		     const char *attribute,
		     const char *value));
BU_EXPORT BU_EXTERN(int bu_avs_add_vls,
		    (struct bu_attribute_value_set *avp,
		     const char *attribute,
		     const struct bu_vls *value_vls));
BU_EXPORT BU_EXTERN(void bu_avs_merge,
		    (struct bu_attribute_value_set *dest,
		     const struct bu_attribute_value_set *src));
BU_EXPORT BU_EXTERN(const char *bu_avs_get,
		    (const struct bu_attribute_value_set *avp,
		     const char *attribute));
BU_EXPORT BU_EXTERN(int bu_avs_remove,
		    (struct bu_attribute_value_set *avp,
		     const char *attribute));
BU_EXPORT BU_EXTERN(void bu_avs_free,
		    (struct bu_attribute_value_set *avp));
BU_EXPORT BU_EXTERN(void bu_avs_print,
		    (const struct bu_attribute_value_set *avp,
		     const char *title));
BU_EXPORT BU_EXTERN(void bu_avs_add_nonunique,
		    (struct bu_attribute_value_set *avsp,
		     char *attribute,
		     char *value));
/** @} */

/** @addtogroup bitv */
/** @{ */
/* bitv.c */
BU_EXPORT BU_EXTERN(struct bu_bitv *bu_bitv_new,
		    (unsigned int nbits));
BU_EXPORT BU_EXTERN(void bu_bitv_clear,
		    (struct bu_bitv *bv));
BU_EXPORT BU_EXTERN(void bu_bitv_or,
		    (struct bu_bitv *ov,
		     const struct bu_bitv *iv));
BU_EXPORT BU_EXTERN(void bu_bitv_and,
		    (struct bu_bitv *ov,
		     const struct bu_bitv *iv));
BU_EXPORT BU_EXTERN(void bu_bitv_vls,
		    (struct bu_vls *v,
		     const struct bu_bitv *bv));
BU_EXPORT BU_EXTERN(void bu_pr_bitv,
		    (const char *str,
		     const struct bu_bitv *bv));
BU_EXPORT BU_EXTERN(void bu_bitv_to_hex,
		    (struct bu_vls *v,
		     const struct bu_bitv *bv));
BU_EXPORT BU_EXTERN(struct bu_bitv *bu_hex_to_bitv,
		    (const char *str));
BU_EXPORT BU_EXTERN(struct bu_bitv *bu_bitv_dup,
		    (const struct bu_bitv *bv));
BU_EXPORT BU_EXTERN(void bu_bitv_free,
		    (struct bu_bitv *bv));

/** @} */
/** @addtogroup bu_log */
/** @{ */

/* backtrace.c */
BU_EXPORT BU_EXTERN(int bu_backtrace, (FILE *fp));

/* bomb.c */
BU_EXPORT BU_EXTERN(void bu_bomb, (const char *str)) __BU_ATTR_NORETURN;
BU_EXPORT BU_EXTERN(void bu_exit, (int status, const char *fmt, ...)) __BU_ATTR_NORETURN __BU_ATTR_FORMAT23;

/* crashreport.c */
BU_EXPORT BU_EXTERN(int bu_crashreport, (const char *filename));

/* fgets.c */
BU_EXPORT BU_EXTERN(char *bu_fgets, ( char *s, int size, FILE *stream));

/** @} */
/** @addtogroup color */
/** @{ */

/* color.c */
BU_EXPORT BU_EXTERN(void bu_rgb_to_hsv,
		    (unsigned char *rgb,
		     fastf_t *hsv));
BU_EXPORT BU_EXTERN(int bu_hsv_to_rgb,
		    (fastf_t *hsv,
		     unsigned char *rgb));
BU_EXPORT BU_EXTERN(int bu_str_to_rgb,
		    (char *str,
		     unsigned char *rgb));
BU_EXPORT BU_EXTERN(void bu_color_of_rgb_chars,
		    (struct bu_color *cp,
		     unsigned char *rgb));
BU_EXPORT BU_EXTERN(int bu_color_to_rgb_chars,
		    (struct bu_color *cp,
		     unsigned char *rgb));
BU_EXPORT BU_EXTERN(int bu_color_of_rgb_floats,
		    (struct bu_color *cp,
		     fastf_t *rgb));
BU_EXPORT BU_EXTERN(int bu_color_to_rgb_floats,
		    (struct bu_color *cp,
		     fastf_t *rgb));
BU_EXPORT BU_EXTERN(int bu_color_of_hsv_floats,
		    (struct bu_color *cp,
		     fastf_t *hsv));
BU_EXPORT BU_EXTERN(int bu_color_to_hsv_floats,
		    (struct bu_color *cp,
		     fastf_t *hsv));
/** @} */
/** @addtogroup bu_log */
/** @{ */

/* stat.c */
BU_EXPORT BU_EXTERN(int	bu_file_exists, (const char *path));
BU_EXPORT BU_EXTERN(int	bu_same_file, (const char *fn1, const char *fn2));
BU_EXPORT BU_EXTERN(int	bu_same_fd, (int fd1, int fd2));
BU_EXPORT BU_EXTERN(int	bu_file_readable, (const char *path));
BU_EXPORT BU_EXTERN(int	bu_file_writable, (const char *path));
BU_EXPORT BU_EXTERN(int	bu_file_executable, (const char *path));

/* fnmatch.c */
BU_EXPORT BU_EXTERN(int bu_fnmatch, (const char *, const char *, int));

/* dirent.c */
BU_EXPORT BU_EXTERN(int bu_count_path, (char *path, char *substr));
BU_EXPORT BU_EXTERN(void bu_list_path, (char *path, char *substr, char **filearray)); 


/* brlcad_path.c */
BU_EXPORT BU_EXTERN(const char *bu_argv0, (void));
BU_EXPORT BU_EXTERN(const char *bu_argv0_full_path, (void));
BU_EXPORT BU_EXTERN(const char *bu_getprogname, (void));
BU_EXPORT BU_EXTERN(void bu_setprogname, (const char *path));
BU_EXPORT BU_EXTERN(const char *bu_brlcad_root,
		    (const char *rhs, int fail_quietly));
BU_EXPORT BU_EXTERN(const char *bu_brlcad_data,
		    (const char *rhs, int fail_quietly));

/* bu_which.c */
BU_EXPORT BU_EXTERN(const char *bu_which, (const char *cmd));

/* bu_whereis.c */
BU_EXPORT BU_EXTERN(const char *bu_whereis, (const char *cmd));

/* fopen_uniq */
BU_EXPORT BU_EXTERN(FILE *bu_fopen_uniq,
		    (const char *outfmt,
		     const char *namefmt,
		     int n));

/* temp.c */
BU_EXPORT BU_EXTERN(FILE *bu_temp_file, (char *filepath, size_t len));

/** @} */
/** @addtogroup getopt */
/** @{ */

/* getopt.c */
BU_EXPORT extern int			bu_opterr;
BU_EXPORT extern int			bu_optind;
BU_EXPORT extern int			bu_optopt;
BU_EXPORT extern char *			bu_optarg;
BU_EXPORT BU_EXTERN(int	bu_getopt,
		    (int nargc, char * const nargv[],
		     const char *ostr));

/** @} */
/** @addtogroup bu_hist */
/** @{ */

/* hist.c */
BU_EXPORT BU_EXTERN(void bu_hist_free,
		    (struct bu_hist *histp));
BU_EXPORT BU_EXTERN(void bu_hist_init,
		    (struct bu_hist *histp,
		     fastf_t min,
		     fastf_t max,
		     unsigned int nbins));
BU_EXPORT BU_EXTERN(void bu_hist_range,
		    (struct bu_hist *hp,
		     fastf_t low,
		     fastf_t high));
BU_EXPORT BU_EXTERN(void bu_hist_pr,
		    (const struct bu_hist *histp,
		     const char *title));

/** @} */
/** @addtogroup hton */
/** @{ */

/* htond.c */
BU_EXPORT BU_EXTERN(void htond,
		    (unsigned char *out,
		     const unsigned char *in,
		     int count));
BU_EXPORT BU_EXTERN(void ntohd,
		    (unsigned char *out,
		     const unsigned char *in,
		     int count));

/* htonf.c */
BU_EXPORT BU_EXTERN(void htonf,
		    (unsigned char *out,
		     const unsigned char *in,
		     int count));
BU_EXPORT BU_EXTERN(void ntohf,
		    (unsigned char *out,
		     const unsigned char *in,
		     int count));

/** @} */
/** @addtogroup thread */
/** @{ */

/* ispar.c */
BU_EXPORT BU_EXTERN(int	bu_is_parallel,
		    ());
BU_EXPORT BU_EXTERN(void bu_kill_parallel,
		    ());

/** @} */
/** @addtogroup bu_log */
/** @{ */

/* linebuf.c */
BU_EXPORT BU_EXTERN(void bu_setlinebuf,
		    (FILE *fp));

/** @} */
/** @addtogroup bu_list */
/** @{ */

/* list.c */
BU_EXPORT BU_EXTERN(int bu_list_len,
		    (const struct bu_list *hd));
BU_EXPORT BU_EXTERN(void bu_list_reverse,
		    (struct bu_list *hd));
BU_EXPORT BU_EXTERN(void bu_list_free,
		    (struct bu_list *hd));
BU_EXPORT BU_EXTERN(void bu_list_parallel_append,
		    (struct bu_list *headp,
		     struct bu_list *itemp));
BU_EXPORT BU_EXTERN(struct bu_list *bu_list_parallel_dequeue,
		    (struct bu_list *headp));
BU_EXPORT BU_EXTERN(void bu_ck_list,
		    (const struct bu_list *hd,
		     const char *str));
BU_EXPORT BU_EXTERN(void bu_ck_list_magic,
		    (const struct bu_list *hd,
		     const char *str,
		     const unsigned long magic));

/** @} */
/** @addtogroup bu_log */
/** @{ */
/* hook.c */
BU_EXPORT BU_EXTERN(void bu_hook_list_init,
		    (struct bu_hook_list *hlp));
BU_EXPORT BU_EXTERN(void bu_add_hook,
		    (struct bu_hook_list *hlp,
		     bu_hook_t func,
		     genptr_t clientdata));
BU_EXPORT BU_EXTERN(void bu_delete_hook,
		    (struct bu_hook_list *hlp,
		     bu_hook_t func,
		     genptr_t clientdata));
BU_EXPORT BU_EXTERN(void bu_call_hook,
		    (struct bu_hook_list *hlp,
		     genptr_t buf));

/** @} */
/** @addtogroup bu_log */
/** @{ */
/* log.c */
BU_EXPORT BU_EXTERN(void bu_log_indent_delta,
		    (int delta));
BU_EXPORT BU_EXTERN(void bu_log_indent_vls,
		    (struct bu_vls *v));
BU_EXPORT BU_EXTERN(void bu_log_add_hook,
		    (bu_hook_t func,
		     genptr_t clientdata));
BU_EXPORT BU_EXTERN(void bu_log_delete_hook,
		    (bu_hook_t func,
		     genptr_t clientdata));
BU_EXPORT BU_EXTERN(void bu_putchar, (int c));
BU_EXPORT BU_EXTERN(void bu_log, (const char *, ... )) __BU_ATTR_FORMAT12;
BU_EXPORT BU_EXTERN(void bu_flog, (FILE *, const char *, ... )) __BU_ATTR_FORMAT23;

/** @} */

/** @addtogroup malloc */
/** @{ */

/* malloc.c */
BU_EXPORT extern long		bu_n_malloc;
BU_EXPORT extern long		bu_n_free;
BU_EXPORT extern long		bu_n_realloc;
BU_EXPORT BU_EXTERN(genptr_t bu_malloc,
		    (size_t siz,
		     const char *str));
BU_EXPORT BU_EXTERN(void bu_free,
		    (genptr_t ptr,
		     const char *str));
BU_EXPORT BU_EXTERN(genptr_t bu_realloc,
		    (genptr_t ptr,
		     size_t cnt,
		     const char *str));
BU_EXPORT BU_EXTERN(genptr_t bu_calloc,
		    (unsigned int nelem,
		     size_t elsize,
		     const char *str));
BU_EXPORT BU_EXTERN(void bu_prmem,
		    (const char *str));

/* don't rely on non-constness of bu_dirname().. will change to const */
BU_EXPORT BU_EXTERN(char *bu_dirname,
		    (const char *cp));
BU_EXPORT BU_EXTERN(const char *bu_basename,
		    (const char *cp));
BU_EXPORT BU_EXTERN(int bu_malloc_len_roundup,
		    (int nbytes));
BU_EXPORT BU_EXTERN(void bu_ck_malloc_ptr,
		    (genptr_t ptr, const char *str));
BU_EXPORT BU_EXTERN(int	bu_mem_barriercheck,
		    ());

/** @} */
/** @addtogroup mf */
/** @{ */

/* mappedfile.c */
BU_EXPORT BU_EXTERN(struct bu_mapped_file *bu_open_mapped_file,
		    (const char *name,
		     const char *appl));
BU_EXPORT BU_EXTERN(void bu_close_mapped_file,
		    (struct bu_mapped_file *mp));
BU_EXPORT BU_EXTERN(void bu_pr_mapped_file,
		    (const char *title,
		     const struct bu_mapped_file *mp));
BU_EXPORT BU_EXTERN(void bu_free_mapped_files,
		    (int verbose));
BU_EXPORT BU_EXTERN(struct bu_mapped_file *bu_open_mapped_file_with_path,
		    (char * const *path,
		     const char *name,
		     const char *appl));


/** @} */
/** @addtogroup thread */
/** @{ */

/* kill.c */
BU_EXPORT BU_EXTERN(int bu_terminate, (int process));

/* process.c */
BU_EXPORT BU_EXTERN(int bu_process_id, ());

/* parallel.c */
BU_EXPORT BU_EXTERN(void bu_nice_set, (int newnice));
BU_EXPORT BU_EXTERN(int bu_cpulimit_get, ());
BU_EXPORT BU_EXTERN(void bu_cpulimit_set, (int sec));
BU_EXPORT BU_EXTERN(int bu_avail_cpus, ());
BU_EXPORT BU_EXTERN(fastf_t bu_get_load_average, ());
BU_EXPORT BU_EXTERN(int bu_get_public_cpus, ());
BU_EXPORT BU_EXTERN(int bu_set_realtime, ());
BU_EXPORT BU_EXTERN(void bu_parallel,
		    (void (*func)BU_ARGS((int ncpu, genptr_t arg)),
		     int ncpu,
		     genptr_t arg));

/** @} */
/** @addtogroup parse */
/** @{ */

/* parse.c */
BU_EXPORT BU_EXTERN(int bu_struct_export,
		    (struct bu_external *ext,
		     const genptr_t base,
		     const struct bu_structparse *imp));
BU_EXPORT BU_EXTERN(int bu_struct_import,
		    (genptr_t base,
		     const struct bu_structparse *imp,
		     const struct bu_external *ext));
BU_EXPORT BU_EXTERN(int bu_struct_put,
		    (FILE *fp,
		     const struct bu_external *ext));
BU_EXPORT BU_EXTERN(int bu_struct_get,
		    (struct bu_external *ext,
		     FILE *fp));
BU_EXPORT BU_EXTERN(void bu_struct_wrap_buf,
		    (struct bu_external *ext,
		     genptr_t buf));
BU_EXPORT BU_EXTERN(int bu_struct_parse,
		    (const struct bu_vls *in_vls,
		     const struct bu_structparse *desc,
		     const char *base));
BU_EXPORT BU_EXTERN(void bu_struct_print,
		    (const char *title,
		     const struct bu_structparse *parsetab,
		     const char *base));
BU_EXPORT BU_EXTERN(void bu_vls_struct_print,
		    (struct bu_vls *vls,
		     const struct bu_structparse *sdp,
		     const char *base));
BU_EXPORT BU_EXTERN(void bu_vls_struct_print2,
		    (struct bu_vls *vls,
		     const char *title,
		     const struct bu_structparse *sdp,
		     const char *base));
BU_EXPORT BU_EXTERN(void bu_vls_struct_item,
		    (struct bu_vls *vp,
		     const struct bu_structparse *sdp,
		     const char *base,
		     int sep_char));
BU_EXPORT BU_EXTERN(int bu_vls_struct_item_named,
		    (struct bu_vls *vp,
		     const struct bu_structparse *sdp,
		     const char *name,
		     const char *base,
		     int sep_char));
BU_EXPORT BU_EXTERN(void bu_parse_mm,
		    (const struct bu_structparse *sdp,
		     const char *name,
		     char *base,
		     const char *value));
BU_EXPORT BU_EXTERN(int bu_key_eq_to_key_val,
		    (const char *in,
		     const char **next,
		     struct bu_vls *vls));
BU_EXPORT BU_EXTERN(int bu_shader_to_tcl_list,
		    (const char *in,
		     struct bu_vls *vls));
BU_EXPORT BU_EXTERN(int bu_key_val_to_key_eq,
		    (char *in));
BU_EXPORT BU_EXTERN(int bu_shader_to_key_eq,
		    (const char *in, struct bu_vls *vls));
BU_EXPORT BU_EXTERN(int bu_fwrite_external,
		    (FILE *fp,
		     const struct bu_external *ep));
BU_EXPORT BU_EXTERN(void bu_hexdump_external,
		    (FILE *fp, const struct bu_external *ep,
		     const char *str));
BU_EXPORT BU_EXTERN(void bu_free_external,
		    (struct bu_external *ep));
BU_EXPORT BU_EXTERN(void bu_copy_external,
		    (struct bu_external *op,
		     const struct bu_external *ip));
BU_EXPORT BU_EXTERN(char *bu_next_token,
		    (char *str));
BU_EXPORT BU_EXTERN(void bu_structparse_get_terse_form,
		    (struct bu_vls *log,
		     const struct bu_structparse *sp));
BU_EXPORT BU_EXTERN(int bu_structparse_argv,
		    (struct bu_vls *log,
		     int argc,
		     char **argv,
		     const struct bu_structparse *desc,
		     char *base));


/** @} */
/** @addtogroup bitv */
/** @{ */

/* printb.c */
BU_EXPORT BU_EXTERN(void bu_vls_printb,
		    (struct bu_vls *vls,
		     const char *s, unsigned long v,
		     const char *bits));
BU_EXPORT BU_EXTERN(void bu_printb,
		    (const char *s,
		     unsigned long v,
		     const char *bits));

/* ptbl.c */
BU_EXPORT BU_EXTERN(void bu_ptbl_init,
		    (struct bu_ptbl *b,
		     int len,
		     const char *str));
BU_EXPORT BU_EXTERN(void bu_ptbl_reset,
		    (struct bu_ptbl	*b));
BU_EXPORT BU_EXTERN(int bu_ptbl_ins,
		    (struct bu_ptbl *b,
		     long *p));
BU_EXPORT BU_EXTERN(int bu_ptbl_locate,
		    (const struct bu_ptbl *b,
		     const long *p));
BU_EXPORT BU_EXTERN(void bu_ptbl_zero,
		    (struct bu_ptbl *b,
		     const long *p));
BU_EXPORT BU_EXTERN(int bu_ptbl_ins_unique,
		    (struct bu_ptbl *b, long *p));
BU_EXPORT BU_EXTERN(int bu_ptbl_rm,
		    (struct bu_ptbl *b,
		     const long *p));
BU_EXPORT BU_EXTERN(void bu_ptbl_cat,
		    (struct bu_ptbl *dest,
		     const struct bu_ptbl *src));
BU_EXPORT BU_EXTERN(void bu_ptbl_cat_uniq,
		    (struct bu_ptbl *dest,
		     const struct bu_ptbl *src));
BU_EXPORT BU_EXTERN(void bu_ptbl_free,
		    (struct bu_ptbl	*b));
BU_EXPORT BU_EXTERN(int bu_ptbl,
		    (struct bu_ptbl *b,
		     int func, long *p));
BU_EXPORT BU_EXTERN(void bu_pr_ptbl,
		    (const char *title,
		     const struct bu_ptbl *tbl,
		     int verbose));
BU_EXPORT BU_EXTERN(void bu_ptbl_trunc,
		    (struct bu_ptbl *tbl,
		     int end));

/** @} */
/** @addtogroup rb */
/** @{ */

/* rb_create.c */
BU_EXPORT BU_EXTERN(bu_rb_tree *bu_rb_create,
		    (char		*description,
		     int 		nm_orders,
		     int		(**order_funcs)()));
BU_EXPORT BU_EXTERN(bu_rb_tree *bu_rb_create1,
		    (char		*description,
		     int		(*order_func)()));
/* rb_delete.c */
BU_EXPORT BU_EXTERN(void bu_rb_delete,
		    (bu_rb_tree	*tree,
		     int	order));
#define		bu_rb_delete1(t)	bu_rb_delete((t), 0)

/* rb_diag.c */
BU_EXPORT BU_EXTERN(void bu_rb_diagnose_tree,
		    (bu_rb_tree	*tree,
		     int	order,
		     int	trav_type));
BU_EXPORT BU_EXTERN(void bu_rb_summarize_tree,
		    (bu_rb_tree	*tree));
/* rb_extreme.c */
BU_EXPORT BU_EXTERN(void *bu_rb_curr,
		    (bu_rb_tree	*tree,
		     int		order));
#define		bu_rb_curr1(t)	bu_rb_curr((t), 0)
BU_EXPORT BU_EXTERN(void *bu_rb_extreme,
		    (bu_rb_tree	*tree,
		     int	order,
		     int	sense));
BU_EXPORT BU_EXTERN(void *bu_rb_neighbor,
		    (bu_rb_tree	*tree,
		     int	order,
		     int	sense));
/* rb_free.c */
BU_EXPORT BU_EXTERN(void bu_rb_free,
		    (bu_rb_tree	*tree,
		     void	(*free_data)()));
#define	BU_RB_RETAIN_DATA	((void (*)()) 0)
#define		bu_rb_free1(t, f)					\
		{							\
		    BU_CKMAG((t), BU_RB_TREE_MAGIC, "red-black tree");	\
		    bu_free((char *) ((t) -> rbt_order),		\
				"red-black order function");		\
		    bu_rb_free(t, f);					\
		}
/* rb_insert.c */
BU_EXPORT BU_EXTERN(int bu_rb_insert,
		    (bu_rb_tree	*tree,
		     void	*data));
BU_EXPORT BU_EXTERN(int bu_rb_is_uniq,
		    (bu_rb_tree	*tree,
		     int	order));
#define		bu_rb_is_uniq1(t)	bu_rb_is_uniq((t), 0)
BU_EXPORT BU_EXTERN(void bu_rb_set_uniqv,
		    (bu_rb_tree	*tree,
		     bitv_t	vec));
BU_EXPORT BU_EXTERN(void bu_rb_uniq_all_off,
		    (bu_rb_tree	*tree));
BU_EXPORT BU_EXTERN(void bu_rb_uniq_all_on,
		    (bu_rb_tree	*tree));
BU_EXPORT BU_EXTERN(int bu_rb_uniq_off,
		    (bu_rb_tree	*tree,
		     int	order));
#define		bu_rb_uniq_off1(t)	bu_rb_uniq_off((t), 0)
BU_EXPORT BU_EXTERN(int bu_rb_uniq_on,
		    (bu_rb_tree	*tree,
		     int	order));
#define		bu_rb_uniq_on1(t)	bu_rb_uniq_on((t), 0)

/* rb_order_stats.c */
BU_EXPORT BU_EXTERN(int bu_rb_rank,
		    (bu_rb_tree	*tree,
		     int	order));
#define		bu_rb_rank1(t)	bu_rb_rank1((t), 0)
BU_EXPORT BU_EXTERN(void *bu_rb_select,
		    (bu_rb_tree	*tree,
		     int	order,
		     int	k));
#define		bu_rb_select1(t, k)	bu_rb_select((t), 0, (k))

/* rb_search.c */
BU_EXPORT BU_EXTERN(void *bu_rb_search,
		    (bu_rb_tree	*tree,
		     int	order,
		     void	*data));
#define		bu_rb_search1(t, d)	bu_rb_search((t), 0, (d))

/* rb_walk.c */
BU_EXPORT BU_EXTERN(void bu_rb_walk,
		    (bu_rb_tree	*tree,
		     int	order,
		     void	(*visit)(),
		     int	trav_type));
#define		bu_rb_walk1(t, v, d)	bu_rb_walk((t), 0, (v), (d))

/** @} */
/** @addtogroup thread */
/** @{ */

/* semaphore.c */
BU_EXPORT BU_EXTERN(void bu_semaphore_init,
		    (unsigned int nsemaphores));
BU_EXPORT BU_EXTERN(void bu_semaphore_reinit,
		    (unsigned int nsemaphores));
BU_EXPORT BU_EXTERN(void bu_semaphore_acquire,
		    (unsigned int i));
BU_EXPORT BU_EXTERN(void bu_semaphore_release,
		    (unsigned int i));

/** @} */
/** @addtogroup vls */
/** @{ */

/* vls.c */
BU_EXPORT BU_EXTERN(void bu_vls_init,
		    (struct bu_vls *vp));
BU_EXPORT BU_EXTERN(void bu_vls_init_if_uninit,
		    (struct bu_vls *vp));
BU_EXPORT BU_EXTERN(struct bu_vls *bu_vls_vlsinit,
		    ());
BU_EXPORT BU_EXTERN(char *bu_vls_addr,
		    (const struct bu_vls *vp));
BU_EXPORT BU_EXTERN(char *bu_vls_strdup,
		    (const struct bu_vls *vp));
BU_EXPORT BU_EXTERN(char *bu_vls_strgrab,
		    (struct bu_vls *vp));
BU_EXPORT BU_EXTERN(void bu_vls_extend,
		    (struct bu_vls *vp,
		     unsigned int extra));
BU_EXPORT BU_EXTERN(void bu_vls_setlen,
		    (struct bu_vls *vp,
		     int newlen));
BU_EXPORT BU_EXTERN(int bu_vls_strlen,
		    (const struct bu_vls *vp));
BU_EXPORT BU_EXTERN(void bu_vls_trunc,
		    (struct bu_vls *vp,
		     int len));
BU_EXPORT BU_EXTERN(void bu_vls_trunc2,
		    (struct bu_vls *vp,
		     int len));
BU_EXPORT BU_EXTERN(void bu_vls_nibble,
		    (struct bu_vls *vp,
		     int len));
BU_EXPORT BU_EXTERN(void bu_vls_free,
		    (struct bu_vls *vp));
BU_EXPORT BU_EXTERN(void bu_vls_vlsfree,
		    (struct bu_vls *vp));
BU_EXPORT BU_EXTERN(void bu_vls_strcpy,
		    (struct bu_vls *vp,
		     const char *s));
BU_EXPORT BU_EXTERN(void bu_vls_strncpy,
		    (struct bu_vls *vp,
		     const char *s,
		     size_t n));
BU_EXPORT BU_EXTERN(void bu_vls_strcat,
		    (struct bu_vls *vp,
		     const char *s));
BU_EXPORT BU_EXTERN(void bu_vls_strncat,
		    (struct bu_vls *vp,
		     const char *s,
		     size_t n));
BU_EXPORT BU_EXTERN(void bu_vls_vlscat,
		    (struct bu_vls *dest,
		     const struct bu_vls *src));
BU_EXPORT BU_EXTERN(void bu_vls_vlscatzap,
		    (struct bu_vls *dest,
		     struct bu_vls *src));
BU_EXPORT BU_EXTERN(int bu_vls_strcmp,
		    (struct bu_vls *s1,
		     struct bu_vls *s2));
BU_EXPORT BU_EXTERN(int bu_vls_strncmp,
		    (struct bu_vls *s1,
		     struct bu_vls *s2,
		     size_t n));
BU_EXPORT BU_EXTERN(void bu_vls_from_argv,
		    (struct bu_vls *vp,
		     int argc,
		     const char *argv[]));
BU_EXPORT BU_EXTERN(int bu_argv_from_string,
		    (char *argv[],
		     int lim,
		     char *lp));
BU_EXPORT BU_EXTERN(void bu_vls_fwrite,
		    (FILE *fp,
		     const struct bu_vls *vp));
BU_EXPORT BU_EXTERN(void bu_vls_write,
		    (int fd,
		     const struct bu_vls *vp));
BU_EXPORT BU_EXTERN(int bu_vls_read,
		    (struct bu_vls *vp,
		     int fd));
BU_EXPORT BU_EXTERN(int bu_vls_gets,
		    (struct bu_vls *vp,
		     FILE *fp));
BU_EXPORT BU_EXTERN(void bu_vls_putc,
		    (struct bu_vls *vp,
		     int c));
BU_EXPORT BU_EXTERN(void bu_vls_trimspace,
		    (struct bu_vls *vp));

BU_EXPORT BU_EXTERN(void bu_vls_vprintf,
		    (struct bu_vls *vls,
		     const char *fmt,
		     va_list ap));

BU_EXPORT BU_EXTERN(void bu_vls_printf,
		    (struct bu_vls *vls,
		     const char *fmt, ...)) __BU_ATTR_FORMAT23;
BU_EXPORT BU_EXTERN(void bu_vls_sprintf,
		    (struct bu_vls *vls,
		     const char *fmt, ...)) __BU_ATTR_FORMAT23;

BU_EXPORT BU_EXTERN(void bu_vls_spaces,
		    (struct bu_vls *vp,
		     int cnt));
BU_EXPORT BU_EXTERN(int bu_vls_print_positions_used,
		    (const struct bu_vls *vp));
BU_EXPORT BU_EXTERN(void bu_vls_detab,
		    (struct bu_vls *vp));
BU_EXPORT BU_EXTERN(void bu_vls_prepend,
		    (struct bu_vls *vp,
		     char *str));

/** @} */
/** @addtogroup vlb */
/** @{ */

/* vlb.c */
BU_EXPORT BU_EXTERN(void bu_vlb_init,
        (struct bu_vlb *vlb));

BU_EXPORT BU_EXTERN(void bu_vlb_initialize,
        (struct bu_vlb *vlb,
        int initialSize));
BU_EXPORT BU_EXTERN(void bu_vlb_write,
        (struct bu_vlb *vlb,
        unsigned char *start,
        int len));
BU_EXPORT BU_EXTERN(void bu_vlb_reset,
        (struct bu_vlb *vlb));
BU_EXPORT BU_EXTERN(unsigned char *bu_vlb_getBuffer,
        (struct bu_vlb *vlb));
BU_EXPORT BU_EXTERN(int bu_vlb_getBufferLength,
        (struct bu_vlb *vlb));
BU_EXPORT BU_EXTERN(void bu_vlb_free,
        (struct bu_vlb *vlb));
BU_EXPORT BU_EXTERN(void bu_vlb_print,
        (struct bu_vlb *vlb,
        FILE *fd));

/* str.c */
BU_EXPORT BU_EXTERN(size_t bu_strlcatm, (char *dst, const char *src, size_t size, const char *label));
#define bu_strlcat(dst, src, size) bu_strlcatm(dst, src, size, BU_FLSTR)

BU_EXPORT BU_EXTERN(size_t bu_strlcpym, (char *dst, const char *src, size_t size, const char *label));
#define bu_strlcpy(dst, src, size) bu_strlcpym(dst, src, size, BU_FLSTR)

BU_EXPORT BU_EXTERN(char *bu_strdupm, (const char *cp, const char *label));
#define bu_strdup(s) bu_strdupm(s, BU_FLSTR)


/** @} */

/** @addtogroup bu_log */
/** @{ */
/* units.c */
BU_EXPORT BU_EXTERN(double bu_units_conversion,
		    (const char *str));
BU_EXPORT BU_EXTERN(const char *bu_units_string,
		    (const double mm));
BU_EXPORT BU_EXTERN(const char *bu_nearest_units_string,
		    (const double mm));
BU_EXPORT BU_EXTERN(double bu_mm_value,
		    (const char *s));
BU_EXPORT BU_EXTERN(void bu_mm_cvt,
		    (const struct bu_structparse *sdp,
		     const char *name,
		     char *base,
		     const char *value));

/** @} */

/** @addtogroup hton */
/** @{ */

/* xdr.c */
/* Macro version of library routine bu_glong() */
/* The argument is expected to be of type "unsigned char" */
#define BU_GLONGLONG(_cp)	\
	    ((((long)((_cp)[0])) << 56) |	\
	     (((long)((_cp)[1])) << 48) |	\
	     (((long)((_cp)[2])) << 40) |	\
	     (((long)((_cp)[3])) << 32) |	\
	     (((long)((_cp)[4])) << 24) |	\
	     (((long)((_cp)[5])) << 16) |	\
	     (((long)((_cp)[6])) <<  8) |	\
	      ((long)((_cp)[7])) )
#define BU_GLONG(_cp)	\
	    ((((long)((_cp)[0])) << 24) |	\
	     (((long)((_cp)[1])) << 16) |	\
	     (((long)((_cp)[2])) <<  8) |	\
	      ((long)((_cp)[3])) )
#define BU_GSHORT(_cp)	\
	    ((((short)((_cp)[0])) << 8) | \
		       (_cp)[1] )

BU_EXPORT BU_EXTERN(unsigned short bu_gshort,
		    (const unsigned char *msgp));
BU_EXPORT BU_EXTERN(unsigned long bu_glong,
		    (const unsigned char *msgp));
BU_EXPORT BU_EXTERN(unsigned char *bu_pshort,
		    (unsigned char *msgp,
		     int s));
BU_EXPORT BU_EXTERN(unsigned char *bu_plong,
		    (unsigned char *msgp,
		     unsigned long l));

/** @} */

/** @addtogroup bu_log */
/** @{ */

/* association.c */
BU_EXPORT BU_EXTERN(struct bu_vls *bu_association,
		    (const char *fname,
		     const char *value,
		     int field_sep));

/** @} */

/** @addtogroup butcl */
/** @{ */

/* Things that live in libbu/observer.c */
BU_EXPORT BU_EXTERN(int bu_observer_cmd, (ClientData clientData, Tcl_Interp *interp, int argc, const char *argv[]));
BU_EXPORT BU_EXTERN(void bu_observer_notify,());
BU_EXPORT BU_EXTERN(void bu_observer_free, (struct bu_observer *));


BU_EXPORT BU_EXTERN(void bu_tcl_structparse_get_terse_form,
		    (Tcl_Interp	*interp,
		     const struct bu_structparse *sp));

BU_EXPORT BU_EXTERN(int bu_tcl_structparse_argv,
		    (Tcl_Interp				*interp,
		     int				argc,
		     char				**argv,
		     const struct bu_structparse	*desc,
		     char				*base));

BU_EXPORT BU_EXTERN(int bu_tcl_mem_barriercheck,
		    (ClientData	clientData,
		     Tcl_Interp	*interp,
		     int	argc,
		     const char	**argv));

BU_EXPORT BU_EXTERN(int bu_tcl_ck_malloc_ptr,
		    (ClientData		clientData,
		     Tcl_Interp		*interp,
		     int		argc,
		     const char		**argv));

BU_EXPORT BU_EXTERN(int bu_tcl_malloc_len_roundup,
		    (ClientData	clientData,
		     Tcl_Interp	*interp,
		     int	argc,
		     const char	**argv));

BU_EXPORT BU_EXTERN(int bu_tcl_prmem,
		    (ClientData	clientData,
		     Tcl_Interp	*interp,
		     int	argc,
		     const char	**argv));

BU_EXPORT BU_EXTERN(int bu_tcl_printb,
		    (ClientData	clientData,
		     Tcl_Interp	*interp,
		     int	argc,
		     const char	**argv));

BU_EXPORT BU_EXTERN(int bu_tcl_get_value_by_keyword,
		    (ClientData	clientData,
		     Tcl_Interp	*interp,
		     int	argc,
		     const char	**argv));

BU_EXPORT BU_EXTERN(int bu_tcl_get_all_keyword_values,
		    (ClientData	clientData,
		     Tcl_Interp	*interp,
		     int	argc,
		     const char	**argv));

BU_EXPORT BU_EXTERN(int bu_tcl_rgb_to_hsv,
		    (ClientData	clientData,
		     Tcl_Interp	*interp,
		     int	argc,
		     const char	**argv));

BU_EXPORT BU_EXTERN(int bu_tcl_hsv_to_rgb,
		    (ClientData	clientData,
		     Tcl_Interp	*interp,
		     int	argc,
		     const char	**argv));

BU_EXPORT BU_EXTERN(int bu_tcl_key_eq_to_key_val,
		    (ClientData	clientData,
		     Tcl_Interp	*interp,
		     int	argc,
		     const char	**argv));

BU_EXPORT BU_EXTERN(int bu_tcl_shader_to_key_val,
		    (ClientData	clientData,
		     Tcl_Interp	*interp,
		     int	argc,
		     const char	**argv));

BU_EXPORT BU_EXTERN(int bu_tcl_key_val_to_key_eq,
		    (ClientData	clientData,
		     Tcl_Interp	*interp,
		     int	argc,
		     const char	**argv));

BU_EXPORT BU_EXTERN(int bu_tcl_shader_to_key_eq,
		    (ClientData	clientData,
		     Tcl_Interp	*interp,
		     int	argc,
		     const char	**argv));

BU_EXPORT BU_EXTERN(int bu_tcl_brlcad_root,
		    (ClientData	clientData,
		     Tcl_Interp	*interp,
		     int	 argc,
		     const char	**argv));

BU_EXPORT BU_EXTERN(int bu_tcl_brlcad_data,
		    (ClientData	clientData,
		     Tcl_Interp	*interp,
		     int	 argc,
		     const char	**argv));

BU_EXPORT BU_EXTERN(int bu_tcl_units_conversion,
		    (ClientData	clientData,
		     Tcl_Interp	*interp,
		     int	argc,
		     const char	**argv));

BU_EXPORT BU_EXTERN(void bu_tcl_setup,
		    (Tcl_Interp *interp));

BU_EXPORT BU_EXTERN(int Bu_Init,
		    (Tcl_Interp *interp));


/** @} */
/** @addtogroup bu_log */
/** @{ */

/* lex.c */
#define BU_LEX_ANY	0	/* pseudo type */
struct bu_lex_t_int {
    int type;
    int value;
};
#define BU_LEX_INT	1
struct bu_lex_t_dbl {
    int	type;
    double	value;
};
#define BU_LEX_DOUBLE	2
struct bu_lex_t_key {
    int	type;
    int	value;
};
#define BU_LEX_SYMBOL	3
#define BU_LEX_KEYWORD	4
struct bu_lex_t_id {
    int	type;
    char 	*value;
};
#define BU_LEX_IDENT	5
#define BU_LEX_NUMBER	6	/* Pseudo type */
union bu_lex_token {
    int			type;
    struct	bu_lex_t_int	t_int;
    struct	bu_lex_t_dbl	t_dbl;
    struct	bu_lex_t_key	t_key;
    struct	bu_lex_t_id	t_id;
};
struct bu_lex_key {
    int	tok_val;
    char	*string;
};
#define BU_LEX_NEED_MORE	0

BU_EXPORT BU_EXTERN(int bu_lex,
		    (union bu_lex_token *token,
		     struct bu_vls *rtstr,
		     struct bu_lex_key *keywords,
		     struct bu_lex_key *symbols));


/* mread.c */
BU_EXPORT BU_EXTERN(long int bu_mread,
		    (int fd, void *bufp, long int n));

/* mro.c */
BU_EXPORT BU_EXTERN(void bu_mro_init_with_string,
		    (struct bu_mro *mrop, const char *string));
BU_EXPORT BU_EXTERN(void bu_mro_set,
		    (struct bu_mro *mrop,
		     const char *string));
BU_EXPORT BU_EXTERN(void bu_mro_init,
		    (struct bu_mro *mrop));
BU_EXPORT BU_EXTERN(void bu_mro_free,
		    (struct bu_mro *mrop));


/** @} */
/** @addtogroup bu_hash */
/** @{ */


/* hash.c */
struct bu_hash_entry {
    unsigned long magic;
    unsigned char *key;
    unsigned char *value;
    int key_len;
    struct bu_hash_entry *next;
};

struct bu_hash_tbl {
    unsigned long magic;
    unsigned long mask;
    unsigned long num_lists;
    unsigned long num_entries;
    struct bu_hash_entry **lists;
};

struct bu_hash_record {
    unsigned long magic;
    struct bu_hash_tbl *tbl;
    unsigned long index;
    struct bu_hash_entry *hsh_entry;
};

#define BU_CK_HASH_TBL(_hp)	BU_CKMAG( _hp, BU_HASH_TBL_MAGIC, "bu_hash_tbl" )
#define BU_CK_HASH_RECORD(_rp)	BU_CKMAG( _rp, BU_HASH_RECORD_MAGIC, "bu_hash_record" )
#define BU_CK_HASH_ENTRY(_ep)	BU_CKMAG( _ep, BU_HASH_ENTRY_MAGIC, "bu_hash_entry" )

BU_EXPORT BU_EXTERN(unsigned long bu_hash,
		    (unsigned char *str,
		     int len));
BU_EXPORT BU_EXTERN(struct bu_hash_tbl *bu_create_hash_tbl,
		    (unsigned long tbl_size));
BU_EXPORT BU_EXTERN(struct bu_hash_entry *bu_find_hash_entry,
		    (struct bu_hash_tbl *hsh_tbl,
		     unsigned char *key,
		     int key_len,
		     struct bu_hash_entry **prev,
		     unsigned long *index2));
BU_EXPORT BU_EXTERN(void bu_set_hash_value,
		    (struct bu_hash_entry *hsh_entry,
		     unsigned char *value));
BU_EXPORT BU_EXTERN(unsigned char *bu_get_hash_value,
		    (struct bu_hash_entry *hsh_entry));
BU_EXPORT BU_EXTERN(unsigned char *bu_get_hash_key,
		    (struct bu_hash_entry *hsh_entry));
BU_EXPORT BU_EXTERN(struct bu_hash_entry *bu_hash_add_entry,
		    (struct bu_hash_tbl *hsh_tbl,
		     unsigned char *key,
		     int key_len,
		     int *new_entry));
BU_EXPORT BU_EXTERN(void bu_hash_tbl_pr,
		    (struct bu_hash_tbl *hsh_tbl,
		     char *str));
BU_EXPORT BU_EXTERN(void bu_hash_tbl_free,
		    (struct bu_hash_tbl *hsh_tbl));
BU_EXPORT BU_EXTERN(struct bu_hash_entry *bu_hash_tbl_first,
		    (struct bu_hash_tbl *hsh_tbl,
		     struct bu_hash_record *rec));
BU_EXPORT BU_EXTERN(struct bu_hash_entry *bu_hash_tbl_next,
		    (struct bu_hash_record *rec));


/* image utilities */

enum {
    BU_IMAGE_AUTO,
    BU_IMAGE_PIX,
    BU_IMAGE_BW,
    BU_IMAGE_ALIAS,
    BU_IMAGE_BMP,
    BU_IMAGE_CI,
    BU_IMAGE_ORLE,
    BU_IMAGE_PNG,
    BU_IMAGE_PPM,
    BU_IMAGE_PS,
    BU_IMAGE_RLE,
    BU_IMAGE_SPM,
    BU_IMAGE_SUN,
    BU_IMAGE_YUV
};


struct bu_image_file {
    unsigned long magic;
    char *filename;
    int fd;
    int format;			/* BU_IMAGE_* */
    int width, height, depth;	/* pixel, pixel, byte */
    unsigned char *data;
    unsigned long flags;
};

BU_EXPORT BU_EXTERN(struct bu_image_file *bu_image_save_open,
		    (char *filename,
		     int format,
		     int width,
		     int height,
		     int depth));

BU_EXPORT BU_EXTERN(int bu_image_save_writeline,
		    (struct bu_image_file *bif,
		     int y,
		     unsigned char *data));

BU_EXPORT BU_EXTERN(int bu_image_save_close,
		    (struct bu_image_file *bif));

BU_EXPORT BU_EXTERN(int bu_image_save,
		    (unsigned char *data,
		     int width,
		     int height,
		     int depth,
		     char *filename,
		     int filetype));

/* end image utilities */

/* fchmod.c */
BU_EXPORT BU_EXTERN(int bu_fchmod,
		    (FILE *fp, unsigned long pmode));

/* argv.c */

/**
 * Deallocate all strings in a given argv array and the array itself
 *
 * This call presumes the array has been allocated with bu_dup_argv()
 * or bu_argv_from_path().
 */
BU_EXPORT BU_EXTERN(void bu_free_argv,
		    (int argc, char *argv[]));

/**
 * Dynamically duplicate an argv array and all elements in the array
 *
 * Duplicate an argv array by duplicating all strings and the array
 * itself.  It is the caller's responsibility to free the array
 * returned including all elements in the array by calling bu_free()
 * or bu_free_argv().
 */
BU_EXPORT BU_EXTERN(char **bu_dup_argv,
		    (int argc, const char *argv[]));

/**
 * Combine two argv arrays into one new (duplicated) argv array.
 *
 * If insert is negative, the insertArgv array elements will be
 * prepended into the new argv array.  If insert is greater than or
 * equal to argc, the insertArgv array elements will be appended after
 * all duplicated elementes in the specified argv array.  Otherwise,
 * the insert argument is the position where the insertArgv array
 * elements will be merged with the specified argv array.
 */
BU_EXPORT BU_EXTERN(char **bu_dupinsert_argv,
		    (int insert, int insertArgc, const char *insertArgv[], int argc, const char *argv[]));

/**
 * Generate an argv array from a path
 *
 * Given a path string, separate the path elements into a dynamically
 * allocated argv array with the path separators removed.  It is the
 * caller's responsibility to free the array that is returned as well
 * as all elements in the array using bu_free_argv() or manually
 * calling bu_free().
 */
BU_EXPORT BU_EXTERN(char **bu_argv_from_path,
		    (const char *path, int *ac));


__END_DECLS

#endif  /* __BU_H__ */
/** @} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * indent-tabs-mode: t
 * c-file-style: "stroustrup"
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
blob
data 68091
/*                           G E D . H
 * BRL-CAD
 *
 * Copyright (c) 2008 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @file ged.h
 *
 * Functions provided by the LIBGED geometry editing library.  These
 * routines are a procedural basis for the geometric editing
 * capabilities available in BRL-CAD.  The library is tightly coupled
 * to the LIBRT library for geometric representation and analysis.
 *
 */

#ifndef __GED_H__
#define __GED_H__

#if defined(_WIN32) && !defined(__CYGWIN__)
#  define NOMINMAX
#  include <windows.h>
#  include <io.h>
#endif

#include "raytrace.h"


__BEGIN_DECLS

#ifndef GED_EXPORT
#  if defined(_WIN32) && !defined(__CYGWIN__) && defined(BRLCAD_DLL)
#    ifdef GED_EXPORT_DLL
#      define GED_EXPORT __declspec(dllexport)
#    else
#      define GED_EXPORT __declspec(dllimport)
#    endif
#  else
#    define GED_EXPORT
#  endif
#endif

#define GED_VMIN -2048.0
#define GED_VMAX 2047.0
#define GED_VRANGE 4095.0
#define INV_GED_V 0.00048828125
#define INV_4096_V 0.000244140625

#define GED_NULL (struct ged *)0
#define GED_DRAWABLE_NULL (struct ged_drawable *)0
#define GED_VIEW_NULL (struct ged_view *)0

#define GED_VIEW_OBJ_NULL ((struct view_obj *)0)
#define GED_RESULT_NULL ((void *)0)

#define GED_FUNC_PTR_NULL (ged_func_ptr)0
#define GED_REFRESH_CALLBACK_PTR_NULL (ged_refresh_callback_ptr)0

#define GED_IDLE_MODE 0
#define GED_ROTATE_MODE 1
#define GED_TRANSLATE_MODE 2
#define GED_SCALE_MODE 3
#define GED_CONSTRAINED_ROTATE_MODE 4
#define GED_CONSTRAINED_TRANSLATE_MODE 5

/**
 * S E M A P H O R E S
 *
 * Definition of global parallel-processing semaphores.
 *
 */
#define GED_SEM_WORKER RT_SEM_LAST
#define GED_SEM_STATS GED_SEM_WORKER+1
#define GED_SEM_LIST GED_SEM_STATS+1
#define GED_SEM_LAST GED_SEM_LIST+1

#define GED_INIT(_gedp, _wdbp) { \
    ged_init((_gedp)); \
    (_gedp)->ged_wdbp = (_wdbp); \
}

/** Check if the object is a combination */
#define	GED_CHECK_COMB(_gedp, _dp, _ret) \
    if (((_dp)->d_flags & DIR_COMB) == 0) { \
	bu_vls_printf(&(_gedp)->ged_result_str, "%s: not a combination", (_dp)->d_namep); \
	return (_ret); \
    }

/** Check if a database is open */
#define GED_CHECK_DATABASE_OPEN(_gedp, _ret) \
    if ((_gedp) == GED_NULL || (_gedp)->ged_wdbp == RT_WDB_NULL || (_gedp)->ged_wdbp->dbip == DBI_NULL) { \
	if ((_gedp) != GED_NULL) { \
	    bu_vls_trunc(&(_gedp)->ged_result_str, 0); \
	    bu_vls_printf(&(_gedp)->ged_result_str, "A database is not open!"); \
	} else								\
	    bu_log("A database is not open!"); \
	return (_ret); \
    }

/** Check if a drawable exists */
#define GED_CHECK_DRAWABLE(_gedp, _ret) \
    if (_gedp->ged_gdp == GED_DRAWABLE_NULL) { \
	bu_vls_trunc(&(_gedp)->ged_result_str, 0); \
	bu_vls_printf(&(_gedp)->ged_result_str, "A drawable does not exist!"); \
	return (_ret); \
    }

/** Check if a view exists */
#define GED_CHECK_VIEW(_gedp, _ret) \
    if (_gedp->ged_gvp == GED_VIEW_NULL) { \
	bu_vls_trunc(&(_gedp)->ged_result_str, 0); \
	bu_vls_printf(&(_gedp)->ged_result_str, "A view does not exist!"); \
	return (_ret); \
    }

/** Lookup database object */
#define GED_CHECK_EXISTS(_gedp, _name, _noisy, _ret) \
    if (db_lookup((_gedp)->ged_wdbp->dbip, (_name), (_noisy)) != DIR_NULL) { \
	bu_vls_printf(&(_gedp)->ged_result_str, "%s already exists", (_name)); \
	return (_ret); \
    }

/** Check if the database is read only */
#define	GED_CHECK_READ_ONLY(_gedp, _ret) \
    if ((_gedp)->ged_wdbp->dbip->dbi_read_only) { \
	bu_vls_trunc(&(_gedp)->ged_result_str, 0); \
	bu_vls_printf(&(_gedp)->ged_result_str, "Sorry, this database is READ-ONLY"); \
	return (_ret); \
    }

/** Check if the object is a region */
#define	GED_CHECK_REGION(_gedp, _dp, _ret) \
    if (((_dp)->d_flags & DIR_REGION) == 0) { \
	bu_vls_printf(&(_gedp)->ged_result_str, "%s: not a region", (_dp)->d_namep); \
	return (_ret); \
    }

/** make sure there is a command name given */
#define GED_CHECK_ARGC_GT_0(_gedp, _argc, _ret) \
    if ((_argc) < 1) { \
	bu_vls_trunc(&(_gedp)->ged_result_str, 0); \
	bu_vls_printf(&(_gedp)->ged_result_str, "ERROR: command name not provided (%s:%d)", __FILE__, __LINE__); \
	return (_ret); \
    }

/** add a new directory entry to the currently open database */
#define GED_DB_DIRADD(_gedp, _dp, _name, _laddr, _len, _flags, _ptr, _ret) \
    if (((_dp) = db_diradd((_gedp)->ged_wdbp->dbip, (_name), (_laddr), (_len), (_flags), (_ptr))) == DIR_NULL) { \
	bu_vls_printf(&(_gedp)->ged_result_str, "An error has occured while adding a new object to the database."); \
	return (_ret); \
    }

/** Lookup database object */
#define GED_DB_LOOKUP(_gedp, _dp, _name, _noisy, _ret) \
    if (((_dp) = db_lookup((_gedp)->ged_wdbp->dbip, (_name), (_noisy))) == DIR_NULL) { \
	bu_vls_printf(&(_gedp)->ged_result_str, "%s: not found", (_name)); \
	return (_ret); \
    }

/** Get internal representation */
#define GED_DB_GET_INTERNAL(_gedp, _intern, _dp, _mat, _resource, _ret) \
    if (rt_db_get_internal((_intern), (_dp), (_gedp)->ged_wdbp->dbip, (_mat), (_resource)) < 0) { \
	bu_vls_printf(&(_gedp)->ged_result_str, "Database read error, aborting"); \
	return (_ret); \
    }

/** Put internal representation */
#define GED_DB_PUT_INTERNAL(_gedp, _dp, _intern, _resource, _ret) \
    if (rt_db_put_internal((_dp), (_gedp)->ged_wdbp->dbip, (_intern), (_resource)) < 0) { \
	bu_vls_printf(&(_gedp)->ged_result_str, "Database write error, aborting"); \
	return (_ret); \
    }

struct ged_adc_state {
    int		gas_draw;
    int		gas_dv_x;
    int		gas_dv_y;
    int		gas_dv_a1;
    int		gas_dv_a2;
    int		gas_dv_dist;
    fastf_t	gas_pos_model[3];
    fastf_t	gas_pos_view[3];
    fastf_t	gas_pos_grid[3];
    fastf_t	gas_a1;
    fastf_t	gas_a2;
    fastf_t	gas_dst;
    int		gas_anchor_pos;
    int		gas_anchor_a1;
    int		gas_anchor_a2;
    int		gas_anchor_dst;
    fastf_t	gas_anchor_pt_a1[3];
    fastf_t	gas_anchor_pt_a2[3];
    fastf_t	gas_anchor_pt_dst[3];
    int		gas_line_color[3];
    int		gas_tick_color[3];
    int		gas_linewidth;
};

struct ged_grid_state {
    int		ggs_draw;		/* draw grid */
    int		ggs_snap;		/* snap to grid */
    fastf_t	ggs_anchor[3];
    fastf_t	ggs_res_h;		/* grid resolution in h */
    fastf_t	ggs_res_v;		/* grid resolution in v */
    int		ggs_res_major_h;	/* major grid resolution in h */
    int		ggs_res_major_v;	/* major grid resolution in v */
    int		ggs_color[3];
};

struct ged_rect_state {
    int		grs_active;	/* 1 - actively drawing a rectangle */
    int		grs_draw;	/* draw rubber band rectangle */
    int		grs_linewidth;
    int		grs_linestyle;  /* 0 - solid, 1 - dashed */
    int		grs_pos[2];	/* Position in image coordinates */
    int		grs_dim[2];	/* Rectangle dimension in image coordinates */
    fastf_t	grs_x;		/* Corner of rectangle in normalized     */
    fastf_t	grs_y;		/* ------ view coordinates (i.e. +-1.0). */
    fastf_t	grs_width;	/* Width and height of rectangle in      */
    fastf_t	grs_height;	/* ------ normalized view coordinates.   */
    int		grs_bg[3];	/* Background color */
    int		grs_color[3];	/* Rectangle color */
    int		grs_cdim[2];	/* Canvas dimension in pixels */
    fastf_t	grs_aspect;	/* Canvas aspect ratio */
};

struct ged_run_rt {
    struct bu_list l;
#if defined(_WIN32) && !defined(__CYGWIN__)
    HANDLE fd;
    HANDLE hProcess;
    DWORD pid;

#  ifdef TCL_OK
    Tcl_Channel chan;
#  else
    genptr_t chan;
#  endif
#else
    int fd;
    int pid;
#endif
    int aborted;
};

struct ged_qray_color {
    unsigned char r;
    unsigned char g;
    unsigned char b;
};

struct ged_qray_fmt {
    char type;
    struct bu_vls fmt;
};

struct ged_drawable {
    struct bu_list		l;
    struct bu_list		gd_headSolid;		/**< @brief  head of solid list */
    struct bu_list		gd_headVDraw;		/**< @brief  head of vdraw list */
    struct vd_curve		*gd_currVHead;		/**< @brief  current vdraw head */
    struct solid		*gd_freeSolids;		/**< @brief  ptr to head of free solid list */

    char			*gd_rt_cmd[RT_MAXARGS];
    int				gd_rt_cmd_len;
    struct ged_run_rt		gd_headRunRt;		/**< @brief  head of forked rt processes */

    void			(*gd_rtCmdNotify)();	/**< @brief  function called when rt command completes */

    int				gd_uplotOutputMode;	/**< @brief  output mode for unix plots */

    /* qray state */
    struct bu_vls		gd_qray_basename;	/**< @brief  basename of query ray vlist */
    struct bu_vls		gd_qray_script;		/**< @brief  query ray script */
    char			gd_qray_effects;	/**< @brief  t for text, g for graphics or b for both */
    int				gd_qray_cmd_echo;	/**< @brief  0 - don't echo command, 1 - echo command */
    struct ged_qray_fmt		*gd_qray_fmts;
    struct ged_qray_color	gd_qray_odd_color;
    struct ged_qray_color	gd_qray_even_color;
    struct ged_qray_color	gd_qray_void_color;
    struct ged_qray_color	gd_qray_overlap_color;
    int				gd_shaded_mode;		/**< @brief  1 - draw bots shaded by default */
#if 0
    struct bu_observer		gd_observers;
#endif
};


struct ged_view {
    struct bu_list		l;
    fastf_t			gv_scale;
    fastf_t			gv_size;		/**< @brief  2.0 * scale */
    fastf_t			gv_isize;		/**< @brief  1.0 / size */
    fastf_t			gv_perspective;		/**< @brief  perspective angle */
    vect_t			gv_aet;
    vect_t			gv_eye_pos;		/**< @brief  eye position */
    vect_t			gv_keypoint;
    char			gv_coord;		/**< @brief  coordinate system */
    char			gv_rotate_about;	/**< @brief  indicates what point rotations are about */
    mat_t			gv_rotation;
    mat_t			gv_center;
    mat_t			gv_model2view;
    mat_t			gv_pmodel2view;
    mat_t			gv_view2model;
    mat_t			gv_pmat;		/**< @brief  perspective matrix */
#if 0
    struct bu_observer		gv_observers;
    void 			(*gv_callback)();	/**< @brief  called in vo_update with gv_clientData and gvp */
    genptr_t			gv_clientData;		/**< @brief  passed to gv_callback */
#endif
    int				gv_zclip;
    fastf_t			gv_prevMouseX;
    fastf_t			gv_prevMouseY;
    fastf_t			gv_minMouseDelta;
    fastf_t			gv_maxMouseDelta;
    fastf_t			gv_rscale;
    fastf_t			gv_sscale;
    int				gv_mode;
    struct ged_adc_state 	gv_adc;
    struct ged_grid_state 	gv_grid;
    struct ged_rect_state 	gv_rect;
};


struct ged {
    struct bu_list		l;
    struct rt_wdb		*ged_wdbp;

    /** for catching log messages */
    struct bu_vls		ged_log;

    /** for setting results */
    struct bu_vls		ged_result_str;

    struct ged_drawable		*ged_gdp;
    struct ged_view		*ged_gvp;

    void			*ged_refresh_clientdata;	/**< @brief  function for handling refresh requests */
    void			(*ged_refresh_handler)();	/**< @brief  function for handling refresh requests */
    void			(*ged_output_handler)();	/**< @brief  function for handling output */
    char			*ged_output_script;		/**< @brief  script for use by the outputHandler */
};

typedef int (*ged_func_ptr)(struct ged *, int, const char *[]);
typedef void (*ged_refresh_callback_ptr)(void *);

/**
 * V I E W _ O B J
 *
 * A view object maintains state for controlling a view.
 */
struct view_obj {
    struct bu_list 	l;
    struct bu_vls	vo_name;		/**< @brief  view object name/cmd */
    fastf_t		vo_scale;
    fastf_t		vo_size;		/**< @brief  2.0 * scale */
    fastf_t		vo_invSize;		/**< @brief  1.0 / size */
    fastf_t		vo_perspective;		/**< @brief  perspective angle */
    fastf_t		vo_local2base;		/**< @brief  scale local units to base units (i.e. mm) */
    fastf_t		vo_base2local;		/**< @brief  scale base units (i.e. mm) to local units */
    vect_t		vo_aet;
    vect_t		vo_eye_pos;		/**< @brief  eye position */
    vect_t		vo_keypoint;
    char		vo_coord;		/**< @brief  coordinate system */
    char		vo_rotate_about;	/**< @brief  indicates what point rotations are about */
    mat_t		vo_rotation;
    mat_t		vo_center;
    mat_t		vo_model2view;
    mat_t		vo_pmodel2view;
    mat_t		vo_view2model;
    mat_t		vo_pmat;		/**< @brief  perspective matrix */
    struct bu_observer	vo_observers;
    void 		(*vo_callback)();	/**< @brief  called in vo_update with vo_clientData and vop */
    genptr_t		vo_clientData;		/**< @brief  passed to vo_callback */
    int			vo_zclip;
};


/* defined in adc.c */
GED_EXPORT BU_EXTERN(void ged_calc_adc_pos,
		     (struct ged_view *gvp));
GED_EXPORT BU_EXTERN(void ged_calc_adc_a1,
		     (struct ged_view *gvp));
GED_EXPORT BU_EXTERN(void ged_calc_adc_a2,
		     (struct ged_view *gvp));
GED_EXPORT BU_EXTERN(void ged_calc_adc_dst,
		     (struct ged_view *gvp));

/* defined in clip.c */
GED_EXPORT BU_EXTERN(int ged_clip,
		     (fastf_t *xp1,
		      fastf_t *yp1,
		      fastf_t *xp2,
		      fastf_t *yp2));
GED_EXPORT BU_EXTERN(int ged_vclip,
		     (vect_t a,
		      vect_t b,
		      register fastf_t *min,
		      register fastf_t *max));

/* defined in ged.c */
GED_EXPORT BU_EXTERN(void ged_close,
		     (struct ged *gedp));
GED_EXPORT BU_EXTERN(void ged_init,
		     (struct ged *gedp));
GED_EXPORT BU_EXTERN(struct ged *ged_open,
		     (const char *dbtype,
		      const char *filename,
		      int existing_only));
GED_EXPORT BU_EXTERN(void ged_view_init,
		     (struct ged_view *gvp));

/* defined in wdb_comb_std.c */
GED_EXPORT BU_EXTERN(int wdb_comb_std_cmd,
		     (struct rt_wdb	*gedp,
		      Tcl_Interp	*interp,
		      int		argc,
		      char 		**argv));

/* defined in wdb_obj.c */
GED_EXPORT BU_EXTERN(int Wdb_Init,
		    (Tcl_Interp *interp));

GED_EXPORT BU_EXTERN(int wdb_create_cmd,
		    (Tcl_Interp	*interp,
		     struct rt_wdb *wdbp,
		     const char	*oname));
GED_EXPORT BU_EXTERN(void wdb_deleteProc,
		    (ClientData clientData));
GED_EXPORT BU_EXTERN(int	wdb_get_tcl,
		    (ClientData clientData,
		     Tcl_Interp *interp,
		     int argc, char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_init_obj,
		    (Tcl_Interp *interp,
		     struct rt_wdb *wdbp,
		     const char *oname));
GED_EXPORT BU_EXTERN(struct db_i	*wdb_prep_dbip,
		    (Tcl_Interp *interp,
		     const char *filename));
GED_EXPORT BU_EXTERN(int	wdb_bot_face_sort_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc, char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_bot_decimate_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_close_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_reopen_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_match_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_get_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_put_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_adjust_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_form_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_tops_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_rt_gettrees_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_dump_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_dbip_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_ls_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_list_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_lt_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_pathlist_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_pathsum_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_expand_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_kill_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_killall_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_killtree_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_copy_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_move_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_move_all_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_concat_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_dup_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_group_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_remove_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_search_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_stub_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_region_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_comb_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_find_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_which_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_title_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_color_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_prcolor_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_tol_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_push_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_whatid_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_keep_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_cat_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_instance_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_observer_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_make_bb_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_units_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_hide_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_unhide_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_attr_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_summary_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_comb_std_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_nmg_collapse_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_nmg_simplify_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_shells_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_xpush_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_showmats_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_copyeval_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_version_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_bo_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_track_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int wdb_bot_smooth_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_importFg4Section_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	wdb_stub_cmd,
		    (struct rt_wdb *wdbp,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));



/* defined in view_obj.c */
GED_EXPORT extern struct view_obj HeadViewObj;		/**< @brief  head of view object list */
GED_EXPORT BU_EXTERN(int Vo_Init,
		    (Tcl_Interp *interp));
GED_EXPORT BU_EXTERN(struct view_obj *vo_open_cmd,
		    (const char *oname));
GED_EXPORT BU_EXTERN(void vo_center,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     point_t center));
GED_EXPORT BU_EXTERN(int	vo_center_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(void vo_size,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     fastf_t size));
GED_EXPORT BU_EXTERN(int	vo_size_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_invSize_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(void vo_mat_aet,
		    (struct view_obj *vop));
GED_EXPORT BU_EXTERN(int	vo_zoom,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     fastf_t sf));
GED_EXPORT BU_EXTERN(int	vo_zoom_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc, char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_orientation_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_lookat_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(void vo_setview,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     vect_t rvec));
GED_EXPORT BU_EXTERN(int	vo_setview_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_eye_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_eye_pos_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_pmat_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_perspective_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(void vo_update,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int oflag));
GED_EXPORT BU_EXTERN(int	vo_aet_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_rmat_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_model2view_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_pmodel2view_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_view2model_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_pov_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_units_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_base2local_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_local2base_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_rot,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     char coord,
		     char origin,
		     mat_t rmat,
		     int (*func)()));
GED_EXPORT BU_EXTERN(int	vo_rot_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc, char *argv[],
		     int (*func)()));
GED_EXPORT BU_EXTERN(int	vo_arot_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[],
		     int (*func)()));
GED_EXPORT BU_EXTERN(int	vo_mrot_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[],
		     int (*func)()));
GED_EXPORT BU_EXTERN(int	vo_tra,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     char coord,
		     vect_t tvec,
		     int (*func)()));
GED_EXPORT BU_EXTERN(int	vo_tra_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc, char *argv[],
		     int (*func)()));
GED_EXPORT BU_EXTERN(int	vo_slew,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     vect_t svec));
GED_EXPORT BU_EXTERN(int	vo_slew_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc, char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_observer_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_coord_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_rotate_about_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_keypoint_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_vrot_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_sca,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     fastf_t sf,
		     int (*func)()));
GED_EXPORT BU_EXTERN(int	vo_sca_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[],
		     int (*func)()));
GED_EXPORT BU_EXTERN(int	vo_viewDir_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_ae2dir_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));
GED_EXPORT BU_EXTERN(int	vo_dir2ae_cmd,
		    (struct view_obj *vop,
		     Tcl_Interp *interp,
		     int argc,
		     char *argv[]));


/**
 * Launch an editor on file.
 *
 * Runs $EDITOR on temp file, defaulting to various system-specific
 * editors otherwise if unset.
 *
 * Usage:
 *     editit file
 */
GED_EXPORT BU_EXTERN(int ged_editit, (const char *file));


/* Defined in vutil.c */
GED_EXPORT BU_EXTERN(void ged_persp_mat,
		     (fastf_t *m,
		      fastf_t fovy,
		      fastf_t aspect,
		      fastf_t near1,
		      fastf_t far1,
		      fastf_t backoff));
GED_EXPORT BU_EXTERN(void ged_mike_persp_mat,
		     (fastf_t *pmat,
		      const fastf_t *eye));
GED_EXPORT BU_EXTERN(void ged_deering_persp_mat,
		     (fastf_t *m,
		      const fastf_t *l,
		      const fastf_t *h,
		      const fastf_t *eye));


/**
 * Creates an arb8 given the following:
 *   1)   3 points of one face
 *   2)   coord x, y or z and 2 coordinates of the 4th point in that face
 *   3)   thickness
 *
 * Usage:
 *     3ptarb name x1 y1 z1 x2 y2 z2 x3 y3 z3 coord c1 c2 th
 */
GED_EXPORT BU_EXTERN(int ged_3ptarb, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Angle distance cursor.
 *
 * Usage:
 *     adc args
 */
GED_EXPORT BU_EXTERN(int ged_adc, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Adjust object's attribute(s)
 *
 * Usage:
 *     adjust object attr value ?attr value?
 */
GED_EXPORT BU_EXTERN(int ged_adjust, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Creates an arb8 given rotation and fallback angles
 *
 * Usage:
 *     arb name rot fb
 */
GED_EXPORT BU_EXTERN(int ged_arb, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Convert az/el to a direction vector.
 *
 * Usage:
 *     ae2dir [-i] az el
 */
GED_EXPORT BU_EXTERN(int ged_ae2dir, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get or set the azimuth, elevation and twist.
 *
 * Usage:
 *     ae [[-i] az el [tw]]
 */
GED_EXPORT BU_EXTERN(int ged_aet, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Returns lots of information about the specified object(s)
 *
 * Usage:
 *     analyze object(s)
 */
GED_EXPORT BU_EXTERN(int ged_analyze, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Allow editing of the matrix, etc., along an arc.
 *
 * Usage:
 *     arced a/b anim_cmd ...
 */
GED_EXPORT BU_EXTERN(int ged_arced, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set, get, show, remove or append to attribute values for the specified object.
 * The arguments for "set" and "append" subcommands are attribute name/value pairs.
 * The arguments for "get", "rm", and "show" subcommands are attribute names.
 * The "set" subcommand sets the specified attributes for the object.
 * The "append" subcommand appends the provided value to an existing attribute,
 * or creates a new attribute if it does not already exist.
 * The "get" subcommand retrieves and displays the specified attributes.
 * The "rm" subcommand deletes the specified attributes.
 * The "show" subcommand does a "get" and displays the results in a user readable format.
 *
 * Usage:
 *     attr set|get|show|rm|append} object [args]
 */
GED_EXPORT BU_EXTERN(int ged_attr, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Rotate angle degrees about the specified axis
 *
 * Usage:
 *     arot x y z angle
 */
GED_EXPORT BU_EXTERN(int ged_arot, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Auto-adjust the view so that all displayed geometry is in view
 *
 * Usage:
 *     autoview
 */
GED_EXPORT BU_EXTERN(int ged_autoview, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Tesselates each operand object, then performs the
 * boolean evaluation, storing result in new_obj
 *
 * Usage:
 *     bev [P|t] new_obj obj1 op obj2 op obj3 ...
 */
GED_EXPORT BU_EXTERN(int ged_bev, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Manipulate opaque objects.
 * Must specify one of -i (for creating or adjusting objects (input))
 * or -o for extracting objects (output).
 * If the major type is "u" the minor type must be one of:
 *   "f" -> float
 *   "d" -> double
 *   "c" -> char (8 bit)
 *   "s" -> short (16 bit)
 *   "i" -> int (32 bit)
 *   "l" -> long (64 bit)
 *   "C" -> unsigned char (8 bit)
 *   "S" -> unsigned short (16 bit)
 *   "I" -> unsigned int (32 bit)
 *   "L" -> unsigned long (64 bit)
 * For input, source is a file name and dest is an object name.
 * For output source is an object name and dest is a file name.
 * Only uniform array binary objects (major_type=u) are currently supported}}
 * 
 * Usage:
 *     binary {-i major_type minor_type | -o} dest source
 */
GED_EXPORT BU_EXTERN(int ged_binary, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Erase all currently displayed geometry and draw the specified object(s)
 *
 * Usage:
 *     blast object(s)
 */
GED_EXPORT BU_EXTERN(int ged_blast, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Create new_bot by condensing old_bot
 *
 * Usage:
 *     bot_condense new_bot old_bot
 */
GED_EXPORT BU_EXTERN(int ged_bot_condense, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Uses edge decimation to reduce the number of triangles in the
 * specified BOT while keeping within the specified constraints.
 *
 * Usage:
 *     bot_decimate -c maximum_chord_error -n maximum_normal_error -e minimum_edge_length new_bot_name current_bot_name
 */
GED_EXPORT BU_EXTERN(int ged_bot_decimate, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Dump bots to the specified format.
 *
 * Usage:
 *     bot_dump [-b] [-m directory] [-o file] [-t dxf|obj|sat|stl] [-u units] [bot1 bot2 ...]";
 */
GED_EXPORT BU_EXTERN(int ged_bot_dump, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Create new_bot by fusing faces in old_bot
 *
 * Usage:
 *     bot_face_fuse new_bot old_bot
 */
GED_EXPORT BU_EXTERN(int ged_bot_face_fuse, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Sort the facelist of BOT solids to optimize ray trace performance
 * for a particular number of triangles per raytrace piece.
 *
 * Usage:
 *     bot_face_sort triangles_per_piece bot_solid1 [bot_solid2 bot_solid3 ...]
 */
GED_EXPORT BU_EXTERN(int ged_bot_face_sort, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Create bot_dest by merging the bot sources.
 *
 * Usage:
 *     bot_merge bot_dest bot1_src [botn_src]
 */
GED_EXPORT BU_EXTERN(int ged_bot_merge, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Calculate vertex normals for the BOT primitive
 *
 * Usage:
 *     bot_smoooth [-t ntol] new_bot old_bot
 */
GED_EXPORT BU_EXTERN(int ged_bot_smooth, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Split the specified bot
 *
 * Usage:
 *     bot_split bot_obj
 */
GED_EXPORT BU_EXTERN(int ged_bot_split, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Fuse bot vertices
 *
 * Usage:
 *     bot_vertex_fuse new_bot old_bot
 */
GED_EXPORT BU_EXTERN(int ged_bot_vertex_fuse, (struct ged *gedp, int argc, const char *argv[]));

/**
 * List attributes (brief).
 *
 * Usage:
 *     cat <objects>
 */
GED_EXPORT BU_EXTERN(int ged_cat, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get or set the view center.
 *
 * Usage:
 *     center ["x y z"]
 */
GED_EXPORT BU_EXTERN(int ged_center, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Performs a deep copy of object.
 *
 * Usage:
 *     clone [-abhimnprtv] <object>
 */
GED_EXPORT BU_EXTERN(int ged_clone, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Make color entry.
 *
 * Usage:
 *     color low high r g b
 */
GED_EXPORT BU_EXTERN(int ged_color, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set combination color.
 *
 * Usage:
 *     comb_color combination R G B
 */
GED_EXPORT BU_EXTERN(int ged_comb_color, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Create or extend combination w/booleans.
 *
 * Usage:
 *     comb comb_name <operation primitive>
 */
GED_EXPORT BU_EXTERN(int ged_comb, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Create or extend a combination using standard notation.
 *
 * Usage:
 *     c [-cr] comb_name <boolean_expr>
 */
GED_EXPORT BU_EXTERN(int ged_comb_std, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Import a database into the current database using an auto-incrementing or custom affix
 *
 * Usage:
 *     concat [-s|-p] file.g [suffix|prefix]
 */
GED_EXPORT BU_EXTERN(int ged_concat, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Copy a database object
 *
 * Usage:
 *     copy from to
 */
GED_EXPORT BU_EXTERN(int ged_copy, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Copy an 'evaluated' path solid
 *
 * Usage:
 *     copyeval new_prim path_to_old_prim
 */
GED_EXPORT BU_EXTERN(int ged_copyeval, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Copy the matrix from one combination's arc to another.
 *
 * Usage:
 *     copymat a/b c/d
 */
GED_EXPORT BU_EXTERN(int ged_copymat, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Copy cylinder and position at end of original cylinder
 *
 * Usage:
 *     cpi from to
 */
GED_EXPORT BU_EXTERN(int ged_cpi, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get dbip
 *
 * Usage:
 *     dbip
 */
GED_EXPORT BU_EXTERN(int ged_dbip, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Decompose nmg_solid into maximally connected shells
 *
 * Usage:
 *     decompose nmg [prefix]
 */
GED_EXPORT BU_EXTERN(int ged_decompose, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Delay the specified amount of time
 *
 * Usage:
 *     delay sec usec
 */
GED_EXPORT BU_EXTERN(int ged_delay, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Convert a direction vector to az/el.
 *
 * Usage:
 *     dir2ae [-i] x y z
 */
GED_EXPORT BU_EXTERN(int ged_dir2ae, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Prepare object(s) for display
 *
 * Usage:
 *     draw [-A -o -C#/#/# -s] <objects | attribute name/value pairs>
 */
GED_EXPORT BU_EXTERN(int ged_draw, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Dump a full copy of the database into file.g
 *
 * Usage:
 *     dump file.g
 */
GED_EXPORT BU_EXTERN(int ged_dump, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Check for duplicate names in file
 *
 * Usage:
 *     dup file.g prefix
 */
GED_EXPORT BU_EXTERN(int ged_dup, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Prepare object(s) for display
 *
 * Usage:
 *     E [-C#/#/# -s] objects(s)
 */
GED_EXPORT BU_EXTERN(int ged_E, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Prepare all regions with the given air code(s) for display
 *
 * Usage:
 *     eac air_code(s)
 */
GED_EXPORT BU_EXTERN(int ged_eac, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Echo the specified arguments.
 *
 * Usage:
 *     echo args
 */
GED_EXPORT BU_EXTERN(int ged_echo, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Text edit the color table
 *
 * Usage:
 *     edcolor
 */
GED_EXPORT BU_EXTERN(int ged_edcolor, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Edit region ident codes.
 *
 * Usage:
 *     edcodes object(s)
 */
GED_EXPORT BU_EXTERN(int ged_edcodes, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Edit combination.
 *
 * Usage:
 *     edcomb combname Regionflag regionid air los GIFTmater
 */
GED_EXPORT BU_EXTERN(int ged_edcomb, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Edit combination materials.
 *
 * Command relies on rmater, editit, and wmater commands.
 *
 * Usage:
 *     edmater combination1 [combination2 ...]
 */
GED_EXPORT BU_EXTERN(int ged_edmater, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Erase objects from the display.
 *
 * Usage:
 *     erase objects(s)
 */
GED_EXPORT BU_EXTERN(int ged_erase, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Erase all occurrences of objects from the display.
 *
 * Usage:
 *     erase_all objects(s)
 */
GED_EXPORT BU_EXTERN(int ged_erase_all, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Evaluate objects via NMG tessellation
 *
 * Usage:
 *     ev [-dfnstuvwT] [-P #] <objects>
 */
GED_EXPORT BU_EXTERN(int ged_ev, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set/get the eye point
 *
 * Usage:
 *     eye [x y z]
 */
GED_EXPORT BU_EXTERN(int ged_eye, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set/get the eye position
 *
 * Usage:
 *     eye_pos [x y z]
 */
GED_EXPORT BU_EXTERN(int ged_eye_pos, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Globs expression against database objects
 *
 * Usage:
 *     expand expression
 */
GED_EXPORT BU_EXTERN(int ged_expand, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Facetize the specified objects
 *
 * Usage:
 *     facetize new_obj old_obj [old_obj2 old_obj3 ...]
 */
GED_EXPORT BU_EXTERN(int ged_facetize, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Find combinations that reference object
 *
 * Usage:
 *     find <objects>
 */
GED_EXPORT BU_EXTERN(int ged_find, (struct ged *gedp, int argc, const char *argv[]));

/**
 * returns form for objects of type "type"
 *
 * Usage:
 *     form type
 */
GED_EXPORT BU_EXTERN(int ged_form, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Given an NMG solid, break it up into several NMG solids, each
 * containing a single shell with a single sub-element.
 *
 * Usage:
 *     fracture nmgsolid [prefix]
 */
GED_EXPORT BU_EXTERN(int ged_fracture, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get object attributes
 *
 * Usage:
 *     get object ?attr? 
 */
GED_EXPORT BU_EXTERN(int ged_get, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get view size and center such that all displayed solids would be in view
 *
 * Usage:
 *     get_autoview
 */
GED_EXPORT BU_EXTERN(int ged_get_autoview, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get combination information
 *
 * Usage:
 *     get_comb comb
 */
GED_EXPORT BU_EXTERN(int ged_get_comb, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get the viewsize, orientation and eye point.
 *
 * Usage:
 *     get_eyemodel
 */
GED_EXPORT BU_EXTERN(int ged_get_eyemodel, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get the object's type
 *
 * Usage:
 *     get_type object
 */
GED_EXPORT BU_EXTERN(int ged_get_type, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Globs expression against the database
 *
 * Usage:
 *     glob expression
 */
GED_EXPORT BU_EXTERN(int ged_glob, (struct ged *gedp, int argc, const char *argv[]));

/**
 * 
 *
 * Usage:
 *     gqa args
 */
GED_EXPORT BU_EXTERN(int ged_gqa, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Grid utility command.
 *
 * Usage:
 *     grid args
 */
GED_EXPORT BU_EXTERN(int ged_grid, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Create or append objects to a group
 *
 * Usage:
 *     group object(s)
 */
GED_EXPORT BU_EXTERN(int ged_group, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set the "hidden" flag for the specified objects so they do not appear in an "ls" command output
 *
 * Usage:
 *     hide <objects>
 */
GED_EXPORT BU_EXTERN(int ged_hide, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Returns how an object is being displayed
 *
 * Usage:
 *     how [-b] obj
 */
GED_EXPORT BU_EXTERN(int ged_how, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Illuminate/highlight database object.
 *
 * Usage:
 *     illum [-n] obj
 */
GED_EXPORT BU_EXTERN(int ged_illum, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Create a primitive via keyboard.
 *
 * Usage:
 *     in name type args
 */
GED_EXPORT BU_EXTERN(int ged_in, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Finds the inside primitive per the specified thickness.
 *
 * Usage:
 *     inside out_prim in_prim th(s)
 */
GED_EXPORT BU_EXTERN(int ged_inside, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Add instance of obj to comb
 *
 * Usage:
 *     instance obj comb [op]
 */
GED_EXPORT BU_EXTERN(int ged_instance, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Makes a bot object out of the specified section.
 *
 * Usage:
 *     importFg4Section obj section
 */
GED_EXPORT BU_EXTERN(int ged_importFg4Section, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Returns the inverse view size.
 *
 * Usage:
 *     isize
 */
GED_EXPORT BU_EXTERN(int ged_isize, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set region ident codes.
 *
 * Usage:
 *     item region ident [air [material [los]]]
 */
GED_EXPORT BU_EXTERN(int ged_item, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Save/keep the specified objects in the specified file
 *
 * Usage:
 *     keep file.g object(s)
 */
GED_EXPORT BU_EXTERN(int ged_keep, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set/get the keypoint
 *
 * Usage:
 *     keypoint [x y z]
 */
GED_EXPORT BU_EXTERN(int ged_keypoint, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Kill/delete the specified objects from the database
 *
 * Usage:
 *     kill object(s)
 */
GED_EXPORT BU_EXTERN(int ged_kill, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Kill/delete the specified objects from the database, removing all references
 *
 * Usage:
 *     killall object(s)
 */
GED_EXPORT BU_EXTERN(int ged_killall, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Kill all references to the specified object(s).
 *
 * Usage:
 *     killrefs object(s)
 */
GED_EXPORT BU_EXTERN(int ged_killrefs, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Kill all paths belonging to objects
 *
 * Usage:
 *     killtree object(s)
 */
GED_EXPORT BU_EXTERN(int ged_killtree, (struct ged *gedp, int argc, const char *argv[]));

/**
 * List object information, verbose.
 *
 * Usage:
 *     l [-r] <objects>
 */
GED_EXPORT BU_EXTERN(int ged_list, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Load the view
 *
 * Usage:
 *     loadview filename
 */
GED_EXPORT BU_EXTERN(int ged_loadview, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Used to control logging.
 *
 * Usage:
 *     log {get|start|stop}
 */
GED_EXPORT BU_EXTERN(int ged_log, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set the look-at point
 *
 * Usage:
 *     lookat x y z
 */
GED_EXPORT BU_EXTERN(int ged_lookat, (struct ged *gedp, int argc, const char *argv[]));

/**
 * List the objects in this database
 *
 * Usage:
 *     ls [-A name/value pairs] OR [-acrslop] object(s)
 */
GED_EXPORT BU_EXTERN(int ged_ls, (struct ged *gedp, int argc, const char *argv[]));

/**
 * List object's tree as a tcl list of {operator object} pairs
 *
 * Usage:
 *     lt object
 */
GED_EXPORT BU_EXTERN(int ged_lt, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Convert the specified model point to a view point.
 *
 * Usage:
 *     m2v_point x y z
 */
GED_EXPORT BU_EXTERN(int ged_m2v_point, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Make a new primitive.
 *
 * Usage:
 *     make obj type
 */
GED_EXPORT BU_EXTERN(int ged_make, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Make a bounding box (rpp) around the specified objects
 *
 * Usage:
 *     make_bb bbname object(s)
 */
GED_EXPORT BU_EXTERN(int ged_make_bb, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Make a unique object name.
 *
 * Usage:
 *     make_name template | -s [num]
 */
GED_EXPORT BU_EXTERN(int ged_make_name, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Globs expression against database objects, does not return tokens that match nothing
 *
 * Usage:
 *     match expression
 */
GED_EXPORT BU_EXTERN(int ged_match, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Modify material information.
 *
 * Usage:
 *     mater region_name shader r g b inherit
 */
GED_EXPORT BU_EXTERN(int ged_mater, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Mirror the primitive or combination along the specified axis.
 *
 * Usage:
 *     mirror [-d dir] [-o origin] [-p scalar_pt] [-x] [-y] [-z] old new
 *
 */
GED_EXPORT BU_EXTERN(int ged_mirror, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get the model to view matrix
 *
 * Usage:
 *     model2view
 */
GED_EXPORT BU_EXTERN(int ged_model2view, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Move an arb's edge through point
 *
 * Usage:
 *     move_arb_edge arb edge pt
 */
GED_EXPORT BU_EXTERN(int ged_move_arb_edge, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Move/rename a database object
 *
 * Usage:
 *     mv from to
 */
GED_EXPORT BU_EXTERN(int ged_move, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Move/rename all occurrences object
 *
 * Usage:
 *     mvall from to
 */
GED_EXPORT BU_EXTERN(int ged_move_all, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Move an arb's face through point
 *
 * Usage:
 *     move_arb_face arb face pt
 */
GED_EXPORT BU_EXTERN(int ged_move_arb_face, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Rotate the view. Note - x, y and z are rotations in model coordinates.
 *
 * Usage:
 *     mrot x y z
 */
GED_EXPORT BU_EXTERN(int ged_mrot, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Trace a single ray from the current view.
 *
 * Usage:
 *     nirt options [x y z]
 */
GED_EXPORT BU_EXTERN(int ged_nirt, (struct ged *gedp, int argc, const char *argv[]));
GED_EXPORT BU_EXTERN(int ged_vnirt, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Decimate NMG primitive via edge collapse
 *
 * Usage:
 *     nmg_collapse nmg_prim new_prim max_err_dist [min_angle]
 */
GED_EXPORT BU_EXTERN(int ged_nmg_collapse, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Simplify the NMG primitive, if possible
 *
 * Usage:
 *     nmg_simplify [arb|tgc|ell|poly] new_prim nmg_prim
 */
GED_EXPORT BU_EXTERN(int ged_nmg_simplify, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set/get object center.
 *
 * Usage:
 *     ocenter obj [x y z]
 */
GED_EXPORT BU_EXTERN(int ged_ocenter, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Open a database
 *
 * Usage:
 *     open [filename]
 */
GED_EXPORT BU_EXTERN(int ged_reopen, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set the view orientation using a quaternion.
 *
 * Usage:
 *     orient quat
 */
GED_EXPORT BU_EXTERN(int ged_orient, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Rotate obj about the keypoint by 
 *
 * Usage:
 *     orotate obj rX rY rZ [kX kY kZ]
 */
GED_EXPORT BU_EXTERN(int ged_orotate, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Scale obj about the keypoint by sf.
 *
 * Usage:
 *     oscale obj sf [kX kY kZ]
 */
GED_EXPORT BU_EXTERN(int ged_oscale, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Translate obj by dx dy dz.
 *
 * Usage:
 *     otranslate obj dx dy dz
 */
GED_EXPORT BU_EXTERN(int ged_otranslate, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Overlay the specified 2D/3D UNIX plot file
 *
 * Usage:
 *     overlay file.pl [name]
 */
GED_EXPORT BU_EXTERN(int ged_overlay, (struct ged *gedp, int argc, const char *argv[]));

/**
 * List all paths from name(s) to leaves
 *
 * Usage:
 *     pathlist name(s)
 */
GED_EXPORT BU_EXTERN(int ged_pathlist, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Lists all paths matching the input path
 *
 * Usage:
 *     paths pattern
 */
GED_EXPORT BU_EXTERN(int ged_pathsum, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set/get the perspective angle.
 *
 * Usage:
 *     perspective [angle]
 */
GED_EXPORT BU_EXTERN(int ged_perspective, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Create a unix plot file of the currently displayed objects.
 *
 * Usage:
 *     plot file [2|3] [f] [g] [z]
 */
GED_EXPORT BU_EXTERN(int ged_plot, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set/get the perspective matrix.
 *
 * Usage:
 *     pmat [mat]
 */
GED_EXPORT BU_EXTERN(int ged_pmat, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get the pmodel2view matrix.
 *
 * Usage:
 *     pmodel2view
 */
GED_EXPORT BU_EXTERN(int ged_pmodel2view, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Create a png file of the view.
 *
 * Usage:
 *     png [-s size] file.png
 */
GED_EXPORT BU_EXTERN(int ged_png, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set point of view
 *
 * Usage:
 *     pov center quat scale eye_pos perspective
 */
GED_EXPORT BU_EXTERN(int ged_pov, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Print color table
 *
 * Usage:
 *     prcolor
 */
GED_EXPORT BU_EXTERN(int ged_prcolor, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Prefix the specified objects with the specified prefix
 *
 * Usage:
 *     prefix new_prefix object(s)
 */
GED_EXPORT BU_EXTERN(int ged_prefix, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Preview a new style RT animation script.
 *
 * Usage:
 *     preview [-v] [-d sec_delay] [-D start frame] [-K last frame] rt_script_file;
 */
GED_EXPORT BU_EXTERN(int ged_preview, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Create a postscript file of the view.
 *
 * Usage:
 *     ps [-c creator] [-f font] [-s size] [-t title] [-x offset] [-y offset] file.ps
 */
GED_EXPORT BU_EXTERN(int ged_ps, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Push objects' path transformations to  primitives
 *
 * Usage:
 *     push object(s)
 */
GED_EXPORT BU_EXTERN(int ged_push, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Create a database object
 *
 * Usage:
 *     put object type attrs
 */

GED_EXPORT BU_EXTERN(int ged_put, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set combination attributes
 *
 * Usage:
 *     put_comb comb_name is_Region id air material los color shader inherit boolean_expr";
 */
GED_EXPORT BU_EXTERN(int ged_put_comb, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Replace the matrix on an arc
 *
 * Usage:
 *     putmat a/b I|m0 m1 ... m15
 */
GED_EXPORT BU_EXTERN(int ged_putmat, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get/set query_ray attributes
 *
 * Usage:
 *     qray subcommand args
 */
GED_EXPORT BU_EXTERN(int ged_qray, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get/set the view orientation using a quaternion
 *
 * Usage:
 *     quat a b c d
 */
GED_EXPORT BU_EXTERN(int ged_quat, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set the view from a direction vector and twist.
 *
 * Usage:
 *     qvrot x y z angle
 */
GED_EXPORT BU_EXTERN(int ged_qvrot, (struct ged *gedp, int argc, const char *argv[]));

GED_EXPORT BU_EXTERN(void ged_init_qray,
		    (struct ged_drawable *gdp));
GED_EXPORT BU_EXTERN(void ged_free_qray,
		    (struct ged_drawable *gdp));

/**
 * Read region ident codes from filename.
 *
 * Usage:
 *     rcodes filename
 */
GED_EXPORT BU_EXTERN(int ged_rcodes, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Rubber band rectangle utility.
 *
 * Usage:
 *     rect args
 */
GED_EXPORT BU_EXTERN(int ged_rect, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Edit region/comb
 *
 * Usage:
 *     red object
 */
GED_EXPORT BU_EXTERN(int ged_red, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Change the default region ident codes: item air los mat
 *
 * Usage:
 *     regdef item air los mat
 */
GED_EXPORT BU_EXTERN(int ged_regdef, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Create or append objects to a region
 *
 * Usage:
 *     region object(s)
 */
GED_EXPORT BU_EXTERN(int ged_region, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Remove members from a combination
 *
 * Usage:
 *     remove object(s)
 */
GED_EXPORT BU_EXTERN(int ged_remove, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Returns the solid table & vector list as a string
 *
 * Usage:
 *     report [lvl]
 */
GED_EXPORT BU_EXTERN(int ged_report, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Makes and arb given a point, 2 coord of 3 pts, rot, fb and thickness.
 *
 * Usage:
 *     rfarb name args
 */
GED_EXPORT BU_EXTERN(int ged_rfarb, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Returns a list of id to region name mappings for the entire database.
 *
 * Usage:
 *     rmap
 */
GED_EXPORT BU_EXTERN(int ged_rmap, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set/get the rotation matrix.
 *
 * Usage:
 *     rmat [mat]
 */
GED_EXPORT BU_EXTERN(int ged_rmat, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Read material properties from a file.
 *
 * Usage:
 *     rmater file
 */
GED_EXPORT BU_EXTERN(int ged_rmater, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Rotate the view.
 *
 * Usage:
 *     rot [-m|-v] x y z
 */
GED_EXPORT BU_EXTERN(int ged_rot, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set/get the rotate_about point.
 *
 * Usage:
 *     rotate_about [e|k|m|v]
 */
GED_EXPORT BU_EXTERN(int ged_rotate_about, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Rotate an arb's face through point
 *
 * Usage:
 *     rotate_arb_face arb face pt
 */
GED_EXPORT BU_EXTERN(int ged_rotate_arb_face, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Rotate the point.
 *
 * Usage:
 *     rot_point x y z
 */
GED_EXPORT BU_EXTERN(int ged_rot_point, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Invoke any raytracing application with the current view.
 *
 * Usage:
 *     rrt [args]
 */
GED_EXPORT BU_EXTERN(int ged_rrt, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Run the raytracing application.
 *
 * Usage:
 *     rt [args]
 */
GED_EXPORT BU_EXTERN(int ged_rt, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Abort the current raytracing processes.
 *
 * Usage:
 *     rtabort
 */
GED_EXPORT BU_EXTERN(int ged_rtabort, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Check for overlaps in the current view.
 *
 * Usage:
 *     rtcheck [args]
 */
GED_EXPORT BU_EXTERN(int ged_rtcheck, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Save keyframe in file (experimental)
 *
 * Usage:
 *     savekey file [time]
 */
GED_EXPORT BU_EXTERN(int ged_savekey, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Save the view
 *
 * Usage:
 *     saveview [-e] [-i] [-l] [-o] filename [args]
 */
GED_EXPORT BU_EXTERN(int ged_saveview, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Scale the view.
 *
 * Usage:
 *     sca sf
 */
GED_EXPORT BU_EXTERN(int ged_scale, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get/set the output handler script
 *
 * Usage:
 *     set_output_script [script]
 */
GED_EXPORT BU_EXTERN(int ged_set_output_script, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get/set the unix plot output mode
 *
 * Usage:
 *     set_uplotOutputMode [binary|text]
 */
GED_EXPORT BU_EXTERN(int ged_set_uplotOutputMode, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set the transparency of the specified object
 *
 * Usage:
 *     set_transparency obj tr
 */
GED_EXPORT BU_EXTERN(int ged_set_transparency, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set the view orientation given the angles x, y and z in degrees.
 *
 * Usage:
 *     setview x y z
 */
GED_EXPORT BU_EXTERN(int ged_setview, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set/get the shaded mode.
 *
 * Usage:
 *     shaded_mode [0|1|2]
 */
GED_EXPORT BU_EXTERN(int ged_shaded_mode, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Simpler, command-line version of 'mater' command.
 *
 * Usage:
 *     shader combination shader_material [shader_argument(s)]
 */
GED_EXPORT BU_EXTERN(int ged_shader, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Breaks the NMG model into seperate shells
 *
 * Usage:
 *     shells nmg_model
 */
GED_EXPORT BU_EXTERN(int ged_shells, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Show the matrix transformations along path
 *
 * Usage:
 *     showmats path
 */
GED_EXPORT BU_EXTERN(int ged_showmats, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get or set the view size.
 *
 * Usage:
 *     size [s]
 */
GED_EXPORT BU_EXTERN(int ged_size, (struct ged *gedp, int argc, const char *argv[]));

/**
 * 
 *
 * Usage:
 *     solids_on_ray
 */
GED_EXPORT BU_EXTERN(int ged_solids_on_ray, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Slew the view
 *
 * Usage:
 *     slew x y [z]
 */
GED_EXPORT BU_EXTERN(int ged_slew, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Count/list primitives/regions/groups
 *
 * Usage:
 *     summary [p r g]
 */
GED_EXPORT BU_EXTERN(int ged_summary, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Sync up the in-memory database with the on-disk database.
 *
 * Usage:
 *     sync
 */
GED_EXPORT BU_EXTERN(int ged_sync, (struct ged *gedp, int argc, const char *argv[]));

/**
 * The ged_tables() function serves idents, regions and solids.
 *
 * Make ascii summary of region idents.
 *
 * Usage:
 *     idents file object(s)
 *
 * Make ascii summary of regions.
 *
 * Usage:
 *     regions file object(s)
 *
 * Make ascii summary of solid parameters.
 *
 * Usage:
 *     solids file object(s)
 */
GED_EXPORT BU_EXTERN(int ged_tables, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set/get the database title
 *
 * Usage:
 *     title description
 */
GED_EXPORT BU_EXTERN(int ged_title, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set/get tessellation and calculation tolerances
 *
 * Usage:
 *     tol ([abs|rel|norm|dist|perp] [tolerance]) ...
 */
GED_EXPORT BU_EXTERN(int ged_tol, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Find all top level objects
 *
 * Usage:
 *     tops [-a] [-h] [-n] [-p], if NEW_TOPS_BEHAVIOR
 *     tops [-g] [-n] [-u]
 */
GED_EXPORT BU_EXTERN(int ged_tops, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Translate the view.
 *
 * Usage:
 *     tra x y z
 */
GED_EXPORT BU_EXTERN(int ged_tra, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Create a track
 *
 * Usage:
 *     track basename rX1 rX2 rZ rR dX dZ dR iX iZ iR minX minY th
 */
GED_EXPORT BU_EXTERN(int ged_track, (struct ged *gedp, int argc, const char *argv[]));

#if 0
/**
 * 
 *
 * Usage:
 *     tracker [-fh] [# links] [increment] [spline.iges] [link...]
 */
GED_EXPORT BU_EXTERN(int ged_tracker, (struct ged *gedp, int argc, const char *argv[]));
#endif

/**
 * Return the object hierarchy for all object(s) specified or for all currently displayed
 *
 * Usage:
 *     tree [-c] [-o outfile] [-i indentSize] [-d displayDepth] [object(s)]
 */
GED_EXPORT BU_EXTERN(int ged_tree, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Unset the "hidden" flag for the specified objects so they will appear in a "t" or "ls" command output
 *
 * Usage:
 *     unhide object(s)
 */
GED_EXPORT BU_EXTERN(int ged_unhide, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Set/get the database units
 *
 * Usage:
 *     units [mm|cm|m|in|ft|...]
 */
GED_EXPORT BU_EXTERN(int ged_units, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Convert the specified view point to a model point.
 *
 * Usage:
 *     v2m_point x y z
 */
GED_EXPORT BU_EXTERN(int ged_v2m_point, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Vector drawing utility.
 *
 * Usage:
 *     vdraw write|insert|delete|read|send|params|open|vlist [args]
 */
GED_EXPORT BU_EXTERN(int ged_vdraw, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Returns the database version.
 *
 * Usage:
 *     version
 */
GED_EXPORT BU_EXTERN(int ged_version, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get/set view attributes
 *
 * Usage:
 *     view quat|ypr|aet|center|eye|size [args]
 */
GED_EXPORT BU_EXTERN(int ged_view, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get the view2model matrix.
 *
 * Usage:
 *     view2model
 */
GED_EXPORT BU_EXTERN(int ged_view2model, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Rotate the view. Note - x, y and z are rotations in view coordinates.
 *
 * Usage:
 *     vrot x y z
 */
GED_EXPORT BU_EXTERN(int ged_vrot, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Return the view direction.
 *
 * Usage:
 *     viewdir [-i]
 */
GED_EXPORT BU_EXTERN(int ged_viewdir, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Write region ident codes to filename.
 *
 * Usage:
 *     wcodes filename object(s)
 */
GED_EXPORT BU_EXTERN(int ged_wcodes, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Return the specified region's id.
 *
 * Usage:
 *     whatid region
 */
GED_EXPORT BU_EXTERN(int ged_whatid, (struct ged *gedp, int argc, const char *argv[]));

/**
 * The ged_which() function serves both whichair and whichid.
 *
 * Find the regions with the specified air codes.
 *
 * Usage:
 *     whichair codes(s)
 *
 *
 * Find the regions with the specified region ids.
 *
 * Usage:
 *     whichid [-s] id(s)
 *
 */
GED_EXPORT BU_EXTERN(int ged_which, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Return all combinations with the specified shaders.
 *
 * Usage:
 *     which_shader [-s] args
 */
GED_EXPORT BU_EXTERN(int ged_which_shader, (struct ged *gedp, int argc, const char *argv[]));

/**
 * List the objects currently prepped for drawing
 *
 * Usage:
 *     who [r(eal)|p(hony)|b(oth)]
 */
GED_EXPORT BU_EXTERN(int ged_who, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Write material properties to a file for specified combination(s).
 *
 * Usage:
 *     wmater file combination1 [combination2 ...]
 */
GED_EXPORT BU_EXTERN(int ged_wmater, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Push object path transformations to solids, creating primitives if necessary
 *
 * Usage:
 *     xpush object
 */
GED_EXPORT BU_EXTERN(int ged_xpush, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Get/set the view orientation using yaw, pitch and roll
 *
 * Usage:
 *     ypr yaw pitch roll
 */
GED_EXPORT BU_EXTERN(int ged_ypr, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Erase all currently displayed geometry
 *
 * Usage:
 *     zap
 */
GED_EXPORT BU_EXTERN(int ged_zap, (struct ged *gedp, int argc, const char *argv[]));

/**
 * Zoom the view in or out.
 *
 * Usage:
 *     zoom sf
 */
GED_EXPORT BU_EXTERN(int ged_zoom, (struct ged *gedp, int argc, const char *argv[]));


__END_DECLS

#endif /* __GED_H__ */

/*
 * Local Variables:
 * tab-width: 8
 * mode: C
 * indent-tabs-mode: t
 * c-file-style: "stroustrup"
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
blob
data 2291
/*                          S Y S V . H
 * BRL-CAD
 *
 * Copyright (c) 2007-2008 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @file sysv.h
 *
 * The "System V" library is a compatibility library for older systems
 * that may not have various BSD and POSIX interfaces that BRL-CAD
 * expects.  Only the portions that are missing should end up getting
 * declared and compiled.
 *
 * The majority of the code in this compatibility library comes from
 * sources external to BRL-CAD and as such, refer to each individual
 * file for authorship and license information.  All code included is
 * either covered by the LGPL, BSD license, or is in the public
 * domain.
 *
 */

#ifndef __SYSV_H__
#define __SYSV_H__

#include "common.h"

__BEGIN_DECLS

#ifndef SYSV_EXPORT
#  if defined(_WIN32) && !defined(__CYGWIN__) && defined(BRLCAD_DLL)
#    ifdef SYSV_EXPORT_DLL
#      define SYSV_EXPORT __declspec(dllexport)
#    else
#      define SYSV_EXPORT __declspec(dllimport)
#    endif
#  else
#    define SYSV_EXPORT
#  endif
#endif

#ifndef HAVE_MEMSET
SYSV_EXPORT extern char *memset(char *s, char c, int n);
#endif

#ifndef HAVE_STRCHR
SYSV_EXPORT extern char *strchr(char *sp, char c);
#endif

#ifndef HAVE_STRDUP
SYSV_EXPORT extern char *strdup(const char *cp);
#endif

#ifndef HAVE_STRSEP
SYSV_EXPORT extern char *strsep(char **stringp, const char *delim);
#endif

#ifndef HAVE_STRTOK
SYSV_EXPORT extern char *strtok(char *s, const char *delim);
#endif

__END_DECLS

#endif /* __SYSV_H__ */

/*
 * Local Variables:
 * tab-width: 8
 * mode: C
 * indent-tabs-mode: t
 * c-file-style: "stroustrup"
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
blob
data 139801
Microsoft Visual Studio Solution File, Format Version 9.00
# Visual Studio 2005
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "asc2g", "..\asc2g\asc2g.vcproj", "{06005C89-D349-4B29-BFBB-9A3F7CCF18E5}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{498DE300-007F-4D8D-B280-A1ACA20784A8} = {498DE300-007F-4D8D-B280-A1ACA20784A8}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
		{6EC2E706-4704-4F93-985D-DD0945411ABE} = {6EC2E706-4704-4F93-985D-DD0945411ABE}
		{628CDD07-CCCB-4D7C-A290-FB6AE0125C64} = {628CDD07-CCCB-4D7C-A290-FB6AE0125C64}
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E} = {DDD6E20A-8F64-443D-9428-AFB56715AA6E}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{39785814-94C1-4245-AA56-60ED2C0E1F41} = {39785814-94C1-4245-AA56-60ED2C0E1F41}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
		{3B28AB18-C065-4426-9802-4A70528CAB55} = {3B28AB18-C065-4426-9802-4A70528CAB55}
		{E0391F1A-B376-4EA1-8C49-521B195DB3D3} = {E0391F1A-B376-4EA1-8C49-521B195DB3D3}
		{FCF25D1B-ED36-46B9-8DA8-2BF8F589C86B} = {FCF25D1B-ED36-46B9-8DA8-2BF8F589C86B}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{8003B222-7F4E-4723-BC1F-67B1F9825697} = {8003B222-7F4E-4723-BC1F-67B1F9825697}
		{DE92C423-14C5-4604-8539-174D0B911548} = {DE92C423-14C5-4604-8539-174D0B911548}
		{205D4C24-C72D-4269-88A4-8C04595436BC} = {205D4C24-C72D-4269-88A4-8C04595436BC}
		{2BFBED31-BB63-49EA-A1DD-11A6F3561681} = {2BFBED31-BB63-49EA-A1DD-11A6F3561681}
		{745CE333-57DA-4B3F-B402-1FCACA82D86B} = {745CE333-57DA-4B3F-B402-1FCACA82D86B}
		{9CC65742-70A4-49C6-AC96-6C4219F1AB25} = {9CC65742-70A4-49C6-AC96-6C4219F1AB25}
		{577A7D54-8739-45D6-8A49-89C1E84D7E51} = {577A7D54-8739-45D6-8A49-89C1E84D7E51}
		{A57AE857-8899-4599-AC79-D3E1A4DD4EAE} = {A57AE857-8899-4599-AC79-D3E1A4DD4EAE}
		{055F2F38-D3AB-4A30-A8C6-A7C9A393BB30} = {055F2F38-D3AB-4A30-A8C6-A7C9A393BB30}
		{E0756E58-9FF9-489C-8264-F39BF1A621AC} = {E0756E58-9FF9-489C-8264-F39BF1A621AC}
		{CEC2F065-CAD0-4F3D-8BA0-D2096EC39869} = {CEC2F065-CAD0-4F3D-8BA0-D2096EC39869}
		{8C0C9368-6222-4D60-BB8E-4BABE95F19CC} = {8C0C9368-6222-4D60-BB8E-4BABE95F19CC}
		{6C09EE6B-A1A2-4F0D-B7B0-32647987B49A} = {6C09EE6B-A1A2-4F0D-B7B0-32647987B49A}
		{02BD806D-906C-4B4A-98CA-165337BCD533} = {02BD806D-906C-4B4A-98CA-165337BCD533}
		{DE3BD86E-C8BC-494F-B5EC-FD677F6C4B5E} = {DE3BD86E-C8BC-494F-B5EC-FD677F6C4B5E}
		{D0C8AE72-6699-4198-93C3-FCA91A2B274F} = {D0C8AE72-6699-4198-93C3-FCA91A2B274F}
		{CEACCF73-0618-42BB-B6A1-AC25FCB623F5} = {CEACCF73-0618-42BB-B6A1-AC25FCB623F5}
		{9F53E773-C457-4EB0-8228-5C13156127F4} = {9F53E773-C457-4EB0-8228-5C13156127F4}
		{E6903075-2C80-40F5-9852-173FDB94823F} = {E6903075-2C80-40F5-9852-173FDB94823F}
		{34145676-AEA6-459F-BCC1-6E7C72D6B394} = {34145676-AEA6-459F-BCC1-6E7C72D6B394}
		{7A073879-92A6-4934-B386-37AF30F27B38} = {7A073879-92A6-4934-B386-37AF30F27B38}
		{61E17285-3FAB-44A5-B556-4626A3322631} = {61E17285-3FAB-44A5-B556-4626A3322631}
		{97D16904-207B-4602-ADC5-4D4D34AA421D} = {97D16904-207B-4602-ADC5-4D4D34AA421D}
		{B6EF1001-264C-43BB-8FF9-8F663813E1FC} = {B6EF1001-264C-43BB-8FF9-8F663813E1FC}
		{13D5E98A-50A1-40DF-A992-84CE4B60B16F} = {13D5E98A-50A1-40DF-A992-84CE4B60B16F}
		{E8A0D08B-5CB3-4D75-9088-14A1791DD2BA} = {E8A0D08B-5CB3-4D75-9088-14A1791DD2BA}
		{450E958D-9F67-4A24-AE37-7E5C0681C2C6} = {450E958D-9F67-4A24-AE37-7E5C0681C2C6}
		{E017F898-A6B6-4ACC-8955-F7E98565E00D} = {E017F898-A6B6-4ACC-8955-F7E98565E00D}
		{68B4F899-795B-4A71-84DE-ACACC49CC9EF} = {68B4F899-795B-4A71-84DE-ACACC49CC9EF}
		{1D5003A0-E5EE-4C92-AB78-CD69D96E7047} = {1D5003A0-E5EE-4C92-AB78-CD69D96E7047}
		{0483ABA1-D087-4C60-97AF-F4FBE115F1D5} = {0483ABA1-D087-4C60-97AF-F4FBE115F1D5}
		{DCF397A2-A67E-45CA-9087-840BC223C3DD} = {DCF397A2-A67E-45CA-9087-840BC223C3DD}
		{4D24C1A8-67B5-4154-B758-BD9170E92BBF} = {4D24C1A8-67B5-4154-B758-BD9170E92BBF}
		{C6F8C5AB-4166-4653-9792-C04A9CE3CCD5} = {C6F8C5AB-4166-4653-9792-C04A9CE3CCD5}
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
		{0D52ACBE-DE4F-4197-8BE3-9CE3C98C6120} = {0D52ACBE-DE4F-4197-8BE3-9CE3C98C6120}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{AF7942C6-4E22-4544-B16B-7522DD063EE9} = {AF7942C6-4E22-4544-B16B-7522DD063EE9}
		{B8A3EACB-468E-4F28-BF95-77DD565DD3DC} = {B8A3EACB-468E-4F28-BF95-77DD565DD3DC}
		{5C6560D2-F106-483D-A769-65C1A2F8F99B} = {5C6560D2-F106-483D-A769-65C1A2F8F99B}
		{2E7781DC-C6A0-445B-A32E-3F18C42EDBFF} = {2E7781DC-C6A0-445B-A32E-3F18C42EDBFF}
		{1328A8EF-E103-4472-8A17-0AA93DC8042E} = {1328A8EF-E103-4472-8A17-0AA93DC8042E}
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{F3E3D3F2-E040-4EDB-B311-C5D8AC3B74AB} = {F3E3D3F2-E040-4EDB-B311-C5D8AC3B74AB}
		{F81527F7-49FD-43DD-8337-EB409F5568FB} = {F81527F7-49FD-43DD-8337-EB409F5568FB}
		{5223BCFC-41A4-4758-9DB4-94075FE05C7B} = {5223BCFC-41A4-4758-9DB4-94075FE05C7B}
		{9C2287FD-4991-493F-81A4-41CAA48565CE} = {9C2287FD-4991-493F-81A4-41CAA48565CE}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fast42g", "..\fast42g\fast42g.vcproj", "{498DE300-007F-4D8D-B280-A1ACA20784A8}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fb2pix", "..\fb2pix\fb2pix.vcproj", "{2BFBED31-BB63-49EA-A1DD-11A6F3561681}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{9C2287FD-4991-493F-81A4-41CAA48565CE} = {9C2287FD-4991-493F-81A4-41CAA48565CE}
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E} = {DDD6E20A-8F64-443D-9428-AFB56715AA6E}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fb2png", "..\fb2png\fb2png.vcproj", "{5223BCFC-41A4-4758-9DB4-94075FE05C7B}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{9C2287FD-4991-493F-81A4-41CAA48565CE} = {9C2287FD-4991-493F-81A4-41CAA48565CE}
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{02BD806D-906C-4B4A-98CA-165337BCD533} = {02BD806D-906C-4B4A-98CA-165337BCD533}
		{6C09EE6B-A1A2-4F0D-B7B0-32647987B49A} = {6C09EE6B-A1A2-4F0D-B7B0-32647987B49A}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E} = {DDD6E20A-8F64-443D-9428-AFB56715AA6E}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fbclear", "..\fbclear\fbclear.vcproj", "{CEACCF73-0618-42BB-B6A1-AC25FCB623F5}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E} = {DDD6E20A-8F64-443D-9428-AFB56715AA6E}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fbserv", "..\fbserv\fbserv.vcproj", "{E0391F1A-B376-4EA1-8C49-521B195DB3D3}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{9C2287FD-4991-493F-81A4-41CAA48565CE} = {9C2287FD-4991-493F-81A4-41CAA48565CE}
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E} = {DDD6E20A-8F64-443D-9428-AFB56715AA6E}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g2asc", "..\g2asc\g2asc.vcproj", "{745CE333-57DA-4B3F-B402-1FCACA82D86B}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g2iges", "..\g2iges\g2iges.vcproj", "{FCF25D1B-ED36-46B9-8DA8-2BF8F589C86B}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g2stl", "..\g2stl\g2stl.vcproj", "{B8A3EACB-468E-4F28-BF95-77DD565DD3DC}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "iges2g", "..\iges2g\iges2g.vcproj", "{1328A8EF-E103-4472-8A17-0AA93DC8042E}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "itclstub", "..\itclstub\itclstub.vcproj", "{9CC65742-70A4-49C6-AC96-6C4219F1AB25}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{39785814-94C1-4245-AA56-60ED2C0E1F41} = {39785814-94C1-4245-AA56-60ED2C0E1F41}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "itkstub", "..\itkstub\itkstub.vcproj", "{C6F8C5AB-4166-4653-9792-C04A9CE3CCD5}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{E0756E58-9FF9-489C-8264-F39BF1A621AC} = {E0756E58-9FF9-489C-8264-F39BF1A621AC}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libBLT", "..\libBLT\libBLT.vcproj", "{7A073879-92A6-4934-B386-37AF30F27B38}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{9C2287FD-4991-493F-81A4-41CAA48565CE} = {9C2287FD-4991-493F-81A4-41CAA48565CE}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libItcl", "..\libItcl\libItcl.vcproj", "{39785814-94C1-4245-AA56-60ED2C0E1F41}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{97D16904-207B-4602-ADC5-4D4D34AA421D} = {97D16904-207B-4602-ADC5-4D4D34AA421D}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libItk", "..\libItk\libItk.vcproj", "{E0756E58-9FF9-489C-8264-F39BF1A621AC}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{9C2287FD-4991-493F-81A4-41CAA48565CE} = {9C2287FD-4991-493F-81A4-41CAA48565CE}
		{9CC65742-70A4-49C6-AC96-6C4219F1AB25} = {9CC65742-70A4-49C6-AC96-6C4219F1AB25}
		{97D16904-207B-4602-ADC5-4D4D34AA421D} = {97D16904-207B-4602-ADC5-4D4D34AA421D}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libbn", "..\libbn\libbn.vcproj", "{2794FD11-F9A6-4145-92DE-A05F5A2E6361}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libbu", "..\libbu\libbu.vcproj", "{D2A218BF-FAB3-4BEA-B288-E357FE003E29}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{02BD806D-906C-4B4A-98CA-165337BCD533} = {02BD806D-906C-4B4A-98CA-165337BCD533}
		{6C09EE6B-A1A2-4F0D-B7B0-32647987B49A} = {6C09EE6B-A1A2-4F0D-B7B0-32647987B49A}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libdm", "..\libdm\libdm.vcproj", "{13D5E98A-50A1-40DF-A992-84CE4B60B16F}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{9C2287FD-4991-493F-81A4-41CAA48565CE} = {9C2287FD-4991-493F-81A4-41CAA48565CE}
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
		{E1CBDBEE-887A-4CD8-9D3E-59A52CA2E45E} = {E1CBDBEE-887A-4CD8-9D3E-59A52CA2E45E}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libfb", "..\libfb\libfb.vcproj", "{A0C3B415-61DD-4E5A-B724-D13AA64DA645}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{9C2287FD-4991-493F-81A4-41CAA48565CE} = {9C2287FD-4991-493F-81A4-41CAA48565CE}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E} = {DDD6E20A-8F64-443D-9428-AFB56715AA6E}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "liboptical", "..\liboptical\liboptical.vcproj", "{E017F898-A6B6-4ACC-8955-F7E98565E00D}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libpkg", "..\libpkg\libpkg.vcproj", "{DDD6E20A-8F64-443D-9428-AFB56715AA6E}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "librt", "..\librt\librt.vcproj", "{EA0BB405-25E2-4B31-92D7-97316770F32B}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{DCF397A2-A67E-45CA-9087-840BC223C3DD} = {DCF397A2-A67E-45CA-9087-840BC223C3DD}
		{39172035-CC5F-4140-9118-E1A9AD311FC7} = {39172035-CC5F-4140-9118-E1A9AD311FC7}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libsysv", "..\libsysv\libsysv.vcproj", "{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libtcl", "..\libtcl\libtcl.vcproj", "{5118991D-8BCF-4FE4-981C-F33C9D500E95}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libtclcad", "..\libtclcad\libtclcad.vcproj", "{2E7781DC-C6A0-445B-A32E-3F18C42EDBFF}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{7A073879-92A6-4934-B386-37AF30F27B38} = {7A073879-92A6-4934-B386-37AF30F27B38}
		{E1CBDBEE-887A-4CD8-9D3E-59A52CA2E45E} = {E1CBDBEE-887A-4CD8-9D3E-59A52CA2E45E}
		{39785814-94C1-4245-AA56-60ED2C0E1F41} = {39785814-94C1-4245-AA56-60ED2C0E1F41}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
		{E0756E58-9FF9-489C-8264-F39BF1A621AC} = {E0756E58-9FF9-489C-8264-F39BF1A621AC}
		{13D5E98A-50A1-40DF-A992-84CE4B60B16F} = {13D5E98A-50A1-40DF-A992-84CE4B60B16F}
		{9C2287FD-4991-493F-81A4-41CAA48565CE} = {9C2287FD-4991-493F-81A4-41CAA48565CE}
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libtk", "..\libtk\libtk.vcproj", "{9C2287FD-4991-493F-81A4-41CAA48565CE}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{97D16904-207B-4602-ADC5-4D4D34AA421D} = {97D16904-207B-4602-ADC5-4D4D34AA421D}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libwdb", "..\libwdb\libwdb.vcproj", "{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libz", "..\libz\libz.vcproj", "{02BD806D-906C-4B4A-98CA-165337BCD533}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{B6EF1001-264C-43BB-8FF9-8F663813E1FC} = {B6EF1001-264C-43BB-8FF9-8F663813E1FC}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "mged", "..\mged\mged.vcproj", "{577A7D54-8739-45D6-8A49-89C1E84D7E51}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
		{E1CBDBEE-887A-4CD8-9D3E-59A52CA2E45E} = {E1CBDBEE-887A-4CD8-9D3E-59A52CA2E45E}
		{9C2287FD-4991-493F-81A4-41CAA48565CE} = {9C2287FD-4991-493F-81A4-41CAA48565CE}
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{2E7781DC-C6A0-445B-A32E-3F18C42EDBFF} = {2E7781DC-C6A0-445B-A32E-3F18C42EDBFF}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
		{E017F898-A6B6-4ACC-8955-F7E98565E00D} = {E017F898-A6B6-4ACC-8955-F7E98565E00D}
		{13D5E98A-50A1-40DF-A992-84CE4B60B16F} = {13D5E98A-50A1-40DF-A992-84CE4B60B16F}
		{02BD806D-906C-4B4A-98CA-165337BCD533} = {02BD806D-906C-4B4A-98CA-165337BCD533}
		{6C09EE6B-A1A2-4F0D-B7B0-32647987B49A} = {6C09EE6B-A1A2-4F0D-B7B0-32647987B49A}
		{E0756E58-9FF9-489C-8264-F39BF1A621AC} = {E0756E58-9FF9-489C-8264-F39BF1A621AC}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
		{39785814-94C1-4245-AA56-60ED2C0E1F41} = {39785814-94C1-4245-AA56-60ED2C0E1F41}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E} = {DDD6E20A-8F64-443D-9428-AFB56715AA6E}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "nirt", "..\nirt\nirt.vcproj", "{D0C8AE72-6699-4198-93C3-FCA91A2B274F}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "pix2fb", "..\pix2fb\pix2fb.vcproj", "{9F53E773-C457-4EB0-8228-5C13156127F4}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{9C2287FD-4991-493F-81A4-41CAA48565CE} = {9C2287FD-4991-493F-81A4-41CAA48565CE}
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E} = {DDD6E20A-8F64-443D-9428-AFB56715AA6E}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "png2fb", "..\png2fb\png2fb.vcproj", "{6EC2E706-4704-4F93-985D-DD0945411ABE}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{9C2287FD-4991-493F-81A4-41CAA48565CE} = {9C2287FD-4991-493F-81A4-41CAA48565CE}
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{02BD806D-906C-4B4A-98CA-165337BCD533} = {02BD806D-906C-4B4A-98CA-165337BCD533}
		{6C09EE6B-A1A2-4F0D-B7B0-32647987B49A} = {6C09EE6B-A1A2-4F0D-B7B0-32647987B49A}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E} = {DDD6E20A-8F64-443D-9428-AFB56715AA6E}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rt", "..\rt\rt.vcproj", "{8C0C9368-6222-4D60-BB8E-4BABE95F19CC}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{E017F898-A6B6-4ACC-8955-F7E98565E00D} = {E017F898-A6B6-4ACC-8955-F7E98565E00D}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E} = {DDD6E20A-8F64-443D-9428-AFB56715AA6E}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rtcheck", "..\rtcheck\rtcheck.vcproj", "{68B4F899-795B-4A71-84DE-ACACC49CC9EF}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{E017F898-A6B6-4ACC-8955-F7E98565E00D} = {E017F898-A6B6-4ACC-8955-F7E98565E00D}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E} = {DDD6E20A-8F64-443D-9428-AFB56715AA6E}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rtedge", "..\rtedge\rtedge.vcproj", "{4D24C1A8-67B5-4154-B758-BD9170E92BBF}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{E017F898-A6B6-4ACC-8955-F7E98565E00D} = {E017F898-A6B6-4ACC-8955-F7E98565E00D}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E} = {DDD6E20A-8F64-443D-9428-AFB56715AA6E}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "stl2g", "..\stl2g\stl2g.vcproj", "{AF7942C6-4E22-4544-B16B-7522DD063EE9}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "tclpipe", "..\tclpipe\tclpipe.vcproj", "{450E958D-9F67-4A24-AE37-7E5C0681C2C6}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "tclsh", "..\tclsh\tclsh.vcproj", "{B6EF1001-264C-43BB-8FF9-8F663813E1FC}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{39785814-94C1-4245-AA56-60ED2C0E1F41} = {39785814-94C1-4245-AA56-60ED2C0E1F41}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "tclstub", "..\tclstub\tclstub.vcproj", "{97D16904-207B-4602-ADC5-4D4D34AA421D}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "tkimg", "..\tkimg\tkimg.vcproj", "{61E17285-3FAB-44A5-B556-4626A3322631}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{9C2287FD-4991-493F-81A4-41CAA48565CE} = {9C2287FD-4991-493F-81A4-41CAA48565CE}
		{02BD806D-906C-4B4A-98CA-165337BCD533} = {02BD806D-906C-4B4A-98CA-165337BCD533}
		{6C09EE6B-A1A2-4F0D-B7B0-32647987B49A} = {6C09EE6B-A1A2-4F0D-B7B0-32647987B49A}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{97D16904-207B-4602-ADC5-4D4D34AA421D} = {97D16904-207B-4602-ADC5-4D4D34AA421D}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "tkstub", "..\tkstub\tkstub.vcproj", "{055F2F38-D3AB-4A30-A8C6-A7C9A393BB30}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{9C2287FD-4991-493F-81A4-41CAA48565CE} = {9C2287FD-4991-493F-81A4-41CAA48565CE}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "wish", "..\wish\wish.vcproj", "{A57AE857-8899-4599-AC79-D3E1A4DD4EAE}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{9C2287FD-4991-493F-81A4-41CAA48565CE} = {9C2287FD-4991-493F-81A4-41CAA48565CE}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "dbupgrade", "..\dbupgrade\dbupgrade.vcproj", "{205D4C24-C72D-4269-88A4-8C04595436BC}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libpng", "..\libpng\libpng.vcproj", "{6C09EE6B-A1A2-4F0D-B7B0-32647987B49A}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{02BD806D-906C-4B4A-98CA-165337BCD533} = {02BD806D-906C-4B4A-98CA-165337BCD533}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{97D16904-207B-4602-ADC5-4D4D34AA421D} = {97D16904-207B-4602-ADC5-4D4D34AA421D}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libregex", "..\libregex\libregex.vcproj", "{DCF397A2-A67E-45CA-9087-840BC223C3DD}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rtg3", "..\rtg3\rtg3.vcproj", "{34145676-AEA6-459F-BCC1-6E7C72D6B394}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "bwish", "..\bwish\bwish.vcproj", "{3B28AB18-C065-4426-9802-4A70528CAB55}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{02BD806D-906C-4B4A-98CA-165337BCD533} = {02BD806D-906C-4B4A-98CA-165337BCD533}
		{6C09EE6B-A1A2-4F0D-B7B0-32647987B49A} = {6C09EE6B-A1A2-4F0D-B7B0-32647987B49A}
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E} = {DDD6E20A-8F64-443D-9428-AFB56715AA6E}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{39785814-94C1-4245-AA56-60ED2C0E1F41} = {39785814-94C1-4245-AA56-60ED2C0E1F41}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{E0756E58-9FF9-489C-8264-F39BF1A621AC} = {E0756E58-9FF9-489C-8264-F39BF1A621AC}
		{7A073879-92A6-4934-B386-37AF30F27B38} = {7A073879-92A6-4934-B386-37AF30F27B38}
		{13D5E98A-50A1-40DF-A992-84CE4B60B16F} = {13D5E98A-50A1-40DF-A992-84CE4B60B16F}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{2E7781DC-C6A0-445B-A32E-3F18C42EDBFF} = {2E7781DC-C6A0-445B-A32E-3F18C42EDBFF}
		{9C2287FD-4991-493F-81A4-41CAA48565CE} = {9C2287FD-4991-493F-81A4-41CAA48565CE}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "btclsh", "..\btclsh\btclsh.vcproj", "{DE92C423-14C5-4604-8539-174D0B911548}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rtarea", "..\rtarea\rtarea.vcproj", "{0D52ACBE-DE4F-4197-8BE3-9CE3C98C6120}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rtweight", "..\rtweight\rtweight.vcproj", "{F81527F7-49FD-43DD-8337-EB409F5568FB}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rt_bot_faces", "..\rt_bot_faces\rt_bot_faces.vcproj", "{E6903075-2C80-40F5-9852-173FDB94823F}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rtcell", "..\rtcell\rtcell.vcproj", "{5C6560D2-F106-483D-A769-65C1A2F8F99B}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rtfrac", "..\rtfrac\rtfrac.vcproj", "{628CDD07-CCCB-4D7C-A290-FB6AE0125C64}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rthide", "..\rthide\rthide.vcproj", "{E8A0D08B-5CB3-4D75-9088-14A1791DD2BA}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rtpp", "..\rtpp\rtpp.vcproj", "{8003B222-7F4E-4723-BC1F-67B1F9825697}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rtsil", "..\rtsil\rtsil.vcproj", "{CEC2F065-CAD0-4F3D-8BA0-D2096EC39869}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rtxray", "..\rtxray\rtxray.vcproj", "{0483ABA1-D087-4C60-97AF-F4FBE115F1D5}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rtrange", "..\rtrange\rtrange.vcproj", "{F3E3D3F2-E040-4EDB-B311-C5D8AC3B74AB}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rtrad", "..\rtrad\rtrad.vcproj", "{DE3BD86E-C8BC-494F-B5EC-FD677F6C4B5E}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rtray", "..\rtray\rtray.vcproj", "{1D5003A0-E5EE-4C92-AB78-CD69D96E7047}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "bw2fb", "..\bw2fb\bw2fb.vcproj", "{D1570343-3EFA-4CE2-9B7C-BE86CA55419C}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "cat2fb", "..\cat2fb\cat2fb.vcproj", "{1175F2CB-89F3-49E6-B36A-1E9131EFB0B3}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "cell2fb", "..\cell2fb\cell2fb.vcproj", "{7D9EFAD3-8421-4E30-9BCD-B5AC3A4F49AC}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "cmap2fb", "..\cmap2fb\cmap2fb.vcproj", "{E9EE5A7D-2B6A-4DE6-8CAC-E9B480A5AB1C}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fb2bw", "..\fb2bw\fb2bw.vcproj", "{AB238A03-1A8E-4C47-BECE-99FE6C6F4A05}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fb2cmap", "..\fb2cmap\fb2cmap.vcproj", "{56FCC7E5-3FF4-4D58-A98B-17FC61EED23E}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fb2fb", "..\fb2fb\fb2fb.vcproj", "{710D2DFF-F5EC-4CEF-AC2A-1EF82CD77529}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fb2orle", "..\fb2orle\fb2orle.vcproj", "{833924C7-6699-4EE2-9F98-8F99AF353320}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{8E5A0431-1B2B-4747-BC1B-C98DA9F235F1} = {8E5A0431-1B2B-4747-BC1B-C98DA9F235F1}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fb2rle", "..\fb2rle\fb2rle.vcproj", "{8AD44D67-1AC8-457C-85D2-FE6EF5B521FB}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{F18C621B-9494-4577-9681-5560FD804961} = {F18C621B-9494-4577-9681-5560FD804961}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fbanim", "..\fbanim\fbanim.vcproj", "{3CDADF62-9D58-450C-AAC1-EE4FD538F95A}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fbcbars", "..\fbcbars\fbcbars.vcproj", "{56F0C668-4CDC-45E3-A314-1AD7BD56F1CC}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fbcmap", "..\fbcmap\fbcmap.vcproj", "{83E85317-4E4F-40E1-962A-9DB431F04518}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fbcmrot", "..\fbcmrot\fbcmrot.vcproj", "{87F8BBDD-336D-4AC7-A9A7-A16FBC36AB77}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fbfade", "..\fbfade\fbfade.vcproj", "{C0D7A41D-BA23-4D99-AFF6-CAFBFF2D8208}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fbframe", "..\fbframe\fbframe.vcproj", "{FDDF8226-7F61-426C-8E72-0C9D1D4D162E}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fbfree", "..\fbfree\fbfree.vcproj", "{A6E558D9-08B9-443A-A960-D9F3A37AF761}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fbgamma", "..\fbgamma\fbgamma.vcproj", "{2B626467-57B0-455D-864D-D414F3A02906}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fbgammamod", "..\fbgammamod\fbgammamod.vcproj", "{50CB475A-282F-4808-B7BE-F4DE5F6F7C4D}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fbgrid", "..\fbgrid\fbgrid.vcproj", "{8C71527A-A25B-4F6F-918E-C2B851228D24}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fbhelp", "..\fbhelp\fbhelp.vcproj", "{C7A513F6-CE58-4994-8A2D-DFEBFD983C1C}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fblabel", "..\fblabel\fblabel.vcproj", "{019FBAAF-1B8B-4075-B541-FCD7DBD4683E}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fbline", "..\fbline\fbline.vcproj", "{9EAB9A5B-5AAC-4235-8E27-8A53C65A4FE5}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fbscanplot", "..\fbscanplot\fbscanplot.vcproj", "{DAE56F2B-C9B0-4ABC-B8AC-86C5B0674996}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fbstretch", "..\fbstretch\fbstretch.vcproj", "{DD5AE094-8CAD-43CA-98E9-64E7981E774C}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "gif2fb", "..\gif2fb\gif2fb.vcproj", "{31A584D9-BA90-408C-881D-82CE2749406E}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "orle2fb", "..\orle2fb\orle2fb.vcproj", "{2B79C3E5-CC13-44A6-891C-94CDF48EB71D}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{8E5A0431-1B2B-4747-BC1B-C98DA9F235F1} = {8E5A0431-1B2B-4747-BC1B-C98DA9F235F1}
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "pixautosize", "..\pixautosize\pixautosize.vcproj", "{5249ED07-8BFC-4BE2-9DBA-3358C8870073}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "pixflip2fb", "..\pixflip2fb\pixflip2fb.vcproj", "{2C95E9AF-0760-45B6-BEB2-EC3380DA3AB9}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "pl2fb", "..\pl2fb\pl2fb.vcproj", "{CE5AABAF-F69B-4444-AB48-1B0E75ADECE4}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "polar2fb", "..\polar2fb\polar2fb.vcproj", "{6F9D7089-4CA0-4264-8DF0-73DA93F99B47}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rle2fb", "..\rle2fb\rle2fb.vcproj", "{CB7F3419-E0D8-4C76-B36C-AAE8A0D502E0}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645} = {A0C3B415-61DD-4E5A-B724-D13AA64DA645}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libutahrle", "..\libutahrle\libutahrle.vcproj", "{F18C621B-9494-4577-9681-5560FD804961}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "liborle", "..\liborle\liborle.vcproj", "{8E5A0431-1B2B-4747-BC1B-C98DA9F235F1}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "bw2pix", "..\bw2pix\bw2pix.vcproj", "{66BE4AAC-F6A7-4F33-9DAA-6F9338BBE449}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "bwmod", "..\bwmod\bwmod.vcproj", "{C81D1A24-DCDE-4103-A36D-927298479DAC}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "pix2bw", "..\pix2bw\pix2bw.vcproj", "{9E54D0E6-0A23-4610-B528-BFC41BACC495}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "pixmatte", "..\pixmatte\pixmatte.vcproj", "{B3F5BAE5-F982-4F37-B6A6-BCB304C35F9F}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "asc2pix", "..\asc2pix\asc2pix.vcproj", "{55EF9C3D-C44C-4AC6-8605-0D9D20883A95}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "pix2asc", "..\pix2asc\pix2asc.vcproj", "{009F96D0-B85A-43E3-82ED-E0FA60AA9E00}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "asc2nmg", "..\asc2nmg\asc2nmg.vcproj", "{4B01B90E-DD69-42B5-9C81-A6490DCE7F2A}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "bot2bldxf", "..\bot2bldxf\bot2bldxf.vcproj", "{62790B43-1B04-4CDD-B845-CB1B93C4D6D9}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "bot_shell2vtk", "..\bot_shell2vtk\bot_shell2vtk.vcproj", "{58BB0769-6E8A-4B8F-8D7B-5D9C73753AED}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "cy2g", "..\cy2g\cy2g.vcproj", "{FCC4FACF-0E34-4055-9FBE-52CCFB580C43}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "dxf2g", "..\dxf2g\dxf2g.vcproj", "{15F4E74B-EB09-44EF-BF9F-58A717110998}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "enf2g", "..\enf2g\enf2g.vcproj", "{C9E54C27-2594-496E-AD4E-A3715451B893}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "euclid_format", "..\euclid_format\euclid_format.vcproj", "{2A267AE0-DE6A-43B4-B66B-3E45A6296D97}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "euclid2g", "..\euclid2g\euclid2g.vcproj", "{52D029D3-2E9B-4C45-AFAC-262BCACB1EB4}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g42g5", "..\g42g5\g42g5.vcproj", "{7FD5F07A-7E92-46FB-BDA7-629D63A2F765}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g52g4", "..\g52g4\g52g4.vcproj", "{92DCD0D2-FBB9-428F-BEC3-59E3E2D8CF85}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g2acad", "..\g2acad\g2acad.vcproj", "{77BCE68D-4133-440B-A3FC-F428073DBBA7}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g2adrt", "..\g2adrt\g2adrt.vcproj", "{F3818CEB-DC17-4D69-B1EB-E21A8CF57173}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g2dxf", "..\g2dxf\g2dxf.vcproj", "{44390B3D-EEE6-4806-B4CF-B6FAF29526C8}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g2euclid1", "..\g2euclid1\g2euclid1.vcproj", "{C60D4A83-B183-48AE-B257-1005E4BE5B1B}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g2euclid", "..\g2euclid\g2euclid.vcproj", "{EA23DDDC-D84B-44AA-8691-A40735CCFE84}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g2nff", "..\g2nff\g2nff.vcproj", "{E447C251-D8DD-452B-994B-B3D601D04B64}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g2nmg", "..\g2nmg\g2nmg.vcproj", "{F3AFA98C-ECEE-49F0-AB60-8579FFA60600}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g2obj", "..\g2obj\g2obj.vcproj", "{41256139-B6AC-4327-A592-CFD7BD83F2D3}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g2shellrect", "..\g2shellrect\g2shellrect.vcproj", "{1D741684-4AD1-4249-9CDD-C4AA3B820A31}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g2tankill", "..\g2tankill\g2tankill.vcproj", "{4603FC48-5B5B-4749-8B91-EF7FAC2826C7}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g2var", "..\g2var\g2var.vcproj", "{C741E930-C63B-4027-B4A9-0B0C1EAC6CEA}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g2vrml", "..\g2vrml\g2vrml.vcproj", "{823B3040-6519-43F6-9918-FAD1FC984F2C}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g2x3d", "..\g2x3d\g2x3d.vcproj", "{3E554F5A-C1DB-4154-ADA4-64F63BB12079}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "nastran2g", "..\nastran2g\nastran2g.vcproj", "{90A561F7-55CF-4786-A512-D8CD57F474B7}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "nmg2bot", "..\nmg2bot\nmg2bot.vcproj", "{27134393-7B6C-4CA9-8D75-168B28689196}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "nmg2rib", "..\nmg2rib\nmg2rib.vcproj", "{C299A4AC-C6FB-4D3E-98DD-8721E009EBFD}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "nmg2sgp", "..\nmg2sgp\nmg2sgp.vcproj", "{7673FFDD-DE1B-4A60-B2E1-8102BB5C5502}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "ply2g", "..\ply2g\ply2g.vcproj", "{670535C0-2433-4930-84D9-A85576060B4A}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "vg2g", "..\vg2g\vg2g.vcproj", "{3467416B-5124-4C71-BEA2-7A285B52F074}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "euclid_unformat", "..\euclid_unformat\euclid_unformat.vcproj", "{329A8233-5D7F-4C87-9515-894ABB32B7BF}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "poly2bot", "..\poly2bot\poly2bot.vcproj", "{1B396184-C850-4D07-9C2B-0E0B2E2A5561}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "tankill2g", "..\tankill2g\tankill2g.vcproj", "{97E28CAB-D0A9-4270-8673-633228E8B24C}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "opennurbs", "..\opennurbs\opennurbs.vcproj", "{39172035-CC5F-4140-9118-E1A9AD311FC7}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "breplicator", "..\breplicator\breplicator.vcproj", "{42B3AC73-54AF-4B99-BF5E-9953B2831BB9}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libged", "..\libged\libged.vcproj", "{E1CBDBEE-887A-4CD8-9D3E-59A52CA2E45E}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB} = {14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29} = {D2A218BF-FAB3-4BEA-B288-E357FE003E29}
		{DCF397A2-A67E-45CA-9087-840BC223C3DD} = {DCF397A2-A67E-45CA-9087-840BC223C3DD}
		{39172035-CC5F-4140-9118-E1A9AD311FC7} = {39172035-CC5F-4140-9118-E1A9AD311FC7}
		{5118991D-8BCF-4FE4-981C-F33C9D500E95} = {5118991D-8BCF-4FE4-981C-F33C9D500E95}
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361} = {2794FD11-F9A6-4145-92DE-A05F5A2E6361}
		{EA0BB405-25E2-4B31-92D7-97316770F32B} = {EA0BB405-25E2-4B31-92D7-97316770F32B}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "tire", "..\tire\tire.vcproj", "{D4B7A4C2-1029-4273-8DA1-232668DD7B0F}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "bottest", "..\bottest\bottest.vcproj", "{1108C81D-B787-4D05-94F6-493818D691DE}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "brep_cube", "..\brep_cube\brep_cube.vcproj", "{2EC27263-901B-4753-9969-5DDD549D7E30}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "brep_simple", "..\brep_simple\brep_simple.vcproj", "{ED148ED9-BC56-4B18-8D67-1B81113AE659}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "brickwall", "..\brickwall\brickwall.vcproj", "{DA1F0F34-AC10-497B-9AD2-3811AEDF6A7A}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "clutter", "..\clutter\clutter.vcproj", "{0B006084-5491-4DD1-9FD4-31186BDE3D8E}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "contours", "..\contours\contours.vcproj", "{F40E65B1-8ACB-404F-844D-F8295FFB22AE}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "fence", "..\fence\fence.vcproj", "{0462B3DE-9208-422D-8C61-C90FDD2D97DF}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "globe", "..\globe\globe.vcproj", "{84A07C8F-F16F-4C4F-8EA9-45479D0D5D9D}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "kurt", "..\kurt\kurt.vcproj", "{694236F7-9275-4AF7-BE74-A5C7172A4083}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "masonry", "..\masonry\masonry.vcproj", "{0F0DBACF-7B8D-437C-8C6F-E6551E6EEF90}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "molecule", "..\molecule\molecule.vcproj", "{2291A1E3-66FC-4B08-AB12-226C1C673045}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "nmgmodel", "..\nmgmodel\nmgmodel.vcproj", "{0BBA21A9-83D4-47C5-93C6-DAC1BB40DF75}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "picket_fence", "..\picket_fence\picket_fence.vcproj", "{B808DF2C-A716-42C9-B45D-E84E992A89C3}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "pipe", "..\pipe\pipe.vcproj", "{7020A3F7-F14D-4E46-882D-0F7FBC2D9465}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "pipetest", "..\pipetest\pipetest.vcproj", "{340D6D9D-548F-4456-B6F3-1AEC4B245C23}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "pix2g", "..\pix2g\pix2g.vcproj", "{BF1A3D2B-25FA-467B-B623-916226AFF814}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "pyramid", "..\pyramid\pyramid.vcproj", "{BF1B074F-988C-45D5-89AD-D3A4430F8586}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "rawbot", "..\rawbot\rawbot.vcproj", "{30CE183D-D9EE-4E08-8437-1E59E122752A}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "room", "..\room\room.vcproj", "{B77BBD3A-2E8D-419E-B67B-B4D35125E09D}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "sketch", "..\sketch\sketch.vcproj", "{E2E1E0DC-2CA6-4505-93F5-4F4DBDE9B8C5}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "sphflake", "..\sphflake\sphflake.vcproj", "{DB43C7A5-070F-4406-9F8F-0723C45C07F8}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "spltest", "..\spltest\spltest.vcproj", "{ECA5A83E-CC0F-4C24-A7FD-ABA88C50AD3D}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "tea", "..\tea\tea.vcproj", "{952DA1EF-7A1E-4F7C-8D5B-FFCA8EFC78F4}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "tea_nmg", "..\tea_nmg\tea_nmg.vcproj", "{8BD91101-F6B7-4572-B041-6CB62070C88E}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "terrain", "..\terrain\terrain.vcproj", "{9DF3EA82-FE68-44E7-9B35-F89979B5A243}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "torii", "..\torii\torii.vcproj", "{A8FA38A0-67C2-4175-888C-6F955DCC8FF4}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "tube", "..\tube\tube.vcproj", "{A6DB21F3-6DB4-4A1B-851D-49D3AA39E423}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "vegitation", "..\vegitation\vegitation.vcproj", "{EAEF35E8-AA1A-43BC-B644-436BDF0AB0B4}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "wdb_example", "..\wdb_example\wdb_example.vcproj", "{C259E547-8375-4DAD-923A-EA47EAE44628}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB} = {333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "bot_dump", "..\bot_dump\bot_dump.vcproj", "{F10997E6-057E-4B43-BC51-369D6A5AB20B}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{E1CBDBEE-887A-4CD8-9D3E-59A52CA2E45E} = {E1CBDBEE-887A-4CD8-9D3E-59A52CA2E45E}
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "libgcv", "..\libgcv\libgcv.vcproj", "{1D505749-0F4C-4A47-8B06-8EBAA502451D}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
EndProject
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "g_qa", "..\g_qa\g_qa.vcproj", "{C7AFA1EC-8D74-4715-B49A-59D597022904}"
	ProjectSection(WebsiteProperties) = preProject
		Debug.AspNetCompiler.Debug = "True"
		Release.AspNetCompiler.Debug = "False"
	EndProjectSection
	ProjectSection(ProjectDependencies) = postProject
		{E1CBDBEE-887A-4CD8-9D3E-59A52CA2E45E} = {E1CBDBEE-887A-4CD8-9D3E-59A52CA2E45E}
	EndProjectSection
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Release|Win32 = Release|Win32
		Release|x64 = Release|x64
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{06005C89-D349-4B29-BFBB-9A3F7CCF18E5}.Release|Win32.ActiveCfg = Release|Win32
		{06005C89-D349-4B29-BFBB-9A3F7CCF18E5}.Release|Win32.Build.0 = Release|Win32
		{06005C89-D349-4B29-BFBB-9A3F7CCF18E5}.Release|x64.ActiveCfg = Release|x64
		{06005C89-D349-4B29-BFBB-9A3F7CCF18E5}.Release|x64.Build.0 = Release|x64
		{498DE300-007F-4D8D-B280-A1ACA20784A8}.Release|Win32.ActiveCfg = Release|Win32
		{498DE300-007F-4D8D-B280-A1ACA20784A8}.Release|Win32.Build.0 = Release|Win32
		{498DE300-007F-4D8D-B280-A1ACA20784A8}.Release|x64.ActiveCfg = Release|x64
		{498DE300-007F-4D8D-B280-A1ACA20784A8}.Release|x64.Build.0 = Release|x64
		{2BFBED31-BB63-49EA-A1DD-11A6F3561681}.Release|Win32.ActiveCfg = Release|Win32
		{2BFBED31-BB63-49EA-A1DD-11A6F3561681}.Release|Win32.Build.0 = Release|Win32
		{2BFBED31-BB63-49EA-A1DD-11A6F3561681}.Release|x64.ActiveCfg = Release|x64
		{2BFBED31-BB63-49EA-A1DD-11A6F3561681}.Release|x64.Build.0 = Release|x64
		{5223BCFC-41A4-4758-9DB4-94075FE05C7B}.Release|Win32.ActiveCfg = Release|Win32
		{5223BCFC-41A4-4758-9DB4-94075FE05C7B}.Release|Win32.Build.0 = Release|Win32
		{5223BCFC-41A4-4758-9DB4-94075FE05C7B}.Release|x64.ActiveCfg = Release|x64
		{5223BCFC-41A4-4758-9DB4-94075FE05C7B}.Release|x64.Build.0 = Release|x64
		{CEACCF73-0618-42BB-B6A1-AC25FCB623F5}.Release|Win32.ActiveCfg = Release|Win32
		{CEACCF73-0618-42BB-B6A1-AC25FCB623F5}.Release|Win32.Build.0 = Release|Win32
		{CEACCF73-0618-42BB-B6A1-AC25FCB623F5}.Release|x64.ActiveCfg = Release|x64
		{CEACCF73-0618-42BB-B6A1-AC25FCB623F5}.Release|x64.Build.0 = Release|x64
		{E0391F1A-B376-4EA1-8C49-521B195DB3D3}.Release|Win32.ActiveCfg = Release|Win32
		{E0391F1A-B376-4EA1-8C49-521B195DB3D3}.Release|Win32.Build.0 = Release|Win32
		{E0391F1A-B376-4EA1-8C49-521B195DB3D3}.Release|x64.ActiveCfg = Release|x64
		{E0391F1A-B376-4EA1-8C49-521B195DB3D3}.Release|x64.Build.0 = Release|x64
		{745CE333-57DA-4B3F-B402-1FCACA82D86B}.Release|Win32.ActiveCfg = Release|Win32
		{745CE333-57DA-4B3F-B402-1FCACA82D86B}.Release|Win32.Build.0 = Release|Win32
		{745CE333-57DA-4B3F-B402-1FCACA82D86B}.Release|x64.ActiveCfg = Release|x64
		{745CE333-57DA-4B3F-B402-1FCACA82D86B}.Release|x64.Build.0 = Release|x64
		{FCF25D1B-ED36-46B9-8DA8-2BF8F589C86B}.Release|Win32.ActiveCfg = Release|Win32
		{FCF25D1B-ED36-46B9-8DA8-2BF8F589C86B}.Release|Win32.Build.0 = Release|Win32
		{FCF25D1B-ED36-46B9-8DA8-2BF8F589C86B}.Release|x64.ActiveCfg = Release|x64
		{FCF25D1B-ED36-46B9-8DA8-2BF8F589C86B}.Release|x64.Build.0 = Release|x64
		{B8A3EACB-468E-4F28-BF95-77DD565DD3DC}.Release|Win32.ActiveCfg = Release|Win32
		{B8A3EACB-468E-4F28-BF95-77DD565DD3DC}.Release|Win32.Build.0 = Release|Win32
		{B8A3EACB-468E-4F28-BF95-77DD565DD3DC}.Release|x64.ActiveCfg = Release|x64
		{B8A3EACB-468E-4F28-BF95-77DD565DD3DC}.Release|x64.Build.0 = Release|x64
		{1328A8EF-E103-4472-8A17-0AA93DC8042E}.Release|Win32.ActiveCfg = Release|Win32
		{1328A8EF-E103-4472-8A17-0AA93DC8042E}.Release|Win32.Build.0 = Release|Win32
		{1328A8EF-E103-4472-8A17-0AA93DC8042E}.Release|x64.ActiveCfg = Release|x64
		{1328A8EF-E103-4472-8A17-0AA93DC8042E}.Release|x64.Build.0 = Release|x64
		{9CC65742-70A4-49C6-AC96-6C4219F1AB25}.Release|Win32.ActiveCfg = Release|Win32
		{9CC65742-70A4-49C6-AC96-6C4219F1AB25}.Release|Win32.Build.0 = Release|Win32
		{9CC65742-70A4-49C6-AC96-6C4219F1AB25}.Release|x64.ActiveCfg = Release|x64
		{9CC65742-70A4-49C6-AC96-6C4219F1AB25}.Release|x64.Build.0 = Release|x64
		{C6F8C5AB-4166-4653-9792-C04A9CE3CCD5}.Release|Win32.ActiveCfg = Release|Win32
		{C6F8C5AB-4166-4653-9792-C04A9CE3CCD5}.Release|Win32.Build.0 = Release|Win32
		{C6F8C5AB-4166-4653-9792-C04A9CE3CCD5}.Release|x64.ActiveCfg = Release|x64
		{C6F8C5AB-4166-4653-9792-C04A9CE3CCD5}.Release|x64.Build.0 = Release|x64
		{7A073879-92A6-4934-B386-37AF30F27B38}.Release|Win32.ActiveCfg = Release|Win32
		{7A073879-92A6-4934-B386-37AF30F27B38}.Release|Win32.Build.0 = Release|Win32
		{7A073879-92A6-4934-B386-37AF30F27B38}.Release|x64.ActiveCfg = Release|x64
		{7A073879-92A6-4934-B386-37AF30F27B38}.Release|x64.Build.0 = Release|x64
		{39785814-94C1-4245-AA56-60ED2C0E1F41}.Release|Win32.ActiveCfg = Release|Win32
		{39785814-94C1-4245-AA56-60ED2C0E1F41}.Release|Win32.Build.0 = Release|Win32
		{39785814-94C1-4245-AA56-60ED2C0E1F41}.Release|x64.ActiveCfg = Release|x64
		{39785814-94C1-4245-AA56-60ED2C0E1F41}.Release|x64.Build.0 = Release|x64
		{E0756E58-9FF9-489C-8264-F39BF1A621AC}.Release|Win32.ActiveCfg = Release|Win32
		{E0756E58-9FF9-489C-8264-F39BF1A621AC}.Release|Win32.Build.0 = Release|Win32
		{E0756E58-9FF9-489C-8264-F39BF1A621AC}.Release|x64.ActiveCfg = Release|x64
		{E0756E58-9FF9-489C-8264-F39BF1A621AC}.Release|x64.Build.0 = Release|x64
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361}.Release|Win32.ActiveCfg = Release|Win32
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361}.Release|Win32.Build.0 = Release|Win32
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361}.Release|x64.ActiveCfg = Release|x64
		{2794FD11-F9A6-4145-92DE-A05F5A2E6361}.Release|x64.Build.0 = Release|x64
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29}.Release|Win32.ActiveCfg = Release|Win32
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29}.Release|Win32.Build.0 = Release|Win32
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29}.Release|x64.ActiveCfg = Release|x64
		{D2A218BF-FAB3-4BEA-B288-E357FE003E29}.Release|x64.Build.0 = Release|x64
		{13D5E98A-50A1-40DF-A992-84CE4B60B16F}.Release|Win32.ActiveCfg = Release|Win32
		{13D5E98A-50A1-40DF-A992-84CE4B60B16F}.Release|Win32.Build.0 = Release|Win32
		{13D5E98A-50A1-40DF-A992-84CE4B60B16F}.Release|x64.ActiveCfg = Release|x64
		{13D5E98A-50A1-40DF-A992-84CE4B60B16F}.Release|x64.Build.0 = Release|x64
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645}.Release|Win32.ActiveCfg = Release|Win32
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645}.Release|Win32.Build.0 = Release|Win32
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645}.Release|x64.ActiveCfg = Release|x64
		{A0C3B415-61DD-4E5A-B724-D13AA64DA645}.Release|x64.Build.0 = Release|x64
		{E017F898-A6B6-4ACC-8955-F7E98565E00D}.Release|Win32.ActiveCfg = Release|Win32
		{E017F898-A6B6-4ACC-8955-F7E98565E00D}.Release|Win32.Build.0 = Release|Win32
		{E017F898-A6B6-4ACC-8955-F7E98565E00D}.Release|x64.ActiveCfg = Release|x64
		{E017F898-A6B6-4ACC-8955-F7E98565E00D}.Release|x64.Build.0 = Release|x64
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E}.Release|Win32.ActiveCfg = Release|Win32
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E}.Release|Win32.Build.0 = Release|Win32
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E}.Release|x64.ActiveCfg = Release|x64
		{DDD6E20A-8F64-443D-9428-AFB56715AA6E}.Release|x64.Build.0 = Release|x64
		{EA0BB405-25E2-4B31-92D7-97316770F32B}.Release|Win32.ActiveCfg = Release|Win32
		{EA0BB405-25E2-4B31-92D7-97316770F32B}.Release|Win32.Build.0 = Release|Win32
		{EA0BB405-25E2-4B31-92D7-97316770F32B}.Release|x64.ActiveCfg = Release|x64
		{EA0BB405-25E2-4B31-92D7-97316770F32B}.Release|x64.Build.0 = Release|x64
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}.Release|Win32.ActiveCfg = Release|Win32
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}.Release|Win32.Build.0 = Release|Win32
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}.Release|x64.ActiveCfg = Release|x64
		{14E44CF2-49E1-4D8E-B23B-28B7824ED6FB}.Release|x64.Build.0 = Release|x64
		{5118991D-8BCF-4FE4-981C-F33C9D500E95}.Release|Win32.ActiveCfg = Release|Win32
		{5118991D-8BCF-4FE4-981C-F33C9D500E95}.Release|Win32.Build.0 = Release|Win32
		{5118991D-8BCF-4FE4-981C-F33C9D500E95}.Release|x64.ActiveCfg = Release|x64
		{5118991D-8BCF-4FE4-981C-F33C9D500E95}.Release|x64.Build.0 = Release|x64
		{2E7781DC-C6A0-445B-A32E-3F18C42EDBFF}.Release|Win32.ActiveCfg = Release|Win32
		{2E7781DC-C6A0-445B-A32E-3F18C42EDBFF}.Release|Win32.Build.0 = Release|Win32
		{2E7781DC-C6A0-445B-A32E-3F18C42EDBFF}.Release|x64.ActiveCfg = Release|x64
		{2E7781DC-C6A0-445B-A32E-3F18C42EDBFF}.Release|x64.Build.0 = Release|x64
		{9C2287FD-4991-493F-81A4-41CAA48565CE}.Release|Win32.ActiveCfg = Release|Win32
		{9C2287FD-4991-493F-81A4-41CAA48565CE}.Release|Win32.Build.0 = Release|Win32
		{9C2287FD-4991-493F-81A4-41CAA48565CE}.Release|x64.ActiveCfg = Release|x64
		{9C2287FD-4991-493F-81A4-41CAA48565CE}.Release|x64.Build.0 = Release|x64
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}.Release|Win32.ActiveCfg = Release|Win32
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}.Release|Win32.Build.0 = Release|Win32
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}.Release|x64.ActiveCfg = Release|x64
		{333C38B9-BD2E-4D34-98DD-69E9B5E56ECB}.Release|x64.Build.0 = Release|x64
		{02BD806D-906C-4B4A-98CA-165337BCD533}.Release|Win32.ActiveCfg = Release|Win32
		{02BD806D-906C-4B4A-98CA-165337BCD533}.Release|Win32.Build.0 = Release|Win32
		{02BD806D-906C-4B4A-98CA-165337BCD533}.Release|x64.ActiveCfg = Release|x64
		{02BD806D-906C-4B4A-98CA-165337BCD533}.Release|x64.Build.0 = Release|x64
		{577A7D54-8739-45D6-8A49-89C1E84D7E51}.Release|Win32.ActiveCfg = Release|Win32
		{577A7D54-8739-45D6-8A49-89C1E84D7E51}.Release|Win32.Build.0 = Release|Win32
		{577A7D54-8739-45D6-8A49-89C1E84D7E51}.Release|x64.ActiveCfg = Release|x64
		{577A7D54-8739-45D6-8A49-89C1E84D7E51}.Release|x64.Build.0 = Release|x64
		{D0C8AE72-6699-4198-93C3-FCA91A2B274F}.Release|Win32.ActiveCfg = Release|Win32
		{D0C8AE72-6699-4198-93C3-FCA91A2B274F}.Release|Win32.Build.0 = Release|Win32
		{D0C8AE72-6699-4198-93C3-FCA91A2B274F}.Release|x64.ActiveCfg = Release|x64
		{D0C8AE72-6699-4198-93C3-FCA91A2B274F}.Release|x64.Build.0 = Release|x64
		{9F53E773-C457-4EB0-8228-5C13156127F4}.Release|Win32.ActiveCfg = Release|Win32
		{9F53E773-C457-4EB0-8228-5C13156127F4}.Release|Win32.Build.0 = Release|Win32
		{9F53E773-C457-4EB0-8228-5C13156127F4}.Release|x64.ActiveCfg = Release|x64
		{9F53E773-C457-4EB0-8228-5C13156127F4}.Release|x64.Build.0 = Release|x64
		{6EC2E706-4704-4F93-985D-DD0945411ABE}.Release|Win32.ActiveCfg = Release|Win32
		{6EC2E706-4704-4F93-985D-DD0945411ABE}.Release|Win32.Build.0 = Release|Win32
		{6EC2E706-4704-4F93-985D-DD0945411ABE}.Release|x64.ActiveCfg = Release|x64
		{6EC2E706-4704-4F93-985D-DD0945411ABE}.Release|x64.Build.0 = Release|x64
		{8C0C9368-6222-4D60-BB8E-4BABE95F19CC}.Release|Win32.ActiveCfg = Release|Win32
		{8C0C9368-6222-4D60-BB8E-4BABE95F19CC}.Release|Win32.Build.0 = Release|Win32
		{8C0C9368-6222-4D60-BB8E-4BABE95F19CC}.Release|x64.ActiveCfg = Release|x64
		{8C0C9368-6222-4D60-BB8E-4BABE95F19CC}.Release|x64.Build.0 = Release|x64
		{68B4F899-795B-4A71-84DE-ACACC49CC9EF}.Release|Win32.ActiveCfg = Release|Win32
		{68B4F899-795B-4A71-84DE-ACACC49CC9EF}.Release|Win32.Build.0 = Release|Win32
		{68B4F899-795B-4A71-84DE-ACACC49CC9EF}.Release|x64.ActiveCfg = Release|x64
		{68B4F899-795B-4A71-84DE-ACACC49CC9EF}.Release|x64.Build.0 = Release|x64
		{4D24C1A8-67B5-4154-B758-BD9170E92BBF}.Release|Win32.ActiveCfg = Release|Win32
		{4D24C1A8-67B5-4154-B758-BD9170E92BBF}.Release|Win32.Build.0 = Release|Win32
		{4D24C1A8-67B5-4154-B758-BD9170E92BBF}.Release|x64.ActiveCfg = Release|x64
		{4D24C1A8-67B5-4154-B758-BD9170E92BBF}.Release|x64.Build.0 = Release|x64
		{AF7942C6-4E22-4544-B16B-7522DD063EE9}.Release|Win32.ActiveCfg = Release|Win32
		{AF7942C6-4E22-4544-B16B-7522DD063EE9}.Release|Win32.Build.0 = Release|Win32
		{AF7942C6-4E22-4544-B16B-7522DD063EE9}.Release|x64.ActiveCfg = Release|x64
		{AF7942C6-4E22-4544-B16B-7522DD063EE9}.Release|x64.Build.0 = Release|x64
		{450E958D-9F67-4A24-AE37-7E5C0681C2C6}.Release|Win32.ActiveCfg = Release|Win32
		{450E958D-9F67-4A24-AE37-7E5C0681C2C6}.Release|Win32.Build.0 = Release|Win32
		{450E958D-9F67-4A24-AE37-7E5C0681C2C6}.Release|x64.ActiveCfg = Release|x64
		{450E958D-9F67-4A24-AE37-7E5C0681C2C6}.Release|x64.Build.0 = Release|x64
		{B6EF1001-264C-43BB-8FF9-8F663813E1FC}.Release|Win32.ActiveCfg = Release|Win32
		{B6EF1001-264C-43BB-8FF9-8F663813E1FC}.Release|Win32.Build.0 = Release|Win32
		{B6EF1001-264C-43BB-8FF9-8F663813E1FC}.Release|x64.ActiveCfg = Release|x64
		{B6EF1001-264C-43BB-8FF9-8F663813E1FC}.Release|x64.Build.0 = Release|x64
		{97D16904-207B-4602-ADC5-4D4D34AA421D}.Release|Win32.ActiveCfg = Release|Win32
		{97D16904-207B-4602-ADC5-4D4D34AA421D}.Release|Win32.Build.0 = Release|Win32
		{97D16904-207B-4602-ADC5-4D4D34AA421D}.Release|x64.ActiveCfg = Release|x64
		{97D16904-207B-4602-ADC5-4D4D34AA421D}.Release|x64.Build.0 = Release|x64
		{61E17285-3FAB-44A5-B556-4626A3322631}.Release|Win32.ActiveCfg = Release|Win32
		{61E17285-3FAB-44A5-B556-4626A3322631}.Release|Win32.Build.0 = Release|Win32
		{61E17285-3FAB-44A5-B556-4626A3322631}.Release|x64.ActiveCfg = Release|x64
		{61E17285-3FAB-44A5-B556-4626A3322631}.Release|x64.Build.0 = Release|x64
		{055F2F38-D3AB-4A30-A8C6-A7C9A393BB30}.Release|Win32.ActiveCfg = Release|Win32
		{055F2F38-D3AB-4A30-A8C6-A7C9A393BB30}.Release|Win32.Build.0 = Release|Win32
		{055F2F38-D3AB-4A30-A8C6-A7C9A393BB30}.Release|x64.ActiveCfg = Release|x64
		{055F2F38-D3AB-4A30-A8C6-A7C9A393BB30}.Release|x64.Build.0 = Release|x64
		{A57AE857-8899-4599-AC79-D3E1A4DD4EAE}.Release|Win32.ActiveCfg = Release|Win32
		{A57AE857-8899-4599-AC79-D3E1A4DD4EAE}.Release|Win32.Build.0 = Release|Win32
		{A57AE857-8899-4599-AC79-D3E1A4DD4EAE}.Release|x64.ActiveCfg = Release|x64
		{A57AE857-8899-4599-AC79-D3E1A4DD4EAE}.Release|x64.Build.0 = Release|x64
		{205D4C24-C72D-4269-88A4-8C04595436BC}.Release|Win32.ActiveCfg = Release|Win32
		{205D4C24-C72D-4269-88A4-8C04595436BC}.Release|Win32.Build.0 = Release|Win32
		{205D4C24-C72D-4269-88A4-8C04595436BC}.Release|x64.ActiveCfg = Release|x64
		{205D4C24-C72D-4269-88A4-8C04595436BC}.Release|x64.Build.0 = Release|x64
		{6C09EE6B-A1A2-4F0D-B7B0-32647987B49A}.Release|Win32.ActiveCfg = Release|Win32
		{6C09EE6B-A1A2-4F0D-B7B0-32647987B49A}.Release|Win32.Build.0 = Release|Win32
		{6C09EE6B-A1A2-4F0D-B7B0-32647987B49A}.Release|x64.ActiveCfg = Release|x64
		{6C09EE6B-A1A2-4F0D-B7B0-32647987B49A}.Release|x64.Build.0 = Release|x64
		{DCF397A2-A67E-45CA-9087-840BC223C3DD}.Release|Win32.ActiveCfg = Release|Win32
		{DCF397A2-A67E-45CA-9087-840BC223C3DD}.Release|Win32.Build.0 = Release|Win32
		{DCF397A2-A67E-45CA-9087-840BC223C3DD}.Release|x64.ActiveCfg = Release|x64
		{DCF397A2-A67E-45CA-9087-840BC223C3DD}.Release|x64.Build.0 = Release|x64
		{34145676-AEA6-459F-BCC1-6E7C72D6B394}.Release|Win32.ActiveCfg = Release|Win32
		{34145676-AEA6-459F-BCC1-6E7C72D6B394}.Release|Win32.Build.0 = Release|Win32
		{34145676-AEA6-459F-BCC1-6E7C72D6B394}.Release|x64.ActiveCfg = Release|x64
		{34145676-AEA6-459F-BCC1-6E7C72D6B394}.Release|x64.Build.0 = Release|x64
		{3B28AB18-C065-4426-9802-4A70528CAB55}.Release|Win32.ActiveCfg = Release|Win32
		{3B28AB18-C065-4426-9802-4A70528CAB55}.Release|Win32.Build.0 = Release|Win32
		{3B28AB18-C065-4426-9802-4A70528CAB55}.Release|x64.ActiveCfg = Release|x64
		{3B28AB18-C065-4426-9802-4A70528CAB55}.Release|x64.Build.0 = Release|x64
		{DE92C423-14C5-4604-8539-174D0B911548}.Release|Win32.ActiveCfg = Release|Win32
		{DE92C423-14C5-4604-8539-174D0B911548}.Release|Win32.Build.0 = Release|Win32
		{DE92C423-14C5-4604-8539-174D0B911548}.Release|x64.ActiveCfg = Release|x64
		{DE92C423-14C5-4604-8539-174D0B911548}.Release|x64.Build.0 = Release|x64
		{0D52ACBE-DE4F-4197-8BE3-9CE3C98C6120}.Release|Win32.ActiveCfg = Release|Win32
		{0D52ACBE-DE4F-4197-8BE3-9CE3C98C6120}.Release|Win32.Build.0 = Release|Win32
		{0D52ACBE-DE4F-4197-8BE3-9CE3C98C6120}.Release|x64.ActiveCfg = Release|x64
		{0D52ACBE-DE4F-4197-8BE3-9CE3C98C6120}.Release|x64.Build.0 = Release|x64
		{F81527F7-49FD-43DD-8337-EB409F5568FB}.Release|Win32.ActiveCfg = Release|Win32
		{F81527F7-49FD-43DD-8337-EB409F5568FB}.Release|Win32.Build.0 = Release|Win32
		{F81527F7-49FD-43DD-8337-EB409F5568FB}.Release|x64.ActiveCfg = Release|x64
		{F81527F7-49FD-43DD-8337-EB409F5568FB}.Release|x64.Build.0 = Release|x64
		{E6903075-2C80-40F5-9852-173FDB94823F}.Release|Win32.ActiveCfg = Release|Win32
		{E6903075-2C80-40F5-9852-173FDB94823F}.Release|Win32.Build.0 = Release|Win32
		{E6903075-2C80-40F5-9852-173FDB94823F}.Release|x64.ActiveCfg = Release|x64
		{E6903075-2C80-40F5-9852-173FDB94823F}.Release|x64.Build.0 = Release|x64
		{5C6560D2-F106-483D-A769-65C1A2F8F99B}.Release|Win32.ActiveCfg = Release|Win32
		{5C6560D2-F106-483D-A769-65C1A2F8F99B}.Release|Win32.Build.0 = Release|Win32
		{5C6560D2-F106-483D-A769-65C1A2F8F99B}.Release|x64.ActiveCfg = Release|x64
		{5C6560D2-F106-483D-A769-65C1A2F8F99B}.Release|x64.Build.0 = Release|x64
		{628CDD07-CCCB-4D7C-A290-FB6AE0125C64}.Release|Win32.ActiveCfg = Release|Win32
		{628CDD07-CCCB-4D7C-A290-FB6AE0125C64}.Release|Win32.Build.0 = Release|Win32
		{628CDD07-CCCB-4D7C-A290-FB6AE0125C64}.Release|x64.ActiveCfg = Release|x64
		{628CDD07-CCCB-4D7C-A290-FB6AE0125C64}.Release|x64.Build.0 = Release|x64
		{E8A0D08B-5CB3-4D75-9088-14A1791DD2BA}.Release|Win32.ActiveCfg = Release|Win32
		{E8A0D08B-5CB3-4D75-9088-14A1791DD2BA}.Release|Win32.Build.0 = Release|Win32
		{E8A0D08B-5CB3-4D75-9088-14A1791DD2BA}.Release|x64.ActiveCfg = Release|x64
		{E8A0D08B-5CB3-4D75-9088-14A1791DD2BA}.Release|x64.Build.0 = Release|x64
		{8003B222-7F4E-4723-BC1F-67B1F9825697}.Release|Win32.ActiveCfg = Release|Win32
		{8003B222-7F4E-4723-BC1F-67B1F9825697}.Release|Win32.Build.0 = Release|Win32
		{8003B222-7F4E-4723-BC1F-67B1F9825697}.Release|x64.ActiveCfg = Release|x64
		{8003B222-7F4E-4723-BC1F-67B1F9825697}.Release|x64.Build.0 = Release|x64
		{CEC2F065-CAD0-4F3D-8BA0-D2096EC39869}.Release|Win32.ActiveCfg = Release|Win32
		{CEC2F065-CAD0-4F3D-8BA0-D2096EC39869}.Release|Win32.Build.0 = Release|Win32
		{CEC2F065-CAD0-4F3D-8BA0-D2096EC39869}.Release|x64.ActiveCfg = Release|x64
		{CEC2F065-CAD0-4F3D-8BA0-D2096EC39869}.Release|x64.Build.0 = Release|x64
		{0483ABA1-D087-4C60-97AF-F4FBE115F1D5}.Release|Win32.ActiveCfg = Release|Win32
		{0483ABA1-D087-4C60-97AF-F4FBE115F1D5}.Release|Win32.Build.0 = Release|Win32
		{0483ABA1-D087-4C60-97AF-F4FBE115F1D5}.Release|x64.ActiveCfg = Release|x64
		{0483ABA1-D087-4C60-97AF-F4FBE115F1D5}.Release|x64.Build.0 = Release|x64
		{F3E3D3F2-E040-4EDB-B311-C5D8AC3B74AB}.Release|Win32.ActiveCfg = Release|Win32
		{F3E3D3F2-E040-4EDB-B311-C5D8AC3B74AB}.Release|Win32.Build.0 = Release|Win32
		{F3E3D3F2-E040-4EDB-B311-C5D8AC3B74AB}.Release|x64.ActiveCfg = Release|x64
		{F3E3D3F2-E040-4EDB-B311-C5D8AC3B74AB}.Release|x64.Build.0 = Release|x64
		{DE3BD86E-C8BC-494F-B5EC-FD677F6C4B5E}.Release|Win32.ActiveCfg = Release|Win32
		{DE3BD86E-C8BC-494F-B5EC-FD677F6C4B5E}.Release|Win32.Build.0 = Release|Win32
		{DE3BD86E-C8BC-494F-B5EC-FD677F6C4B5E}.Release|x64.ActiveCfg = Release|x64
		{DE3BD86E-C8BC-494F-B5EC-FD677F6C4B5E}.Release|x64.Build.0 = Release|x64
		{1D5003A0-E5EE-4C92-AB78-CD69D96E7047}.Release|Win32.ActiveCfg = Release|Win32
		{1D5003A0-E5EE-4C92-AB78-CD69D96E7047}.Release|Win32.Build.0 = Release|Win32
		{1D5003A0-E5EE-4C92-AB78-CD69D96E7047}.Release|x64.ActiveCfg = Release|x64
		{1D5003A0-E5EE-4C92-AB78-CD69D96E7047}.Release|x64.Build.0 = Release|x64
		{D1570343-3EFA-4CE2-9B7C-BE86CA55419C}.Release|Win32.ActiveCfg = Release|Win32
		{D1570343-3EFA-4CE2-9B7C-BE86CA55419C}.Release|Win32.Build.0 = Release|Win32
		{D1570343-3EFA-4CE2-9B7C-BE86CA55419C}.Release|x64.ActiveCfg = Release|x64
		{D1570343-3EFA-4CE2-9B7C-BE86CA55419C}.Release|x64.Build.0 = Release|x64
		{1175F2CB-89F3-49E6-B36A-1E9131EFB0B3}.Release|Win32.ActiveCfg = Release|Win32
		{1175F2CB-89F3-49E6-B36A-1E9131EFB0B3}.Release|Win32.Build.0 = Release|Win32
		{1175F2CB-89F3-49E6-B36A-1E9131EFB0B3}.Release|x64.ActiveCfg = Release|x64
		{1175F2CB-89F3-49E6-B36A-1E9131EFB0B3}.Release|x64.Build.0 = Release|x64
		{7D9EFAD3-8421-4E30-9BCD-B5AC3A4F49AC}.Release|Win32.ActiveCfg = Release|Win32
		{7D9EFAD3-8421-4E30-9BCD-B5AC3A4F49AC}.Release|Win32.Build.0 = Release|Win32
		{7D9EFAD3-8421-4E30-9BCD-B5AC3A4F49AC}.Release|x64.ActiveCfg = Release|x64
		{7D9EFAD3-8421-4E30-9BCD-B5AC3A4F49AC}.Release|x64.Build.0 = Release|x64
		{E9EE5A7D-2B6A-4DE6-8CAC-E9B480A5AB1C}.Release|Win32.ActiveCfg = Release|Win32
		{E9EE5A7D-2B6A-4DE6-8CAC-E9B480A5AB1C}.Release|Win32.Build.0 = Release|Win32
		{E9EE5A7D-2B6A-4DE6-8CAC-E9B480A5AB1C}.Release|x64.ActiveCfg = Release|x64
		{E9EE5A7D-2B6A-4DE6-8CAC-E9B480A5AB1C}.Release|x64.Build.0 = Release|x64
		{AB238A03-1A8E-4C47-BECE-99FE6C6F4A05}.Release|Win32.ActiveCfg = Release|Win32
		{AB238A03-1A8E-4C47-BECE-99FE6C6F4A05}.Release|Win32.Build.0 = Release|Win32
		{AB238A03-1A8E-4C47-BECE-99FE6C6F4A05}.Release|x64.ActiveCfg = Release|x64
		{AB238A03-1A8E-4C47-BECE-99FE6C6F4A05}.Release|x64.Build.0 = Release|x64
		{56FCC7E5-3FF4-4D58-A98B-17FC61EED23E}.Release|Win32.ActiveCfg = Release|Win32
		{56FCC7E5-3FF4-4D58-A98B-17FC61EED23E}.Release|Win32.Build.0 = Release|Win32
		{56FCC7E5-3FF4-4D58-A98B-17FC61EED23E}.Release|x64.ActiveCfg = Release|x64
		{56FCC7E5-3FF4-4D58-A98B-17FC61EED23E}.Release|x64.Build.0 = Release|x64
		{710D2DFF-F5EC-4CEF-AC2A-1EF82CD77529}.Release|Win32.ActiveCfg = Release|Win32
		{710D2DFF-F5EC-4CEF-AC2A-1EF82CD77529}.Release|Win32.Build.0 = Release|Win32
		{710D2DFF-F5EC-4CEF-AC2A-1EF82CD77529}.Release|x64.ActiveCfg = Release|x64
		{710D2DFF-F5EC-4CEF-AC2A-1EF82CD77529}.Release|x64.Build.0 = Release|x64
		{833924C7-6699-4EE2-9F98-8F99AF353320}.Release|Win32.ActiveCfg = Release|Win32
		{833924C7-6699-4EE2-9F98-8F99AF353320}.Release|Win32.Build.0 = Release|Win32
		{833924C7-6699-4EE2-9F98-8F99AF353320}.Release|x64.ActiveCfg = Release|x64
		{833924C7-6699-4EE2-9F98-8F99AF353320}.Release|x64.Build.0 = Release|x64
		{8AD44D67-1AC8-457C-85D2-FE6EF5B521FB}.Release|Win32.ActiveCfg = Release|Win32
		{8AD44D67-1AC8-457C-85D2-FE6EF5B521FB}.Release|Win32.Build.0 = Release|Win32
		{8AD44D67-1AC8-457C-85D2-FE6EF5B521FB}.Release|x64.ActiveCfg = Release|x64
		{8AD44D67-1AC8-457C-85D2-FE6EF5B521FB}.Release|x64.Build.0 = Release|x64
		{3CDADF62-9D58-450C-AAC1-EE4FD538F95A}.Release|Win32.ActiveCfg = Release|Win32
		{3CDADF62-9D58-450C-AAC1-EE4FD538F95A}.Release|Win32.Build.0 = Release|Win32
		{3CDADF62-9D58-450C-AAC1-EE4FD538F95A}.Release|x64.ActiveCfg = Release|x64
		{3CDADF62-9D58-450C-AAC1-EE4FD538F95A}.Release|x64.Build.0 = Release|x64
		{56F0C668-4CDC-45E3-A314-1AD7BD56F1CC}.Release|Win32.ActiveCfg = Release|Win32
		{56F0C668-4CDC-45E3-A314-1AD7BD56F1CC}.Release|Win32.Build.0 = Release|Win32
		{56F0C668-4CDC-45E3-A314-1AD7BD56F1CC}.Release|x64.ActiveCfg = Release|x64
		{56F0C668-4CDC-45E3-A314-1AD7BD56F1CC}.Release|x64.Build.0 = Release|x64
		{83E85317-4E4F-40E1-962A-9DB431F04518}.Release|Win32.ActiveCfg = Release|Win32
		{83E85317-4E4F-40E1-962A-9DB431F04518}.Release|Win32.Build.0 = Release|Win32
		{83E85317-4E4F-40E1-962A-9DB431F04518}.Release|x64.ActiveCfg = Release|x64
		{83E85317-4E4F-40E1-962A-9DB431F04518}.Release|x64.Build.0 = Release|x64
		{87F8BBDD-336D-4AC7-A9A7-A16FBC36AB77}.Release|Win32.ActiveCfg = Release|Win32
		{87F8BBDD-336D-4AC7-A9A7-A16FBC36AB77}.Release|Win32.Build.0 = Release|Win32
		{87F8BBDD-336D-4AC7-A9A7-A16FBC36AB77}.Release|x64.ActiveCfg = Release|x64
		{87F8BBDD-336D-4AC7-A9A7-A16FBC36AB77}.Release|x64.Build.0 = Release|x64
		{C0D7A41D-BA23-4D99-AFF6-CAFBFF2D8208}.Release|Win32.ActiveCfg = Release|Win32
		{C0D7A41D-BA23-4D99-AFF6-CAFBFF2D8208}.Release|Win32.Build.0 = Release|Win32
		{C0D7A41D-BA23-4D99-AFF6-CAFBFF2D8208}.Release|x64.ActiveCfg = Release|x64
		{C0D7A41D-BA23-4D99-AFF6-CAFBFF2D8208}.Release|x64.Build.0 = Release|x64
		{FDDF8226-7F61-426C-8E72-0C9D1D4D162E}.Release|Win32.ActiveCfg = Release|Win32
		{FDDF8226-7F61-426C-8E72-0C9D1D4D162E}.Release|Win32.Build.0 = Release|Win32
		{FDDF8226-7F61-426C-8E72-0C9D1D4D162E}.Release|x64.ActiveCfg = Release|x64
		{FDDF8226-7F61-426C-8E72-0C9D1D4D162E}.Release|x64.Build.0 = Release|x64
		{A6E558D9-08B9-443A-A960-D9F3A37AF761}.Release|Win32.ActiveCfg = Release|Win32
		{A6E558D9-08B9-443A-A960-D9F3A37AF761}.Release|Win32.Build.0 = Release|Win32
		{A6E558D9-08B9-443A-A960-D9F3A37AF761}.Release|x64.ActiveCfg = Release|x64
		{A6E558D9-08B9-443A-A960-D9F3A37AF761}.Release|x64.Build.0 = Release|x64
		{2B626467-57B0-455D-864D-D414F3A02906}.Release|Win32.ActiveCfg = Release|Win32
		{2B626467-57B0-455D-864D-D414F3A02906}.Release|Win32.Build.0 = Release|Win32
		{2B626467-57B0-455D-864D-D414F3A02906}.Release|x64.ActiveCfg = Release|x64
		{2B626467-57B0-455D-864D-D414F3A02906}.Release|x64.Build.0 = Release|x64
		{50CB475A-282F-4808-B7BE-F4DE5F6F7C4D}.Release|Win32.ActiveCfg = Release|Win32
		{50CB475A-282F-4808-B7BE-F4DE5F6F7C4D}.Release|Win32.Build.0 = Release|Win32
		{50CB475A-282F-4808-B7BE-F4DE5F6F7C4D}.Release|x64.ActiveCfg = Release|x64
		{50CB475A-282F-4808-B7BE-F4DE5F6F7C4D}.Release|x64.Build.0 = Release|x64
		{8C71527A-A25B-4F6F-918E-C2B851228D24}.Release|Win32.ActiveCfg = Release|Win32
		{8C71527A-A25B-4F6F-918E-C2B851228D24}.Release|Win32.Build.0 = Release|Win32
		{8C71527A-A25B-4F6F-918E-C2B851228D24}.Release|x64.ActiveCfg = Release|x64
		{8C71527A-A25B-4F6F-918E-C2B851228D24}.Release|x64.Build.0 = Release|x64
		{C7A513F6-CE58-4994-8A2D-DFEBFD983C1C}.Release|Win32.ActiveCfg = Release|Win32
		{C7A513F6-CE58-4994-8A2D-DFEBFD983C1C}.Release|Win32.Build.0 = Release|Win32
		{C7A513F6-CE58-4994-8A2D-DFEBFD983C1C}.Release|x64.ActiveCfg = Release|x64
		{C7A513F6-CE58-4994-8A2D-DFEBFD983C1C}.Release|x64.Build.0 = Release|x64
		{019FBAAF-1B8B-4075-B541-FCD7DBD4683E}.Release|Win32.ActiveCfg = Release|Win32
		{019FBAAF-1B8B-4075-B541-FCD7DBD4683E}.Release|Win32.Build.0 = Release|Win32
		{019FBAAF-1B8B-4075-B541-FCD7DBD4683E}.Release|x64.ActiveCfg = Release|x64
		{019FBAAF-1B8B-4075-B541-FCD7DBD4683E}.Release|x64.Build.0 = Release|x64
		{9EAB9A5B-5AAC-4235-8E27-8A53C65A4FE5}.Release|Win32.ActiveCfg = Release|Win32
		{9EAB9A5B-5AAC-4235-8E27-8A53C65A4FE5}.Release|Win32.Build.0 = Release|Win32
		{9EAB9A5B-5AAC-4235-8E27-8A53C65A4FE5}.Release|x64.ActiveCfg = Release|x64
		{9EAB9A5B-5AAC-4235-8E27-8A53C65A4FE5}.Release|x64.Build.0 = Release|x64
		{DAE56F2B-C9B0-4ABC-B8AC-86C5B0674996}.Release|Win32.ActiveCfg = Release|Win32
		{DAE56F2B-C9B0-4ABC-B8AC-86C5B0674996}.Release|Win32.Build.0 = Release|Win32
		{DAE56F2B-C9B0-4ABC-B8AC-86C5B0674996}.Release|x64.ActiveCfg = Release|x64
		{DAE56F2B-C9B0-4ABC-B8AC-86C5B0674996}.Release|x64.Build.0 = Release|x64
		{DD5AE094-8CAD-43CA-98E9-64E7981E774C}.Release|Win32.ActiveCfg = Release|Win32
		{DD5AE094-8CAD-43CA-98E9-64E7981E774C}.Release|Win32.Build.0 = Release|Win32
		{DD5AE094-8CAD-43CA-98E9-64E7981E774C}.Release|x64.ActiveCfg = Release|x64
		{DD5AE094-8CAD-43CA-98E9-64E7981E774C}.Release|x64.Build.0 = Release|x64
		{31A584D9-BA90-408C-881D-82CE2749406E}.Release|Win32.ActiveCfg = Release|Win32
		{31A584D9-BA90-408C-881D-82CE2749406E}.Release|Win32.Build.0 = Release|Win32
		{31A584D9-BA90-408C-881D-82CE2749406E}.Release|x64.ActiveCfg = Release|x64
		{31A584D9-BA90-408C-881D-82CE2749406E}.Release|x64.Build.0 = Release|x64
		{2B79C3E5-CC13-44A6-891C-94CDF48EB71D}.Release|Win32.ActiveCfg = Release|Win32
		{2B79C3E5-CC13-44A6-891C-94CDF48EB71D}.Release|Win32.Build.0 = Release|Win32
		{2B79C3E5-CC13-44A6-891C-94CDF48EB71D}.Release|x64.ActiveCfg = Release|x64
		{2B79C3E5-CC13-44A6-891C-94CDF48EB71D}.Release|x64.Build.0 = Release|x64
		{5249ED07-8BFC-4BE2-9DBA-3358C8870073}.Release|Win32.ActiveCfg = Release|Win32
		{5249ED07-8BFC-4BE2-9DBA-3358C8870073}.Release|Win32.Build.0 = Release|Win32
		{5249ED07-8BFC-4BE2-9DBA-3358C8870073}.Release|x64.ActiveCfg = Release|x64
		{5249ED07-8BFC-4BE2-9DBA-3358C8870073}.Release|x64.Build.0 = Release|x64
		{2C95E9AF-0760-45B6-BEB2-EC3380DA3AB9}.Release|Win32.ActiveCfg = Release|Win32
		{2C95E9AF-0760-45B6-BEB2-EC3380DA3AB9}.Release|Win32.Build.0 = Release|Win32
		{2C95E9AF-0760-45B6-BEB2-EC3380DA3AB9}.Release|x64.ActiveCfg = Release|x64
		{2C95E9AF-0760-45B6-BEB2-EC3380DA3AB9}.Release|x64.Build.0 = Release|x64
		{CE5AABAF-F69B-4444-AB48-1B0E75ADECE4}.Release|Win32.ActiveCfg = Release|Win32
		{CE5AABAF-F69B-4444-AB48-1B0E75ADECE4}.Release|Win32.Build.0 = Release|Win32
		{CE5AABAF-F69B-4444-AB48-1B0E75ADECE4}.Release|x64.ActiveCfg = Release|x64
		{CE5AABAF-F69B-4444-AB48-1B0E75ADECE4}.Release|x64.Build.0 = Release|x64
		{6F9D7089-4CA0-4264-8DF0-73DA93F99B47}.Release|Win32.ActiveCfg = Release|Win32
		{6F9D7089-4CA0-4264-8DF0-73DA93F99B47}.Release|Win32.Build.0 = Release|Win32
		{6F9D7089-4CA0-4264-8DF0-73DA93F99B47}.Release|x64.ActiveCfg = Release|x64
		{6F9D7089-4CA0-4264-8DF0-73DA93F99B47}.Release|x64.Build.0 = Release|x64
		{CB7F3419-E0D8-4C76-B36C-AAE8A0D502E0}.Release|Win32.ActiveCfg = Release|Win32
		{CB7F3419-E0D8-4C76-B36C-AAE8A0D502E0}.Release|Win32.Build.0 = Release|Win32
		{CB7F3419-E0D8-4C76-B36C-AAE8A0D502E0}.Release|x64.ActiveCfg = Release|x64
		{CB7F3419-E0D8-4C76-B36C-AAE8A0D502E0}.Release|x64.Build.0 = Release|x64
		{F18C621B-9494-4577-9681-5560FD804961}.Release|Win32.ActiveCfg = Release|Win32
		{F18C621B-9494-4577-9681-5560FD804961}.Release|Win32.Build.0 = Release|Win32
		{F18C621B-9494-4577-9681-5560FD804961}.Release|x64.ActiveCfg = Release|x64
		{F18C621B-9494-4577-9681-5560FD804961}.Release|x64.Build.0 = Release|x64
		{8E5A0431-1B2B-4747-BC1B-C98DA9F235F1}.Release|Win32.ActiveCfg = Release|Win32
		{8E5A0431-1B2B-4747-BC1B-C98DA9F235F1}.Release|Win32.Build.0 = Release|Win32
		{8E5A0431-1B2B-4747-BC1B-C98DA9F235F1}.Release|x64.ActiveCfg = Release|x64
		{8E5A0431-1B2B-4747-BC1B-C98DA9F235F1}.Release|x64.Build.0 = Release|x64
		{66BE4AAC-F6A7-4F33-9DAA-6F9338BBE449}.Release|Win32.ActiveCfg = Release|Win32
		{66BE4AAC-F6A7-4F33-9DAA-6F9338BBE449}.Release|Win32.Build.0 = Release|Win32
		{66BE4AAC-F6A7-4F33-9DAA-6F9338BBE449}.Release|x64.ActiveCfg = Release|x64
		{66BE4AAC-F6A7-4F33-9DAA-6F9338BBE449}.Release|x64.Build.0 = Release|x64
		{C81D1A24-DCDE-4103-A36D-927298479DAC}.Release|Win32.ActiveCfg = Release|Win32
		{C81D1A24-DCDE-4103-A36D-927298479DAC}.Release|Win32.Build.0 = Release|Win32
		{C81D1A24-DCDE-4103-A36D-927298479DAC}.Release|x64.ActiveCfg = Release|x64
		{C81D1A24-DCDE-4103-A36D-927298479DAC}.Release|x64.Build.0 = Release|x64
		{9E54D0E6-0A23-4610-B528-BFC41BACC495}.Release|Win32.ActiveCfg = Release|Win32
		{9E54D0E6-0A23-4610-B528-BFC41BACC495}.Release|Win32.Build.0 = Release|Win32
		{9E54D0E6-0A23-4610-B528-BFC41BACC495}.Release|x64.ActiveCfg = Release|x64
		{9E54D0E6-0A23-4610-B528-BFC41BACC495}.Release|x64.Build.0 = Release|x64
		{B3F5BAE5-F982-4F37-B6A6-BCB304C35F9F}.Release|Win32.ActiveCfg = Release|Win32
		{B3F5BAE5-F982-4F37-B6A6-BCB304C35F9F}.Release|Win32.Build.0 = Release|Win32
		{B3F5BAE5-F982-4F37-B6A6-BCB304C35F9F}.Release|x64.ActiveCfg = Release|x64
		{B3F5BAE5-F982-4F37-B6A6-BCB304C35F9F}.Release|x64.Build.0 = Release|x64
		{55EF9C3D-C44C-4AC6-8605-0D9D20883A95}.Release|Win32.ActiveCfg = Release|Win32
		{55EF9C3D-C44C-4AC6-8605-0D9D20883A95}.Release|Win32.Build.0 = Release|Win32
		{55EF9C3D-C44C-4AC6-8605-0D9D20883A95}.Release|x64.ActiveCfg = Release|x64
		{55EF9C3D-C44C-4AC6-8605-0D9D20883A95}.Release|x64.Build.0 = Release|x64
		{009F96D0-B85A-43E3-82ED-E0FA60AA9E00}.Release|Win32.ActiveCfg = Release|Win32
		{009F96D0-B85A-43E3-82ED-E0FA60AA9E00}.Release|Win32.Build.0 = Release|Win32
		{009F96D0-B85A-43E3-82ED-E0FA60AA9E00}.Release|x64.ActiveCfg = Release|x64
		{009F96D0-B85A-43E3-82ED-E0FA60AA9E00}.Release|x64.Build.0 = Release|x64
		{4B01B90E-DD69-42B5-9C81-A6490DCE7F2A}.Release|Win32.ActiveCfg = Release|Win32
		{4B01B90E-DD69-42B5-9C81-A6490DCE7F2A}.Release|Win32.Build.0 = Release|Win32
		{4B01B90E-DD69-42B5-9C81-A6490DCE7F2A}.Release|x64.ActiveCfg = Release|x64
		{4B01B90E-DD69-42B5-9C81-A6490DCE7F2A}.Release|x64.Build.0 = Release|x64
		{62790B43-1B04-4CDD-B845-CB1B93C4D6D9}.Release|Win32.ActiveCfg = Release|Win32
		{62790B43-1B04-4CDD-B845-CB1B93C4D6D9}.Release|Win32.Build.0 = Release|Win32
		{62790B43-1B04-4CDD-B845-CB1B93C4D6D9}.Release|x64.ActiveCfg = Release|x64
		{62790B43-1B04-4CDD-B845-CB1B93C4D6D9}.Release|x64.Build.0 = Release|x64
		{58BB0769-6E8A-4B8F-8D7B-5D9C73753AED}.Release|Win32.ActiveCfg = Release|Win32
		{58BB0769-6E8A-4B8F-8D7B-5D9C73753AED}.Release|Win32.Build.0 = Release|Win32
		{58BB0769-6E8A-4B8F-8D7B-5D9C73753AED}.Release|x64.ActiveCfg = Release|x64
		{58BB0769-6E8A-4B8F-8D7B-5D9C73753AED}.Release|x64.Build.0 = Release|x64
		{FCC4FACF-0E34-4055-9FBE-52CCFB580C43}.Release|Win32.ActiveCfg = Release|Win32
		{FCC4FACF-0E34-4055-9FBE-52CCFB580C43}.Release|Win32.Build.0 = Release|Win32
		{FCC4FACF-0E34-4055-9FBE-52CCFB580C43}.Release|x64.ActiveCfg = Release|x64
		{FCC4FACF-0E34-4055-9FBE-52CCFB580C43}.Release|x64.Build.0 = Release|x64
		{15F4E74B-EB09-44EF-BF9F-58A717110998}.Release|Win32.ActiveCfg = Release|Win32
		{15F4E74B-EB09-44EF-BF9F-58A717110998}.Release|Win32.Build.0 = Release|Win32
		{15F4E74B-EB09-44EF-BF9F-58A717110998}.Release|x64.ActiveCfg = Release|x64
		{15F4E74B-EB09-44EF-BF9F-58A717110998}.Release|x64.Build.0 = Release|x64
		{C9E54C27-2594-496E-AD4E-A3715451B893}.Release|Win32.ActiveCfg = Release|Win32
		{C9E54C27-2594-496E-AD4E-A3715451B893}.Release|Win32.Build.0 = Release|Win32
		{C9E54C27-2594-496E-AD4E-A3715451B893}.Release|x64.ActiveCfg = Release|x64
		{C9E54C27-2594-496E-AD4E-A3715451B893}.Release|x64.Build.0 = Release|x64
		{2A267AE0-DE6A-43B4-B66B-3E45A6296D97}.Release|Win32.ActiveCfg = Release|Win32
		{2A267AE0-DE6A-43B4-B66B-3E45A6296D97}.Release|Win32.Build.0 = Release|Win32
		{2A267AE0-DE6A-43B4-B66B-3E45A6296D97}.Release|x64.ActiveCfg = Release|x64
		{2A267AE0-DE6A-43B4-B66B-3E45A6296D97}.Release|x64.Build.0 = Release|x64
		{52D029D3-2E9B-4C45-AFAC-262BCACB1EB4}.Release|Win32.ActiveCfg = Release|Win32
		{52D029D3-2E9B-4C45-AFAC-262BCACB1EB4}.Release|Win32.Build.0 = Release|Win32
		{52D029D3-2E9B-4C45-AFAC-262BCACB1EB4}.Release|x64.ActiveCfg = Release|x64
		{52D029D3-2E9B-4C45-AFAC-262BCACB1EB4}.Release|x64.Build.0 = Release|x64
		{7FD5F07A-7E92-46FB-BDA7-629D63A2F765}.Release|Win32.ActiveCfg = Release|Win32
		{7FD5F07A-7E92-46FB-BDA7-629D63A2F765}.Release|Win32.Build.0 = Release|Win32
		{7FD5F07A-7E92-46FB-BDA7-629D63A2F765}.Release|x64.ActiveCfg = Release|x64
		{7FD5F07A-7E92-46FB-BDA7-629D63A2F765}.Release|x64.Build.0 = Release|x64
		{92DCD0D2-FBB9-428F-BEC3-59E3E2D8CF85}.Release|Win32.ActiveCfg = Release|Win32
		{92DCD0D2-FBB9-428F-BEC3-59E3E2D8CF85}.Release|Win32.Build.0 = Release|Win32
		{92DCD0D2-FBB9-428F-BEC3-59E3E2D8CF85}.Release|x64.ActiveCfg = Release|x64
		{92DCD0D2-FBB9-428F-BEC3-59E3E2D8CF85}.Release|x64.Build.0 = Release|x64
		{77BCE68D-4133-440B-A3FC-F428073DBBA7}.Release|Win32.ActiveCfg = Release|Win32
		{77BCE68D-4133-440B-A3FC-F428073DBBA7}.Release|Win32.Build.0 = Release|Win32
		{77BCE68D-4133-440B-A3FC-F428073DBBA7}.Release|x64.ActiveCfg = Release|x64
		{77BCE68D-4133-440B-A3FC-F428073DBBA7}.Release|x64.Build.0 = Release|x64
		{F3818CEB-DC17-4D69-B1EB-E21A8CF57173}.Release|Win32.ActiveCfg = Release|Win32
		{F3818CEB-DC17-4D69-B1EB-E21A8CF57173}.Release|Win32.Build.0 = Release|Win32
		{F3818CEB-DC17-4D69-B1EB-E21A8CF57173}.Release|x64.ActiveCfg = Release|x64
		{F3818CEB-DC17-4D69-B1EB-E21A8CF57173}.Release|x64.Build.0 = Release|x64
		{44390B3D-EEE6-4806-B4CF-B6FAF29526C8}.Release|Win32.ActiveCfg = Release|Win32
		{44390B3D-EEE6-4806-B4CF-B6FAF29526C8}.Release|Win32.Build.0 = Release|Win32
		{44390B3D-EEE6-4806-B4CF-B6FAF29526C8}.Release|x64.ActiveCfg = Release|x64
		{44390B3D-EEE6-4806-B4CF-B6FAF29526C8}.Release|x64.Build.0 = Release|x64
		{C60D4A83-B183-48AE-B257-1005E4BE5B1B}.Release|Win32.ActiveCfg = Release|Win32
		{C60D4A83-B183-48AE-B257-1005E4BE5B1B}.Release|Win32.Build.0 = Release|Win32
		{C60D4A83-B183-48AE-B257-1005E4BE5B1B}.Release|x64.ActiveCfg = Release|x64
		{C60D4A83-B183-48AE-B257-1005E4BE5B1B}.Release|x64.Build.0 = Release|x64
		{EA23DDDC-D84B-44AA-8691-A40735CCFE84}.Release|Win32.ActiveCfg = Release|Win32
		{EA23DDDC-D84B-44AA-8691-A40735CCFE84}.Release|Win32.Build.0 = Release|Win32
		{EA23DDDC-D84B-44AA-8691-A40735CCFE84}.Release|x64.ActiveCfg = Release|x64
		{EA23DDDC-D84B-44AA-8691-A40735CCFE84}.Release|x64.Build.0 = Release|x64
		{E447C251-D8DD-452B-994B-B3D601D04B64}.Release|Win32.ActiveCfg = Release|Win32
		{E447C251-D8DD-452B-994B-B3D601D04B64}.Release|Win32.Build.0 = Release|Win32
		{E447C251-D8DD-452B-994B-B3D601D04B64}.Release|x64.ActiveCfg = Release|x64
		{E447C251-D8DD-452B-994B-B3D601D04B64}.Release|x64.Build.0 = Release|x64
		{F3AFA98C-ECEE-49F0-AB60-8579FFA60600}.Release|Win32.ActiveCfg = Release|Win32
		{F3AFA98C-ECEE-49F0-AB60-8579FFA60600}.Release|Win32.Build.0 = Release|Win32
		{F3AFA98C-ECEE-49F0-AB60-8579FFA60600}.Release|x64.ActiveCfg = Release|x64
		{F3AFA98C-ECEE-49F0-AB60-8579FFA60600}.Release|x64.Build.0 = Release|x64
		{41256139-B6AC-4327-A592-CFD7BD83F2D3}.Release|Win32.ActiveCfg = Release|Win32
		{41256139-B6AC-4327-A592-CFD7BD83F2D3}.Release|Win32.Build.0 = Release|Win32
		{41256139-B6AC-4327-A592-CFD7BD83F2D3}.Release|x64.ActiveCfg = Release|x64
		{41256139-B6AC-4327-A592-CFD7BD83F2D3}.Release|x64.Build.0 = Release|x64
		{1D741684-4AD1-4249-9CDD-C4AA3B820A31}.Release|Win32.ActiveCfg = Release|Win32
		{1D741684-4AD1-4249-9CDD-C4AA3B820A31}.Release|Win32.Build.0 = Release|Win32
		{1D741684-4AD1-4249-9CDD-C4AA3B820A31}.Release|x64.ActiveCfg = Release|x64
		{1D741684-4AD1-4249-9CDD-C4AA3B820A31}.Release|x64.Build.0 = Release|x64
		{4603FC48-5B5B-4749-8B91-EF7FAC2826C7}.Release|Win32.ActiveCfg = Release|Win32
		{4603FC48-5B5B-4749-8B91-EF7FAC2826C7}.Release|Win32.Build.0 = Release|Win32
		{4603FC48-5B5B-4749-8B91-EF7FAC2826C7}.Release|x64.ActiveCfg = Release|x64
		{4603FC48-5B5B-4749-8B91-EF7FAC2826C7}.Release|x64.Build.0 = Release|x64
		{C741E930-C63B-4027-B4A9-0B0C1EAC6CEA}.Release|Win32.ActiveCfg = Release|Win32
		{C741E930-C63B-4027-B4A9-0B0C1EAC6CEA}.Release|Win32.Build.0 = Release|Win32
		{C741E930-C63B-4027-B4A9-0B0C1EAC6CEA}.Release|x64.ActiveCfg = Release|x64
		{C741E930-C63B-4027-B4A9-0B0C1EAC6CEA}.Release|x64.Build.0 = Release|x64
		{823B3040-6519-43F6-9918-FAD1FC984F2C}.Release|Win32.ActiveCfg = Release|Win32
		{823B3040-6519-43F6-9918-FAD1FC984F2C}.Release|Win32.Build.0 = Release|Win32
		{823B3040-6519-43F6-9918-FAD1FC984F2C}.Release|x64.ActiveCfg = Release|x64
		{823B3040-6519-43F6-9918-FAD1FC984F2C}.Release|x64.Build.0 = Release|x64
		{3E554F5A-C1DB-4154-ADA4-64F63BB12079}.Release|Win32.ActiveCfg = Release|Win32
		{3E554F5A-C1DB-4154-ADA4-64F63BB12079}.Release|Win32.Build.0 = Release|Win32
		{3E554F5A-C1DB-4154-ADA4-64F63BB12079}.Release|x64.ActiveCfg = Release|x64
		{3E554F5A-C1DB-4154-ADA4-64F63BB12079}.Release|x64.Build.0 = Release|x64
		{90A561F7-55CF-4786-A512-D8CD57F474B7}.Release|Win32.ActiveCfg = Release|Win32
		{90A561F7-55CF-4786-A512-D8CD57F474B7}.Release|Win32.Build.0 = Release|Win32
		{90A561F7-55CF-4786-A512-D8CD57F474B7}.Release|x64.ActiveCfg = Release|x64
		{90A561F7-55CF-4786-A512-D8CD57F474B7}.Release|x64.Build.0 = Release|x64
		{27134393-7B6C-4CA9-8D75-168B28689196}.Release|Win32.ActiveCfg = Release|Win32
		{27134393-7B6C-4CA9-8D75-168B28689196}.Release|Win32.Build.0 = Release|Win32
		{27134393-7B6C-4CA9-8D75-168B28689196}.Release|x64.ActiveCfg = Release|x64
		{27134393-7B6C-4CA9-8D75-168B28689196}.Release|x64.Build.0 = Release|x64
		{C299A4AC-C6FB-4D3E-98DD-8721E009EBFD}.Release|Win32.ActiveCfg = Release|Win32
		{C299A4AC-C6FB-4D3E-98DD-8721E009EBFD}.Release|Win32.Build.0 = Release|Win32
		{C299A4AC-C6FB-4D3E-98DD-8721E009EBFD}.Release|x64.ActiveCfg = Release|x64
		{C299A4AC-C6FB-4D3E-98DD-8721E009EBFD}.Release|x64.Build.0 = Release|x64
		{7673FFDD-DE1B-4A60-B2E1-8102BB5C5502}.Release|Win32.ActiveCfg = Release|Win32
		{7673FFDD-DE1B-4A60-B2E1-8102BB5C5502}.Release|Win32.Build.0 = Release|Win32
		{7673FFDD-DE1B-4A60-B2E1-8102BB5C5502}.Release|x64.ActiveCfg = Release|x64
		{7673FFDD-DE1B-4A60-B2E1-8102BB5C5502}.Release|x64.Build.0 = Release|x64
		{670535C0-2433-4930-84D9-A85576060B4A}.Release|Win32.ActiveCfg = Release|Win32
		{670535C0-2433-4930-84D9-A85576060B4A}.Release|Win32.Build.0 = Release|Win32
		{670535C0-2433-4930-84D9-A85576060B4A}.Release|x64.ActiveCfg = Release|x64
		{670535C0-2433-4930-84D9-A85576060B4A}.Release|x64.Build.0 = Release|x64
		{3467416B-5124-4C71-BEA2-7A285B52F074}.Release|Win32.ActiveCfg = Release|Win32
		{3467416B-5124-4C71-BEA2-7A285B52F074}.Release|Win32.Build.0 = Release|Win32
		{3467416B-5124-4C71-BEA2-7A285B52F074}.Release|x64.ActiveCfg = Release|x64
		{3467416B-5124-4C71-BEA2-7A285B52F074}.Release|x64.Build.0 = Release|x64
		{329A8233-5D7F-4C87-9515-894ABB32B7BF}.Release|Win32.ActiveCfg = Release|Win32
		{329A8233-5D7F-4C87-9515-894ABB32B7BF}.Release|Win32.Build.0 = Release|Win32
		{329A8233-5D7F-4C87-9515-894ABB32B7BF}.Release|x64.ActiveCfg = Release|x64
		{329A8233-5D7F-4C87-9515-894ABB32B7BF}.Release|x64.Build.0 = Release|x64
		{1B396184-C850-4D07-9C2B-0E0B2E2A5561}.Release|Win32.ActiveCfg = Release|Win32
		{1B396184-C850-4D07-9C2B-0E0B2E2A5561}.Release|Win32.Build.0 = Release|Win32
		{1B396184-C850-4D07-9C2B-0E0B2E2A5561}.Release|x64.ActiveCfg = Release|x64
		{1B396184-C850-4D07-9C2B-0E0B2E2A5561}.Release|x64.Build.0 = Release|x64
		{97E28CAB-D0A9-4270-8673-633228E8B24C}.Release|Win32.ActiveCfg = Release|Win32
		{97E28CAB-D0A9-4270-8673-633228E8B24C}.Release|Win32.Build.0 = Release|Win32
		{97E28CAB-D0A9-4270-8673-633228E8B24C}.Release|x64.ActiveCfg = Release|x64
		{97E28CAB-D0A9-4270-8673-633228E8B24C}.Release|x64.Build.0 = Release|x64
		{39172035-CC5F-4140-9118-E1A9AD311FC7}.Release|Win32.ActiveCfg = Release|Win32
		{39172035-CC5F-4140-9118-E1A9AD311FC7}.Release|Win32.Build.0 = Release|Win32
		{39172035-CC5F-4140-9118-E1A9AD311FC7}.Release|x64.ActiveCfg = Release|x64
		{39172035-CC5F-4140-9118-E1A9AD311FC7}.Release|x64.Build.0 = Release|x64
		{42B3AC73-54AF-4B99-BF5E-9953B2831BB9}.Release|Win32.ActiveCfg = Release|Win32
		{42B3AC73-54AF-4B99-BF5E-9953B2831BB9}.Release|Win32.Build.0 = Release|Win32
		{42B3AC73-54AF-4B99-BF5E-9953B2831BB9}.Release|x64.ActiveCfg = Release|x64
		{42B3AC73-54AF-4B99-BF5E-9953B2831BB9}.Release|x64.Build.0 = Release|x64
		{E1CBDBEE-887A-4CD8-9D3E-59A52CA2E45E}.Release|Win32.ActiveCfg = Release|Win32
		{E1CBDBEE-887A-4CD8-9D3E-59A52CA2E45E}.Release|Win32.Build.0 = Release|Win32
		{E1CBDBEE-887A-4CD8-9D3E-59A52CA2E45E}.Release|x64.ActiveCfg = Release|Win32
		{E1CBDBEE-887A-4CD8-9D3E-59A52CA2E45E}.Release|x64.Build.0 = Release|Win32
		{D4B7A4C2-1029-4273-8DA1-232668DD7B0F}.Release|Win32.ActiveCfg = Release|Win32
		{D4B7A4C2-1029-4273-8DA1-232668DD7B0F}.Release|Win32.Build.0 = Release|Win32
		{D4B7A4C2-1029-4273-8DA1-232668DD7B0F}.Release|x64.ActiveCfg = Release|Win32
		{1108C81D-B787-4D05-94F6-493818D691DE}.Release|Win32.ActiveCfg = Release|Win32
		{1108C81D-B787-4D05-94F6-493818D691DE}.Release|Win32.Build.0 = Release|Win32
		{1108C81D-B787-4D05-94F6-493818D691DE}.Release|x64.ActiveCfg = Release|Win32
		{2EC27263-901B-4753-9969-5DDD549D7E30}.Release|Win32.ActiveCfg = Release|Win32
		{2EC27263-901B-4753-9969-5DDD549D7E30}.Release|Win32.Build.0 = Release|Win32
		{2EC27263-901B-4753-9969-5DDD549D7E30}.Release|x64.ActiveCfg = Release|Win32
		{ED148ED9-BC56-4B18-8D67-1B81113AE659}.Release|Win32.ActiveCfg = Release|Win32
		{ED148ED9-BC56-4B18-8D67-1B81113AE659}.Release|Win32.Build.0 = Release|Win32
		{ED148ED9-BC56-4B18-8D67-1B81113AE659}.Release|x64.ActiveCfg = Release|Win32
		{DA1F0F34-AC10-497B-9AD2-3811AEDF6A7A}.Release|Win32.ActiveCfg = Release|Win32
		{DA1F0F34-AC10-497B-9AD2-3811AEDF6A7A}.Release|Win32.Build.0 = Release|Win32
		{DA1F0F34-AC10-497B-9AD2-3811AEDF6A7A}.Release|x64.ActiveCfg = Release|Win32
		{0B006084-5491-4DD1-9FD4-31186BDE3D8E}.Release|Win32.ActiveCfg = Release|Win32
		{0B006084-5491-4DD1-9FD4-31186BDE3D8E}.Release|Win32.Build.0 = Release|Win32
		{0B006084-5491-4DD1-9FD4-31186BDE3D8E}.Release|x64.ActiveCfg = Release|Win32
		{F40E65B1-8ACB-404F-844D-F8295FFB22AE}.Release|Win32.ActiveCfg = Release|Win32
		{F40E65B1-8ACB-404F-844D-F8295FFB22AE}.Release|Win32.Build.0 = Release|Win32
		{F40E65B1-8ACB-404F-844D-F8295FFB22AE}.Release|x64.ActiveCfg = Release|Win32
		{0462B3DE-9208-422D-8C61-C90FDD2D97DF}.Release|Win32.ActiveCfg = Release|Win32
		{0462B3DE-9208-422D-8C61-C90FDD2D97DF}.Release|Win32.Build.0 = Release|Win32
		{0462B3DE-9208-422D-8C61-C90FDD2D97DF}.Release|x64.ActiveCfg = Release|Win32
		{84A07C8F-F16F-4C4F-8EA9-45479D0D5D9D}.Release|Win32.ActiveCfg = Release|Win32
		{84A07C8F-F16F-4C4F-8EA9-45479D0D5D9D}.Release|Win32.Build.0 = Release|Win32
		{84A07C8F-F16F-4C4F-8EA9-45479D0D5D9D}.Release|x64.ActiveCfg = Release|Win32
		{694236F7-9275-4AF7-BE74-A5C7172A4083}.Release|Win32.ActiveCfg = Release|Win32
		{694236F7-9275-4AF7-BE74-A5C7172A4083}.Release|Win32.Build.0 = Release|Win32
		{694236F7-9275-4AF7-BE74-A5C7172A4083}.Release|x64.ActiveCfg = Release|Win32
		{0F0DBACF-7B8D-437C-8C6F-E6551E6EEF90}.Release|Win32.ActiveCfg = Release|Win32
		{0F0DBACF-7B8D-437C-8C6F-E6551E6EEF90}.Release|Win32.Build.0 = Release|Win32
		{0F0DBACF-7B8D-437C-8C6F-E6551E6EEF90}.Release|x64.ActiveCfg = Release|Win32
		{2291A1E3-66FC-4B08-AB12-226C1C673045}.Release|Win32.ActiveCfg = Release|Win32
		{2291A1E3-66FC-4B08-AB12-226C1C673045}.Release|Win32.Build.0 = Release|Win32
		{2291A1E3-66FC-4B08-AB12-226C1C673045}.Release|x64.ActiveCfg = Release|Win32
		{0BBA21A9-83D4-47C5-93C6-DAC1BB40DF75}.Release|Win32.ActiveCfg = Release|Win32
		{0BBA21A9-83D4-47C5-93C6-DAC1BB40DF75}.Release|Win32.Build.0 = Release|Win32
		{0BBA21A9-83D4-47C5-93C6-DAC1BB40DF75}.Release|x64.ActiveCfg = Release|Win32
		{B808DF2C-A716-42C9-B45D-E84E992A89C3}.Release|Win32.ActiveCfg = Release|Win32
		{B808DF2C-A716-42C9-B45D-E84E992A89C3}.Release|Win32.Build.0 = Release|Win32
		{B808DF2C-A716-42C9-B45D-E84E992A89C3}.Release|x64.ActiveCfg = Release|Win32
		{7020A3F7-F14D-4E46-882D-0F7FBC2D9465}.Release|Win32.ActiveCfg = Release|Win32
		{7020A3F7-F14D-4E46-882D-0F7FBC2D9465}.Release|Win32.Build.0 = Release|Win32
		{7020A3F7-F14D-4E46-882D-0F7FBC2D9465}.Release|x64.ActiveCfg = Release|Win32
		{340D6D9D-548F-4456-B6F3-1AEC4B245C23}.Release|Win32.ActiveCfg = Release|Win32
		{340D6D9D-548F-4456-B6F3-1AEC4B245C23}.Release|Win32.Build.0 = Release|Win32
		{340D6D9D-548F-4456-B6F3-1AEC4B245C23}.Release|x64.ActiveCfg = Release|Win32
		{BF1A3D2B-25FA-467B-B623-916226AFF814}.Release|Win32.ActiveCfg = Release|Win32
		{BF1A3D2B-25FA-467B-B623-916226AFF814}.Release|Win32.Build.0 = Release|Win32
		{BF1A3D2B-25FA-467B-B623-916226AFF814}.Release|x64.ActiveCfg = Release|Win32
		{BF1B074F-988C-45D5-89AD-D3A4430F8586}.Release|Win32.ActiveCfg = Release|Win32
		{BF1B074F-988C-45D5-89AD-D3A4430F8586}.Release|Win32.Build.0 = Release|Win32
		{BF1B074F-988C-45D5-89AD-D3A4430F8586}.Release|x64.ActiveCfg = Release|Win32
		{30CE183D-D9EE-4E08-8437-1E59E122752A}.Release|Win32.ActiveCfg = Release|Win32
		{30CE183D-D9EE-4E08-8437-1E59E122752A}.Release|Win32.Build.0 = Release|Win32
		{30CE183D-D9EE-4E08-8437-1E59E122752A}.Release|x64.ActiveCfg = Release|Win32
		{B77BBD3A-2E8D-419E-B67B-B4D35125E09D}.Release|Win32.ActiveCfg = Release|Win32
		{B77BBD3A-2E8D-419E-B67B-B4D35125E09D}.Release|Win32.Build.0 = Release|Win32
		{B77BBD3A-2E8D-419E-B67B-B4D35125E09D}.Release|x64.ActiveCfg = Release|Win32
		{E2E1E0DC-2CA6-4505-93F5-4F4DBDE9B8C5}.Release|Win32.ActiveCfg = Release|Win32
		{E2E1E0DC-2CA6-4505-93F5-4F4DBDE9B8C5}.Release|Win32.Build.0 = Release|Win32
		{E2E1E0DC-2CA6-4505-93F5-4F4DBDE9B8C5}.Release|x64.ActiveCfg = Release|Win32
		{DB43C7A5-070F-4406-9F8F-0723C45C07F8}.Release|Win32.ActiveCfg = Release|Win32
		{DB43C7A5-070F-4406-9F8F-0723C45C07F8}.Release|Win32.Build.0 = Release|Win32
		{DB43C7A5-070F-4406-9F8F-0723C45C07F8}.Release|x64.ActiveCfg = Release|Win32
		{ECA5A83E-CC0F-4C24-A7FD-ABA88C50AD3D}.Release|Win32.ActiveCfg = Release|Win32
		{ECA5A83E-CC0F-4C24-A7FD-ABA88C50AD3D}.Release|Win32.Build.0 = Release|Win32
		{ECA5A83E-CC0F-4C24-A7FD-ABA88C50AD3D}.Release|x64.ActiveCfg = Release|Win32
		{952DA1EF-7A1E-4F7C-8D5B-FFCA8EFC78F4}.Release|Win32.ActiveCfg = Release|Win32
		{952DA1EF-7A1E-4F7C-8D5B-FFCA8EFC78F4}.Release|Win32.Build.0 = Release|Win32
		{952DA1EF-7A1E-4F7C-8D5B-FFCA8EFC78F4}.Release|x64.ActiveCfg = Release|Win32
		{8BD91101-F6B7-4572-B041-6CB62070C88E}.Release|Win32.ActiveCfg = Release|Win32
		{8BD91101-F6B7-4572-B041-6CB62070C88E}.Release|Win32.Build.0 = Release|Win32
		{8BD91101-F6B7-4572-B041-6CB62070C88E}.Release|x64.ActiveCfg = Release|Win32
		{9DF3EA82-FE68-44E7-9B35-F89979B5A243}.Release|Win32.ActiveCfg = Release|Win32
		{9DF3EA82-FE68-44E7-9B35-F89979B5A243}.Release|Win32.Build.0 = Release|Win32
		{9DF3EA82-FE68-44E7-9B35-F89979B5A243}.Release|x64.ActiveCfg = Release|Win32
		{A8FA38A0-67C2-4175-888C-6F955DCC8FF4}.Release|Win32.ActiveCfg = Release|Win32
		{A8FA38A0-67C2-4175-888C-6F955DCC8FF4}.Release|Win32.Build.0 = Release|Win32
		{A8FA38A0-67C2-4175-888C-6F955DCC8FF4}.Release|x64.ActiveCfg = Release|Win32
		{A6DB21F3-6DB4-4A1B-851D-49D3AA39E423}.Release|Win32.ActiveCfg = Release|Win32
		{A6DB21F3-6DB4-4A1B-851D-49D3AA39E423}.Release|Win32.Build.0 = Release|Win32
		{A6DB21F3-6DB4-4A1B-851D-49D3AA39E423}.Release|x64.ActiveCfg = Release|Win32
		{EAEF35E8-AA1A-43BC-B644-436BDF0AB0B4}.Release|Win32.ActiveCfg = Release|Win32
		{EAEF35E8-AA1A-43BC-B644-436BDF0AB0B4}.Release|Win32.Build.0 = Release|Win32
		{EAEF35E8-AA1A-43BC-B644-436BDF0AB0B4}.Release|x64.ActiveCfg = Release|Win32
		{C259E547-8375-4DAD-923A-EA47EAE44628}.Release|Win32.ActiveCfg = Release|Win32
		{C259E547-8375-4DAD-923A-EA47EAE44628}.Release|Win32.Build.0 = Release|Win32
		{C259E547-8375-4DAD-923A-EA47EAE44628}.Release|x64.ActiveCfg = Release|Win32
		{F10997E6-057E-4B43-BC51-369D6A5AB20B}.Release|Win32.ActiveCfg = Release|Win32
		{F10997E6-057E-4B43-BC51-369D6A5AB20B}.Release|Win32.Build.0 = Release|Win32
		{F10997E6-057E-4B43-BC51-369D6A5AB20B}.Release|x64.ActiveCfg = Release|Win32
		{1D505749-0F4C-4A47-8B06-8EBAA502451D}.Release|Win32.ActiveCfg = Release|Win32
		{1D505749-0F4C-4A47-8B06-8EBAA502451D}.Release|Win32.Build.0 = Release|Win32
		{1D505749-0F4C-4A47-8B06-8EBAA502451D}.Release|x64.ActiveCfg = Release|Win32
		{C7AFA1EC-8D74-4715-B49A-59D597022904}.Release|Win32.ActiveCfg = Release|Win32
		{C7AFA1EC-8D74-4715-B49A-59D597022904}.Release|Win32.Build.0 = Release|Win32
		{C7AFA1EC-8D74-4715-B49A-59D597022904}.Release|x64.ActiveCfg = Release|Win32
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal
blob
data 23819
<?xml version="1.0" encoding="Windows-1252"?>
<VisualStudioProject
	ProjectType="Visual C++"
	Version="8.00"
	Name="libged"
	ProjectGUID="{E1CBDBEE-887A-4CD8-9D3E-59A52CA2E45E}"
	RootNamespace="libged"
	>
	<Platforms>
		<Platform
			Name="Win32"
		/>
		<Platform
			Name="x64"
		/>
	</Platforms>
	<ToolFiles>
	</ToolFiles>
	<Configurations>
		<Configuration
			Name="Release|Win32"
			OutputDirectory=".\$(PlatformName)\$(ConfigurationName)"
			IntermediateDirectory=".\$(PlatformName)\$(ConfigurationName)"
			ConfigurationType="2"
			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC71.vsprops"
			UseOfMFC="0"
			ATLMinimizesCRunTimeLibraryUsage="false"
			CharacterSet="2"
			>
			<Tool
				Name="VCPreBuildEventTool"
			/>
			<Tool
				Name="VCCustomBuildTool"
			/>
			<Tool
				Name="VCXMLDataGeneratorTool"
			/>
			<Tool
				Name="VCWebServiceProxyGeneratorTool"
			/>
			<Tool
				Name="VCMIDLTool"
				PreprocessorDefinitions="NDEBUG"
				MkTypLibCompatible="true"
				SuppressStartupBanner="true"
				TargetEnvironment="1"
				TypeLibraryName=".\$(PlatformName)\$(ConfigurationName)/libged.tlb"
				HeaderFileName=""
			/>
			<Tool
				Name="VCCLCompilerTool"
				Optimization="2"
				InlineFunctionExpansion="1"
				AdditionalIncludeDirectories="../../../include;../../../src/libged;../../../src/other/libregex;../../../src/other/tcl/generic;../../../src/other/tcl/win;../../../src/other/libz;../../../src/other/opennurbs;../../../src/other/tnt;../../../src/other/libpng"
				PreprocessorDefinitions="WIN32;NDEBUG;_WINDOWS;_USRDLL;__win32;ON_DLL_IMPORTS;GED_EXPORT_DLL;BRLCAD_DLL;HAVE_CONFIG_H;BRLCADBUILD;NEW_TOPS_BEHAVIOR;OBJ_BREP=1;TCL_THREADS=1;_RT_DECL_IFREE;_CRT_SECURE_NO_WARNINGS"
				StringPooling="true"
				BasicRuntimeChecks="0"
				RuntimeLibrary="2"
				EnableFunctionLevelLinking="true"
				TreatWChar_tAsBuiltInType="false"
				RuntimeTypeInfo="true"
				UsePrecompiledHeader="0"
				PrecompiledHeaderFile=".\$(PlatformName)\$(ConfigurationName)/libged.pch"
				AssemblerListingLocation=".\$(PlatformName)\$(ConfigurationName)/"
				ObjectFile=".\$(PlatformName)\$(ConfigurationName)/"
				ProgramDataBaseFileName=".\$(PlatformName)\$(ConfigurationName)/"
				WarningLevel="3"
				SuppressStartupBanner="true"
				Detect64BitPortabilityProblems="false"
				DebugInformationFormat="0"
				CompileAs="0"
			/>
			<Tool
				Name="VCManagedResourceCompilerTool"
			/>
			<Tool
				Name="VCResourceCompilerTool"
				PreprocessorDefinitions="NDEBUG"
				Culture="1033"
			/>
			<Tool
				Name="VCPreLinkEventTool"
			/>
			<Tool
				Name="VCLinkerTool"
				AdditionalDependencies="tcl85.lib libbu.lib libbn.lib libsysv.lib libregex.lib opennurbs.lib librt.lib libwdb.lib libpng.lib ws2_32.lib"
				OutputFile=".\$(PlatformName)\$(ConfigurationName)/libged.dll"
				LinkIncremental="1"
				SuppressStartupBanner="true"
				AdditionalLibraryDirectories="../../../brlcadInstall/lib"
				GenerateDebugInformation="false"
				ProgramDatabaseFile=".\$(PlatformName)\$(ConfigurationName)/libged.pdb"
				ImportLibrary=".\$(PlatformName)\$(ConfigurationName)/libged.lib"
				TargetMachine="1"
			/>
			<Tool
				Name="VCALinkTool"
			/>
			<Tool
				Name="VCManifestTool"
			/>
			<Tool
				Name="VCXDCMakeTool"
			/>
			<Tool
				Name="VCBscMakeTool"
			/>
			<Tool
				Name="VCFxCopTool"
			/>
			<Tool
				Name="VCAppVerifierTool"
			/>
			<Tool
				Name="VCWebDeploymentTool"
			/>
			<Tool
				Name="VCPostBuildEventTool"
				CommandLine="copy &quot;$(TargetPath)&quot; ..\..\..\brlcadInstall\bin&#x0D;&#x0A;copy &quot;$(TargetDir)&quot;libged.lib ..\..\..\brlcadInstall\lib&#x0D;&#x0A;"
			/>
		</Configuration>
		<Configuration
			Name="Release|x64"
			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)"
			ConfigurationType="2"
			>
			<Tool
				Name="VCPreBuildEventTool"
			/>
			<Tool
				Name="VCCustomBuildTool"
			/>
			<Tool
				Name="VCXMLDataGeneratorTool"
			/>
			<Tool
				Name="VCWebServiceProxyGeneratorTool"
			/>
			<Tool
				Name="VCMIDLTool"
				PreprocessorDefinitions="NDEBUG"
				MkTypLibCompatible="true"
				SuppressStartupBanner="true"
				TargetEnvironment="3"
				TypeLibraryName=".\$(PlatformName)\$(ConfigurationName)/libged.tlb"
				HeaderFileName=""
			/>
			<Tool
				Name="VCCLCompilerTool"
				Optimization="2"
				InlineFunctionExpansion="1"
				AdditionalIncludeDirectories="../../../include;../../../src/libged;../../../src/other/tcl/generic;../../../src/other/tcl/win;../../../src/other/libz;../../../src/other/opennurbs;../../../src/other/tnt;../../../src/other/libpng"
				PreprocessorDefinitions="WIN32;NDEBUG;_WINDOWS;_USRDLL;__win32;ON_DLL_IMPORTS;GED_EXPORT_DLL;BRLCAD_DLL;HAVE_CONFIG_H;BRLCADBUILD;NEW_TOPS_BEHAVIOR;OBJ_BREP=1;TCL_THREADS=1;_RT_DECL_IFREE;_CRT_SECURE_NO_WARNINGS"
				StringPooling="true"
				BasicRuntimeChecks="0"
				RuntimeLibrary="2"
				EnableFunctionLevelLinking="true"
				TreatWChar_tAsBuiltInType="false"
				RuntimeTypeInfo="true"
				UsePrecompiledHeader="0"
				PrecompiledHeaderFile=".\$(PlatformName)\$(ConfigurationName)/libged.pch"
				AssemblerListingLocation=".\$(PlatformName)\$(ConfigurationName)/"
				ObjectFile=".\$(PlatformName)\$(ConfigurationName)/"
				ProgramDataBaseFileName=".\$(PlatformName)\$(ConfigurationName)/"
				WarningLevel="3"
				SuppressStartupBanner="true"
				Detect64BitPortabilityProblems="false"
				DebugInformationFormat="0"
				CompileAs="0"
			/>
			<Tool
				Name="VCManagedResourceCompilerTool"
			/>
			<Tool
				Name="VCResourceCompilerTool"
			/>
			<Tool
				Name="VCPreLinkEventTool"
			/>
			<Tool
				Name="VCLinkerTool"
				AdditionalDependencies="tcl85.lib libbu.lib libbn.lib libsysv.lib libregex.lib opennurbs.lib librt.lib libwdb.lib libpng.lib ws2_32.lib"
				OutputFile=".\$(PlatformName)\$(ConfigurationName)/libged.dll"
				LinkIncremental="1"
				SuppressStartupBanner="true"
				AdditionalLibraryDirectories="../../../brlcadInstall/lib"
				GenerateDebugInformation="false"
				ProgramDatabaseFile=".\$(PlatformName)\$(ConfigurationName)/libged.pdb"
				ImportLibrary=".\$(PlatformName)\$(ConfigurationName)/libged.lib"
				TargetMachine="1"
			/>
			<Tool
				Name="VCALinkTool"
			/>
			<Tool
				Name="VCManifestTool"
			/>
			<Tool
				Name="VCXDCMakeTool"
			/>
			<Tool
				Name="VCBscMakeTool"
			/>
			<Tool
				Name="VCFxCopTool"
			/>
			<Tool
				Name="VCAppVerifierTool"
			/>
			<Tool
				Name="VCWebDeploymentTool"
			/>
			<Tool
				Name="VCPostBuildEventTool"
				CommandLine="copy &quot;$(TargetPath)&quot; ..\..\..\brlcadInstall$(PlatformName)\bin&#x0D;&#x0A;copy &quot;$(TargetDir)&quot;libged.lib ..\..\..\brlcadInstall$(PlatformName)\lib&#x0D;&#x0A;"
			/>
		</Configuration>
	</Configurations>
	<References>
	</References>
	<Files>
		<Filter
			Name="Source Files"
			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat;f90;for;f;fpp"
			>
			<File
				RelativePath="..\..\..\src\libged\3ptarb.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\adc.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\adjust.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\ae2dir.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\aet.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\analyze.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\arb.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\arced.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\arot.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\attr.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\autoview.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\bev.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\bigE.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\binary.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\blast.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\bot_condense.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\bot_decimate.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\bot_dump.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\bot_face_fuse.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\bot_face_sort.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\bot_merge.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\bot_smooth.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\bot_split.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\bot_vertex_fuse.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\cat.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\center.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\clip.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\clone.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\color.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\comb.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\comb_color.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\comb_std.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\concat.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\copy.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\copyeval.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\copymat.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\cpi.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\dbip.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\decompose.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\delay.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\dg_obj.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\dir2ae.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\draw.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\dump.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\dup.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\eac.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\echo.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\edcodes.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\edcomb.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\editit.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\edmater.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\erase.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\erase_all.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\expand.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\eye.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\eye_pos.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\facetize.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\find.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\form.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\fracture.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\ged.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\get.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\get_autoview.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\get_comb.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\get_eyemodel.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\get_obj_bounds.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\get_type.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\glob.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\globals.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\gqa.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\grid.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\group.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\hide.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\how.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\illum.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\importFg4Section.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\inside.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\instance.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\isize.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\item.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\keep.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\keypoint.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\kill.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\killall.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\killrefs.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\killtree.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\label.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\list.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\loadview.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\log.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\lookat.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\ls.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\lt.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\m2v_point.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\make.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\make_bb.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\make_name.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\match.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\mater.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\mirror.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\model2view.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\move.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\move_all.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\move_arb_edge.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\move_arb_face.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\mrot.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\nirt.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\nmg_collapse.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\nmg_simplify.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\ocenter.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\open.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\orient.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\orotate.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\oscale.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\otranslate.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\overlay.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\pathlist.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\pathsum.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\perspective.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\plot.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\pmat.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\pmodel2view.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\png.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\pov.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\prcolor.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\prefix.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\preview.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\ps.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\push.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\put.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\put_comb.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\putmat.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\qray.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\quat.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\qvrot.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\rcodes.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\rect.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\red.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\regdef.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\region.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\remove.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\report.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\rfarb.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\rmap.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\rmat.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\rmater.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\rot.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\rot_point.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\rotate_about.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\rotate_arb_face.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\rrt.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\rt.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\rtabort.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\rtcheck.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\savekey.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\saveview.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\scale.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\search.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\set_output_script.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\set_transparency.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\set_uplotOutputMode.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\setview.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\shaded_mode.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\shader.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\shells.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\showmats.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\size.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\slew.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\solids_on_ray.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\summary.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\sync.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\tables.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\title.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\tol.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\tops.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\tra.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\trace.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\track.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\tree.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\typein.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\unhide.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\units.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\v2m_point.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\vdraw.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\version.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\view.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\view2model.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\view_obj.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\viewdir.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\vrot.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\vutil.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\wcodes.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\wdb_bigE.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\wdb_comb_std.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\wdb_importFg4Section.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\wdb_nirt.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\wdb_obj.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\wdb_qray.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\wdb_track.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\wdb_vdraw.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\whatid.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\which.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\which_shader.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\who.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\wmater.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\xpush.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\ypr.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\zap.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\libged\zoom.c"
				>
			</File>
		</Filter>
		<Filter
			Name="Header Files"
			Filter="h;hpp;hxx;hm;inl;fi;fd"
			>
		</Filter>
		<Filter
			Name="Resource Files"
			Filter="ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe"
			>
		</Filter>
	</Files>
	<Globals>
	</Globals>
</VisualStudioProject>
blob
data 666

SUBDIRS = beset
bin_PROGRAMS = \
	g_diff \
	g_lint \
	g_qa

noinst_PROGRAMS = \
	g_transfer

AM_CPPFLAGS = ${TCL_CPPFLAGS}

g_diff_SOURCES = g_diff.c
g_diff_LDADD = ${RT} ${GED}

g_transfer_SOURCES = g_transfer.c
g_transfer_LDADD = ${RT} ${PKG}

g_lint_SOURCES = g_lint.c
g_lint_LDADD = ${RT}

g_qa_SOURCES = g_qa.c
g_qa_LDADD = ${RT} ${GED}

man_MANS = \
	g_diff.1 \
	g_lint.1 \
	g_qa.1

EXTRA_DIST = $(man_MANS)

sample_applicationsdir=$(SAMPLE_APPLICATIONS_DIR)
sample_applications_DATA = g_transfer.c

include $(top_srcdir)/misc/Makefile.defs

FAST_OBJECTS = \
	$(g_diff_OBJECTS) \
	$(g_lint_OBJECTS) \
	$(g_qa_OBJECTS) \
	$(noinst_PROGRAMS) \
	$(bin_PROGRAMS)
blob
data 2475
/*                          G _ Q A . C
 * BRL-CAD
 *
 * Copyright (c) 2005-2008 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @file g_qa.c
 *
 * Author: Lee Butler
 *
 * perform quantitative analysis checks on geometry
 *
 * XXX need to look at gap computation
 *
 * plot the points where overlaps start/stop
 *
 *	Designed to be a framework for 3d sampling of the geometry volume.
 */

#include "common.h"
#include "bio.h"

#include "cmd.h"
#include "ged.h"

static char usage[] = "Usage: %s [options] model object [object...]\n";

/*
 *	M A I N
 *
 */
int
main(int argc, char *argv[])
{
    register int i, j;
    int db_index;
    char c;
    const char *av[MAXARGS];
    struct ged *gedp;

    bu_opterr = 0;
    bu_optind = 1;

    /* Get past command line options. */
    while ((c=bu_getopt(argc, argv, "A:a:de:f:g:Gn:N:pP:rS:s:t:U:u:vV:W:")) != EOF) {
	switch (c) {
	case 'A':
	case 'a':
	case 'e':
	case 'd':
	case 'f':
	case 'g':
	case 'G':
	case 'n':
	case 'N':
	case 'p':
	case 'P':
	case 'r':
	case 'S':
	case 't':
	case 'v':
	case 'V':
	case 'W':
	case 'U':
	case 'u':
	    break;
	case '?':
	case 'h':
	default:
	    bu_exit(1, usage, argv[0]);
	    break;
	}
    }

    if (bu_optind >= argc) {
	bu_exit(1, usage, argv[0]);
    }

    db_index = bu_optind;
    for (i = j = 0; i < argc; ++i) {
	if (i == db_index)
	    continue;

	av[j] = argv[i];
	++j;
    }
    av[j] = (char *)0;

    if ((gedp = ged_open("db", argv[db_index], 1)) == GED_NULL) {
	bu_exit(1, usage, argv[0]);
    }

    (void)ged_gqa(gedp, j, av);
    if (bu_vls_strlen(&gedp->ged_result_str) > 0)
	bu_log("%s", bu_vls_addr(&gedp->ged_result_str));
    ged_close(gedp);

    return 0;
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * indent-tabs-mode: t
 * c-file-style: "stroustrup"
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
blob
data 13056
/*                     S E M A P H O R E . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2008 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @addtogroup thread */
/** @{ */
/** @file semaphore.c
 *
 * @brief semaphore implementation
 *
 * Machine-specific routines for parallel processing.
 * Primarily for handling semaphores for critical sections.
 *
 * The new paradigm:  semaphores are referred to, not by a pointer,
 * but by a small integer.  This module is now responsible for obtaining
 * whatever storage is needed to implement each semaphore.
 *
 * Note that these routines can't use bu_log() for error logging,
 * because bu_log() accquires semaphore #0 (BU_SEM_SYSCALL).
 */

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <math.h>
#include "bu.h"

#ifdef CRAY
# include <sys/category.h>
# include <sys/resource.h>
# include <sys/types.h>
# ifdef CRAY1
#  include <sys/machd.h>	/* For HZ */
# endif
struct bu_semaphores {
    long	magic;
    long	p;
};
# define DEFINED_BU_SEMAPHORES	1
#endif

#ifdef CRAY2
#undef MAXINT
# include <sys/param.h>
#endif

#if defined(alliant) && !defined(i860)
/* Alliant FX/8 */
# include <cncall.h>
struct bu_semaphores {
    long	magic;
    char	c;
};
# define DEFINED_BU_SEMAPHORES	1
#endif

#if (defined(sgi) && defined(mips)) || (defined(__sgi) && defined(__mips))
# define SGI_4D	1
# define _SGI_SOURCE	1	/* IRIX 5.0.1 needs this to def M_BLKSZ */
# define _BSD_TYPES	1	/* IRIX 5.0.1 botch in sys/prctl.h */
# include <sys/types.h>
# include <ulocks.h>
/* ulocks.h #include's <limits.h> and <malloc.h> */
/* ulocks.h #include's <task.h> for getpid stuff */
/* task.h #include's <sys/prctl.h> */
# include <malloc.h>
/* <malloc.h> #include's <stddef.h> */

#ifdef HAVE_SYS_WAIT_H
#  include <sys/wait.h>
#endif

static char bu_lockfile[MAXPATHLEN] = {0};

static usptr_t		*bu_lockstuff = 0;
extern int		_utrace;

struct bu_semaphores {
    long	magic;
    ulock_t	ltp;
};
# define DEFINED_BU_SEMAPHORES	1
#endif /* SGI_4D */

/* XXX May need to set _SGI_MP_SOURCE */

#ifdef ardent
#	include <thread.h>
struct bu_semaphores {
    long	magic;
    char	sem;
};
# define DEFINED_BU_SEMAPHORES	1
#endif

#if defined(convex) || defined(__convex__)
struct bu_semaphores {
    long	magic;
    long	sem;
};
# define DEFINED_BU_SEMAPHORES	1
#endif

#if defined(n16)
#	include <parallel.h>
#	include <sys/sysadmin.h>
struct bu_semaphores {
    long	magic;
    char	sem;
};
# define DEFINED_BU_SEMAPHORES	1
#endif

#include "bio.h"

/*
 * multithreading support for SunOS 5.X / Solaris 2.x
 */
#if defined(SUNOS) && SUNOS >= 52
#	include <sys/unistd.h>
#	include <thread.h>
#	include <synch.h>
struct bu_semaphores {
    long	magic;
    mutex_t	mu;
};
# define DEFINED_BU_SEMAPHORES	1
#endif	/* SUNOS */

/*
 * multithread support built on POSIX Threads (pthread) library.
 */
#ifdef HAVE_PTHREAD_H
#	include <pthread.h>
#  if !defined(sgi)
struct bu_semaphores {
    long	magic;
    pthread_mutex_t	mu;
};
#	define DEFINED_BU_SEMAPHORES	1
#  endif
#endif


#define	BU_SEMAPHORE_MAGIC		0x62757365

#if defined(SGI_4D)
/**
 * B U _ S E M A P H O R E _ S G I _ I N I T
 */
static void
bu_semaphore_sgi_init()
{
    FILE *fp;
    /*
     * First time through.
     * Use this opportunity to tune malloc().  It needs it!
     * Default for M_BLKSZ is 8k.
     */
    if (mallopt(M_BLKSZ, 128*1024) != 0) {
	fprintf(stderr, "bu_semaphore_sgi_init: mallopt() failed\n");
    }

    /* Now, set up the lock arena */
    fp = bu_temp_file(bu_lockfile, MAXPATHLEN);

    if (bu_debug & BU_DEBUG_PARALLEL) {
	if (usconfig(CONF_LOCKTYPE, _USDEBUGPLUS) == -1)
	    perror("usconfig CONF_LOCKTYPE");
    }
    /*
     * Note that libc mp debugging to stderr can be enabled by saying
     * int _utrace=1;
     */

    /* Cause lock file to vanish on exit */
    usconfig(CONF_ARENATYPE, US_SHAREDONLY);

    /* Set maximum number of procs that can share this arena */
    usconfig(CONF_INITUSERS, bu_avail_cpus()+1);

    if (bu_debug & BU_DEBUG_PARALLEL) {
	/* This is a big performance hit, but may find bugs */
	usconfig(CONF_LOCKTYPE, US_DEBUG);
    } else {
	usconfig(CONF_LOCKTYPE, US_NODEBUG);
    }

    /* Initialize arena */
    bu_lockstuff = usinit(bu_lockfile);
    if (bu_lockstuff == 0) {
	perror("usinit");
	fprintf(stderr, "bu_semaphore_sgi_init: usinit(%s) failed, unable to allocate lock space\n", bu_lockfile);
	bu_bomb("fatal semaphore initialization failure");
    }
}
#endif

#if defined(convex) || defined(__convex__)
/**
 * B U _ C O N V E X _ A C Q U I R E
 */
static void
bu_convex_acquire(p)
    register long *p;
{
    asm("getlck:");
    asm("	tas	@0(ap)");	/* try to set the lock */
    asm("	jbra.f	getlck");	/* loop until successful */
}
#endif /* convex */

#if defined(PARALLEL) || defined(DEFINED_BU_SEMAPHORES)
static unsigned int		bu_nsemaphores = 0;
static struct bu_semaphores	*bu_semaphores = (struct bu_semaphores *)NULL;
#endif

/**
 * B U _ S E M A P H O R E _ I N I T
 *
 * Prepare 'nsemaphores' independent critical section semaphores.
 * Die on error.
 * Takes the place of 'n' separate calls to old RES_INIT().
 * Start by allocating array of "struct bu_semaphores", which has been
 * arranged to contain whatever this system needs.
 *
 */
void
bu_semaphore_init(unsigned int nsemaphores)
{
#if !defined(PARALLEL) && !defined(DEFINED_BU_SEMAPHORES)
    return;					/* No support on this hardware */
#else
    unsigned int	i;

    if (bu_nsemaphores != 0)  return;	/* Already called */
    bu_semaphores = (struct bu_semaphores *)calloc(nsemaphores, sizeof(struct bu_semaphores));
    if (!bu_semaphores) {
	fprintf(stderr, "bu_semaphore_init(): could not allocate space for %d semaphores of len %ld\n",
		nsemaphores, (long)sizeof(struct bu_semaphores));
	exit(2); /* cannot call bu_exit() here */
    }

    /*
     * Begin vendor-specific initialization sections.
     */

#	if defined(alliant)
    for (i=0; i < nsemaphores; i++) {
	bu_semaphores[i].magic = BU_SEMAPHORE_MAGIC;
	(void) initialize_lock(&bu_semaphores[i].c);
    }
#	endif

#	ifdef ardent
    for (i=0; i < nsemaphores; i++) {
	bu_semaphores[i].magic = BU_SEMAPHORE_MAGIC;
	bu_semaphores[i].sem = 1;	/* mark as released */
    }
#	endif

#	if defined(convex) || defined(__convex__)
    for (i=0; i < nsemaphores; i++) {
	bu_semaphores[i].magic = BU_SEMAPHORE_MAGIC;
	bu_semaphores[i].sem = 0;	/* mark as released */
    }
#	endif

#	ifdef CRAY
    for (i=0; i < nsemaphores; i++) {
	bu_semaphores[i].magic = BU_SEMAPHORE_MAGIC;
	LOCKASGN(&bu_semaphores[i].p);
    }
#	endif /* CRAY */

#	if defined(n16)
    /*
     * Encore MultiMax.
     * While the manual suggests that one should use spin_create()
     * to aquire a new control structure for spin locking, it turns
     * out that the library support for that simply malloc()s a 1-byte
     * area to contain the lock, and sets it to PAR_UNLOCKED.
     */
    for (i=0; i < nsemaphores; i++) {
	bu_semaphores[i].magic = BU_SEMAPHORE_MAGIC;
	bu_semaphores[i].sem = PAR_UNLOCKED;
    }
#	endif

#	ifdef SGI_4D
    bu_semaphore_sgi_init();
    for (i=0; i < nsemaphores; i++) {
	bu_semaphores[i].magic = BU_SEMAPHORE_MAGIC;
	if ((bu_semaphores[i].ltp = usnewlock(bu_lockstuff)) == NULL) {
	    perror("usnewlock");
	    fprintf(stderr, "bu_semaphore_init: usnewlock() failed, unable to allocate lock [%d]\n", i);
	    bu_bomb("fatal semaphore initialization failure");
	}
    }
#	endif

#	ifdef SUNOS
    for (i=0; i < nsemaphores; i++) {
	bu_semaphores[i].magic = BU_SEMAPHORE_MAGIC;
	if (mutex_init(&bu_semaphores[i].mu, USYNC_THREAD, NULL)) {
	    fprintf(stderr, "bu_semaphore_init(): mutex_init() failed on [%d]\n", i);
	    bu_bomb("fatal semaphore acquisition failure");
	}

    }
#	endif
#	if defined(HAVE_PTHREAD_H) && !defined(sgi)
    for (i=0; i < nsemaphores; i++) {
	bu_semaphores[i].magic = BU_SEMAPHORE_MAGIC;
	if (pthread_mutex_init(&bu_semaphores[i].mu,  NULL)) {
	    fprintf(stderr, "bu_semaphore_init(): pthread_mutex_init() failed on [%d]\n", i);
	    bu_bomb("fatal semaphore acquisition failure");
	}
    }
#	endif

    /*
     * This should be last thing done before returning, so that
     * any subroutines called (e.g. bu_calloc()) won't think that
     * parallel operation has begun yet, and do acquire/release.
     */
    bu_nsemaphores = nsemaphores;
#endif	/* PARALLEL */
}

void
bu_semaphore_reinit(unsigned int nsemaphores)
{
#if !defined(PARALLEL) && !defined(DEFINED_BU_SEMAPHORES)
    return;					/* No support on this hardware */
#else
    unsigned int	i;

    if (bu_nsemaphores != 0) {
	free((void *)bu_semaphores);
	bu_semaphores = (struct bu_semaphores *)0;
	bu_nsemaphores = 0;
    }

    bu_semaphore_init(nsemaphores);
#endif	/* PARALLEL */
}

/**
 * B U _ S E M A P H O R E _ A C Q U I R E
 */
void
bu_semaphore_acquire(unsigned int i)
{
#if !defined(PARALLEL) && !defined(DEFINED_BU_SEMAPHORES)
    return;					/* No support on this hardware */
#else
    if (bu_semaphores == NULL) {
	/* Semaphores not initialized yet.  Must be non-parallel */
	return;
    }

    BU_CKMAG(bu_semaphores, BU_SEMAPHORE_MAGIC, "bu_semaphore");

    if (i >= bu_nsemaphores) {
	fprintf(stderr, "bu_semaphore_acquire(%d): semaphore # exceeds max of %d\n",
		i, bu_nsemaphores - 1);
	bu_bomb("fatal semaphore acquisition failure");
    }

    BU_CKMAG(&bu_semaphores[i], BU_SEMAPHORE_MAGIC, "bu_semaphore");

    /*
     * Begin vendor-specific initialization sections.
     */

#	if defined(alliant)
    (void) lock(&bu_semaphores[i].c);
#	endif

#	ifdef ardent
    {
	register long	*p = &bu_semaphores[i].sem;
	while (SYNCH_Adr = p, !SYNCH_Val)  while (!*p);
    }
#	endif

#	if defined(convex) || defined(__convex__)
    bu_convex_acquire(&bu_semaphores[i].sem);
#	endif

#	ifdef CRAY
    LOCKON(&bu_semaphores[i].p);
#	endif /* CRAY */

#	if defined(n16)
    (void)spin_lock((LOCK *)&bu_semaphores[i].sem);
#	endif

#	ifdef SGI_4D
    uswsetlock(bu_semaphores[i].ltp, 1000);
#	endif

#	ifdef SUNOS
    if (mutex_lock(&bu_semaphores[i].mu)) {
	fprintf(stderr, "bu_semaphore_acquire(): mutex_lock() failed on [%d]\n", i);
	bu_bomb("fatal semaphore acquisition failure");
    }
#	endif
#	if defined(HAVE_PTHREAD_H) && !defined(sgi)
    if (pthread_mutex_lock(&bu_semaphores[i].mu)) {
	fprintf(stderr, "bu_semaphore_acquire(): pthread_mutex_lock() failed on [%d]\n", i);
	bu_bomb("fatal semaphore acquisition failure");
    }
#	endif

#endif
}

/**
 * B U _ S E M A P H O R E _ R E L E A S E
 */
void
bu_semaphore_release(unsigned int i)
{
#if !defined(PARALLEL) && !defined(DEFINED_BU_SEMAPHORES)
    return;					/* No support on this hardware */
#else
    if (bu_semaphores == NULL) {
	/* Semaphores not initialized yet.  Must be non-parallel */
	return;
    }

    BU_CKMAG(bu_semaphores, BU_SEMAPHORE_MAGIC, "bu_semaphore");

    if (i >= bu_nsemaphores) {
	fprintf(stderr, "bu_semaphore_release(%d): semaphore # exceeds max of %d\n",
		i, bu_nsemaphores - 1);
	exit(3); /* cannot call bu_exit() here */
    }

    BU_CKMAG(&bu_semaphores[i], BU_SEMAPHORE_MAGIC, "bu_semaphore");

    /*
     * Begin vendor-specific initialization sections.
     */

#	if defined(alliant)
    (void) unlock(&bu_semaphores[i].c);
#	endif

#	ifdef ardent
    bu_semaphores[i].sem = 1;	/* release */
#	endif

#	if defined(convex) || defined(__convex__)
    bu_semaphores[i].sem = 0;	/* release */
#	endif

#	ifdef CRAY
    LOCKOFF(&bu_semaphores[i].p);
#	endif /* CRAY */

#	if defined(n16)
    (void)spin_unlock((LOCK *)&bu_semaphores[i].sem);
#	endif

#	ifdef SGI_4D
    usunsetlock(bu_semaphores[i].ltp);
#	endif

#	ifdef SUNOS
    if (mutex_unlock(&bu_semaphores[i].mu)) {
	fprintf(stderr, "bu_semaphore_acquire(): mutex_unlock() failed on [%d]\n", i);
	bu_bomb("fatal semaphore acquisition failure");
    }
#	endif
#	if defined(HAVE_PTHREAD_H) && !defined (sgi)
    if (pthread_mutex_unlock(&bu_semaphores[i].mu)) {
	fprintf(stderr, "bu_semaphore_acquire(): pthread_mutex_unlock() failed on [%d]\n", i);
	bu_bomb("fatal semaphore acquisition failure");
    }
#	endif
#endif
}

/* XXX need a routine to pair up with _init() to delete the semaphore structures */
#if 0
void
bu_semaphore_free() {
    if (bu_semaphores) {
	free(bu_semaphores);
	bu_semaphores = (struct bu_semaphores *)NULL;
    }
}
#endif

/** @} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * indent-tabs-mode: t
 * c-file-style: "stroustrup"
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
blob
data 3253

lib_LTLIBRARIES = libged.la
noinst_LTLIBRARIES = libged_nil.la

libged_nil_la_SOURCES = \
	3ptarb.c \
	adc.c \
	adjust.c \
	ae2dir.c \
	aet.c \
	analyze.c \
	arb.c \
	arced.c \
	arot.c \
	attr.c \
	autoview.c \
	bev.c \
	bigE.c \
	binary.c \
	blast.c \
	bot_condense.c \
	bot_decimate.c \
	bot_dump.c \
	bot_face_fuse.c \
	bot_face_sort.c \
	bot_merge.c \
	bot_smooth.c \
	bot_split.c \
	bot_vertex_fuse.c \
	cat.c \
	center.c \
	clip.c \
	clone.c \
	color.c \
	comb.c \
	comb_color.c \
	comb_std.c \
	concat.c \
	copy.c \
	copymat.c \
	copyeval.c \
	cpi.c \
	dbip.c \
	decompose.c \
	delay.c \
	dg_obj.c \
	dir2ae.c \
	draw.c \
	dump.c \
	dup.c \
	eac.c \
	echo.c \
	edcodes.c \
	edcomb.c \
	editit.c \
	edmater.c \
	erase.c \
	erase_all.c \
	expand.c \
	eye.c \
	eye_pos.c \
	facetize.c \
	find.c \
	form.c \
	fracture.c \
	ged.c \
	get.c \
	get_autoview.c \
	get_comb.c \
	get_eyemodel.c \
	get_obj_bounds.c \
	get_type.c \
	glob.c \
	globals.c \
	gqa.c \
	grid.c \
	group.c \
	hide.c \
	how.c \
	illum.c \
	importFg4Section.c \
	inside.c \
	instance.c \
	isize.c \
	item.c \
	keep.c \
	keypoint.c \
	kill.c \
	killall.c \
	killrefs.c \
	killtree.c \
	label.c \
	list.c \
	loadview.c \
	log.c \
	lookat.c \
	ls.c \
	lt.c \
	m2v_point.c \
	make.c \
	make_bb.c \
	make_name.c \
	match.c \
	mater.c \
	mirror.c \
	model2view.c \
	move.c \
	move_all.c \
	move_arb_edge.c \
	move_arb_face.c \
	mrot.c \
	nirt.c \
	nmg_collapse.c \
	nmg_simplify.c \
	ocenter.c \
	open.c \
	orient.c \
	orotate.c \
	oscale.c \
	otranslate.c \
	overlay.c \
	pathlist.c \
	pathsum.c \
	perspective.c \
	plot.c \
	pmat.c \
	pmodel2view.c \
	png.c \
	pov.c \
	prcolor.c \
	prefix.c \
	preview.c \
	ps.c \
	push.c \
	put.c \
	put_comb.c \
	putmat.c \
	qray.c \
	quat.c \
	qvrot.c \
	rcodes.c \
	rect.c \
	red.c \
	regdef.c \
	region.c \
	remove.c \
	report.c \
	rfarb.c \
	rmap.c \
	rmat.c \
	rmater.c \
	rot.c \
	rot_point.c \
	rotate_about.c \
	rotate_arb_face.c \
	rrt.c \
	rt.c \
	rtabort.c \
	rtcheck.c \
	savekey.c \
	saveview.c \
	scale.c \
	search.c \
	set_output_script.c \
	set_transparency.c \
	set_uplotOutputMode.c \
	setview.c \
	shaded_mode.c \
	shader.c \
	shells.c \
	showmats.c \
	size.c \
	slew.c \
	solids_on_ray.c \
	summary.c \
	sync.c \
	tables.c \
	title.c \
	tol.c \
	tops.c \
	tra.c \
	trace.c \
	track.c \
	tree.c \
	typein.c \
	unhide.c \
	units.c \
	v2m_point.c \
	vdraw.c \
	version.c \
	view.c \
	view2model.c \
	view_obj.c \
	viewdir.c \
	vrot.c \
	vutil.c \
	wcodes.c \
	wdb_bigE.c \
	wdb_comb_std.c \
	wdb_importFg4Section.c \
	wdb_nirt.c \
	wdb_obj.c \
	wdb_qray.c \
	wdb_track.c \
	wdb_vdraw.c \
	whatid.c \
	which.c \
	which_shader.c \
	who.c \
	wmater.c \
	xpush.c \
	ypr.c \
	zap.c \
	zoom.c

# cannot set per-target CPPFLAGS until automake 1.7+
AM_CPPFLAGS = \
	${PNG_CPPFLAGS} \
	${REGEX_CPPFLAGS} \
	${TCL_CPPFLAGS} -DNEW_TOPS_BEHAVIOR

noinst_HEADERS = \
	search.h \
	ged_private.h \
	qray.h \
	wdb_qray.h

libged_la_SOURCES =
libged_la_LDFLAGS = -version-info 19:1 -no-undefined
libged_la_LIBADD = \
	libged_nil.la \
	${GED_LIBS}

EXTRA_DIST = \
        CMakeLists.txt

DEPENDS = src/librt src/libwdb

include $(top_srcdir)/misc/Makefile.defs

FAST_OBJECTS = \
	$(libged_nil_la_OBJECTS) \
	$(libged_la_OBJECTS) \
	$(lib_LTLIBRARIES)
blob
data 1371
/*                        M E M S E T . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2008 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @addtogroup libsysv */
/** @{ */
/** @file memset.c
 *
 */
/** @} */

#include "common.h"

/* quell empty-compilation unit warnings */
static const int unused = 0;

/*
 * defined for the folks that don't seem to have a system memset()
 */
#ifndef HAVE_MEMSET
#include "sysv.h"

char *
memset(char *s, register char c, register int n)
{
    register char *p=s;

    if (p) {
	while (n-- > 0) {
	    *p++ = c;
	}
    }

    return s;
}

#endif

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * indent-tabs-mode: t
 * c-file-style: "stroustrup"
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
blob
data 2117
/*
 *			S T R C H R . C
 *
 * Copyright (c) 1990, 1993
 * The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "common.h"

/* quell empty-compilation unit warnings */
static const int unused = 0;

/*
 * defined for folks that don't have a system strchr()
 */
#ifndef HAVE_STRCHR
#include "sysv.h"

char *
strchr(register char *sp, register char c)
{
    do {
	if ( *sp == c )
	    return( sp );
    }  while ( *sp++ );
    return( (char *)0 );
}

#endif

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * indent-tabs-mode: t
 * c-file-style: "stroustrup"
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
blob
data 1617
/*                        S T R D U P . C
 * BRL-CAD
 *
 * Copyright (c) 1985-2008 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @file strdup.c
 *
 *  Duplicate a string.
 *
 *  Author -
 *	Michael John Muuss
 *
 */

#include "common.h"

/* quell empty-compilation unit warnings */
static const int unused = 0;

#ifndef HAVE_STRDUP
#include "sysv.h"

/* for malloc */
#include <stdlib.h>
#include <string.h>


/*
 *			S T R D U P
 *
 * Given a string, allocate enough memory to hold it using malloc(),
 * duplicate the strings, returns a pointer to the new string.
 */
char *
strdup(register const char *cp)
{
    register char	*base;
    register int	len;

    len = strlen( cp )+2;
    if ( (base = (char *)malloc( len )) == (char *)0 )
	return( (char *)0 );

    memcpy(base, cp, len);
    return(base);
}

#endif

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * indent-tabs-mode: t
 * c-file-style: "stroustrup"
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
blob
data 2899
/*
 *			S T R S E P . C
 *
 * Copyright (c) 1990, 1993
 * The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "common.h"

/* quell empty-compilation unit warnings */
static const int unused = 0;

/*
 *  This BSD version of strsep() is made available to systems that
 *  don't have their own.
 */
#ifndef HAVE_STRSEP
#include "sysv.h"
#include <stdlib.h>

/*
 * Get next token from string *stringp, where tokens are nonempty
 * strings separated by characters from delim.
 *
 * Writes NULLs into the string at *stringp to end tokens.
 * delim need not remain constant from call to call.
 * On return, *stringp points past the last NUL written (if there might
 * be further tokens), or is NULL (if there are definitely no more tokens).
 *
 * If *stringp is NULL, strsep returns NULL.
 */
char *
strsep(register char **stringp, register const char *delim)
{
    register char *s;
    register const char *spanp;
    register int c, sc;
    char *tok;

    if ((s = *stringp) == NULL)
	return (NULL);
    for (tok = s;;) {
	c = *s++;
	spanp = delim;
	do {
	    if ((sc = *spanp++) == c) {
		if (c == 0)
		    s = NULL;
		else
		    s[-1] = 0;
		*stringp = s;
		return (tok);
	    }
	} while (sc != 0);
    }
    /* NOTREACHED */
}

#endif

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * indent-tabs-mode: t
 * c-file-style: "stroustrup"
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
blob
data 1843
/*	This is a public-domain reimplementation of strtok(3).
	Not derived from licensed software.
	This code may be used on any computer system for any
	purpose by anyone.

	Henry Spencer @ U of Toronto Zoology
	{allegra, ihnp4, decvax, pyramid}!utzoo!henry
	Wed Jun 25 19:21:34 EDT 1986
*/

#include "common.h"

/* quell empty-compilation unit warnings */
static const int unused = 0;

/*
 *  This public domain version of strtok() made available to systems that
 *  don't have their own.
 */
#ifndef HAVE_STRTOK
#include "sysv.h"

static char *scanpoint = 0;

/**
 * Get next token from string s (0 on 2nd, 3rd, etc. calls),
 * where tokens are nonempty strings separated by runs of
 * chars from delim.  Writes NULs into s to end tokens.  delim need not
 * remain constant from call to call.
 */
char *				/* 0 if no token left */
strtok(char *s, register const char *delim)
{
    register char *scan;
    char *tok;
    register const char *dscan;
    if (s == (char*)0 && scanpoint == (char*)0)
	return((char*)0);
    if (s != (char*)0)
	scan = s;
    else
	scan = scanpoint;

    /*
     * Scan leading delimiters.
     */
    for (; *scan != '\0'; scan++) {
	for (dscan = delim; *dscan != '\0'; dscan++)
	    if (*scan == *dscan)
		break;
	if (*dscan == '\0')
	    break;
    }
    if (*scan == '\0') {
	scanpoint = (char*)0;
	return((char*)0);
    }

    tok = scan;

    /*
     * Scan token.
     */
    for (; *scan != '\0'; scan++) {
	for (dscan = delim; *dscan != '\0';)	/* ++ moved down. */
	    if (*scan == *dscan++) {
		scanpoint = scan+1;
		*scan = '\0';
		return(tok);
	    }
    }

    /*
     * Reached end of string.
     */
    scanpoint = (char*)0;
    return(tok);
}

#endif

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * indent-tabs-mode: t
 * c-file-style: "stroustrup"
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
blob
data 454
/*
 * Author :
 *        Bob Parker (SURVICE Engineering Company)
 *
 * Description:
 *        This file contains the Tcl initialization routine for libsysv.
 */

#include "common.h"

#include "tcl.h"
#include "sysv.h"
#include <stdio.h>

SYSV_EXPORT int
Sysv_Init(Tcl_Interp *interp)
{
    return TCL_OK;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * indent-tabs-mode: t
 * c-file-style: "stroustrup"
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
blob
data 108943
/*                       G E D _ O B J . C
 * BRL-CAD
 *
 * Copyright (c) 2000-2008 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @addtogroup libged */
/** @{ */
/** @file ged_obj.c
 *
 * A quasi-object-oriented database interface.
 *
 * A GED object contains the attributes and methods for
 * controlling a BRL-CAD geometry edit object.
 *
 */
/** @} */

#include "common.h"

#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <math.h>
#include <errno.h>
#include <assert.h>
#include "bio.h"

#include "tcl.h"

#include "bu.h"
#include "bn.h"
#include "cmd.h"
#include "vmath.h"
#include "db.h"
#include "rtgeom.h"
#include "wdb.h"
#include "mater.h"
#include "tclcad.h"

#include "solid.h"
#include "dm.h"
#include "dm_xvars.h"

#if defined(DM_X) || defined(DM_TK)
#  include "tk.h"
#  include <X11/Xutil.h>
#endif /* DM_X or DM_TK*/

#ifdef DM_X
#  include "dm-X.h"
#endif /* DM_X */

#ifdef DM_TK
#  include "dm-tk.h"
#endif /* DM_TK */

#ifdef DM_OGL
#  include "dm-ogl.h"
#endif /* DM_OGL */

#ifdef DM_WGL
#  include <tkwinport.h>
#  include "dm-wgl.h"
#endif /* DM_WGL */

#if 1
/*XXX Temporary */
#include "dg.h"
#endif

static int go_open_tcl(ClientData clientData,
		       Tcl_Interp *interp,
		       int argc,
		       const char **argv);
static int go_autoview(struct ged	*gedp,
		       int		argc,
		       const char	*argv[],
		       ged_func_ptr	func,
		       const char	*usage,
		       int		maxargs);
static int go_blast(struct ged		*gedp,
		    int			argc,
		    const char		*argv[],
		    ged_func_ptr	func,
		    const char		*usage,
		    int			maxargs);
static int go_configure(struct ged	*gedp,
			int		argc,
			const char	*argv[],
			ged_func_ptr	func,
			const char	*usage,
			int		maxargs);
static int go_constrain_rmode(struct ged	*gedp,
			      int		argc,
			      const char	*argv[],
			      ged_func_ptr	func,
			      const char	*usage,
			      int		maxargs);
static int go_constrain_tmode(struct ged	*gedp,
			      int		argc,
			      const char	*argv[],
			      ged_func_ptr	func,
			      const char	*usage,
			      int		maxargs);
static int go_delete_view(struct ged	*gedp,
			  int		argc,
			  const char	*argv[],
			  ged_func_ptr	func,
			  const char	*usage,
			  int		maxargs);
static int go_idle_mode(struct ged	*gedp,
			int		argc,
			const char	*argv[],
			ged_func_ptr	func,
			const char	*usage,
			int		maxargs);
static int go_light(struct ged		*gedp,
		    int			argc,
		    const char		*argv[],
		    ged_func_ptr	func,
		    const char		*usage,
		    int			maxargs);
static int go_list_views(struct ged	*gedp,
			 int		argc,
			 const char	*argv[],
			 ged_func_ptr	func,
			 const char	*usage,
			 int		maxargs);

static int go_listen(struct ged		*gedp,
		     int		argc,
		     const char		*argv[],
		     ged_func_ptr	func,
		     const char		*usage,
		     int		maxargs);

static int go_make(struct ged	*gedp,
		   int		argc,
		   const char	*argv[],
		   ged_func_ptr	func,
		   const char	*usage,
		   int		maxargs);
static int go_mirror(struct ged		*gedp,
		     int		argc,
		     const char		*argv[],
		     ged_func_ptr	func,
		     const char		*usage,
		     int		maxargs);
static int go_more_args_callback(struct ged	*gedp,
				 int		argc,
				 const char	*argv[],
				 ged_func_ptr	func,
				 const char	*usage,
				 int		maxargs);
static int go_mouse_constrain_rot(struct ged	*gedp,
				  int		argc,
				  const char	*argv[],
				  ged_func_ptr	func,
				  const char	*usage,
				  int		maxargs);
static int go_mouse_constrain_trans(struct ged		*gedp,
				    int			argc,
				    const char		*argv[],
				    ged_func_ptr	func,
				    const char		*usage,
				    int			maxargs);
static int go_mouse_rot(struct ged	*gedp,
			int		argc,
			const char	*argv[],
			ged_func_ptr	func,
			const char	*usage,
			int		maxargs);
static int go_mouse_scale(struct ged	*gedp,
			  int		argc,
			  const char	*argv[],
			  ged_func_ptr	func,
			  const char	*usage,
			  int		maxargs);
static int go_mouse_trans(struct ged	*gedp,
			  int		argc,
			  const char	*argv[],
			  ged_func_ptr	func,
			  const char	*usage,
			  int		maxargs);
static int go_new_view(struct ged	*gedp,
		       int		argc,
		       const char	*argv[],
		       ged_func_ptr	func,
		       const char	*usage,
		       int		maxargs);
static int go_paint_rect_area(struct ged	*gedp,
			      int		argc,
			      const char	*argv[],
			      ged_func_ptr	func,
			      const char	*usage,
			      int		maxargs);
static int go_refresh(struct ged	*gedp,
		      int		argc,
		      const char	*argv[],
		      ged_func_ptr	func,
		      const char	*usage,
		      int		maxargs);
static int go_refresh_all(struct ged	*gedp,
			  int		argc,
			  const char	*argv[],
			  ged_func_ptr	func,
			  const char	*usage,
			  int		maxargs);
static int go_rotate_mode(struct ged	*gedp,
			  int		argc,
			  const char	*argv[],
			  ged_func_ptr	func,
			  const char	*usage,
			  int		maxargs);
static int go_rt_gettrees(struct ged	*gedp,
			  int		argc,
			  const char	*argv[],
			  ged_func_ptr	func,
			  const char	*usage,
			  int		maxargs);
static int go_scale_mode(struct ged	*gedp,
			 int		argc,
			 const char	*argv[],
			 ged_func_ptr	func,
			 const char	*usage,
			 int		maxargs);
static int go_set_coord(struct ged	*gedp,
			int		argc,
			const char	*argv[],
			ged_func_ptr	func,
			const char	*usage,
			int		maxargs);
static int go_set_fb_mode(struct ged	*gedp,
			  int		argc,
			  const char	*argv[],
			  ged_func_ptr	func,
			  const char	*usage,
			  int		maxargs);
static int go_translate_mode(struct ged		*gedp,
			     int		argc,
			     const char		*argv[],
			     ged_func_ptr	func,
			     const char		*usage,
			     int		maxargs);
static int go_vmake(struct ged		*gedp,
		    int			argc,
		    const char		*argv[],
		    ged_func_ptr	func,
		    const char		*usage,
		    int			maxargs);
static int go_vslew(struct ged		*gedp,
		    int			argc,
		    const char		*argv[],
		    ged_func_ptr	func,
		    const char		*usage,
		    int			maxargs);
static int go_zbuffer(struct ged	*gedp,
		      int		argc,
		      const char	*argv[],
		      ged_func_ptr	func,
		      const char	*usage,
		      int		maxargs);
static int go_zclip(struct ged		*gedp,
		    int			argc,
		    const char		*argv[],
		    ged_func_ptr	func,
		    const char		*usage,
		    int			maxargs);

/* Wrapper Functions */
static int go_autoview_func(struct ged	*gedp,
			   int		argc,
			   const char	*argv[],
			   ged_func_ptr	func,
			   const char	*usage,
			   int		maxargs);
static int go_more_args_func(struct ged		*gedp,
			     int		argc,
			     const char		*argv[],
			     ged_func_ptr	func,
			     const char		*usage,
			     int		maxargs);
static int go_pass_through_func(struct ged	*gedp,
				int		argc,
				const char	*argv[],
				ged_func_ptr	func,
				const char	*usage,
				int		maxargs);
static int go_pass_through_and_refresh_func(struct ged		*gedp,
					    int			argc,
					    const char		*argv[],
					    ged_func_ptr	func,
					    const char		*usage,
					    int			maxargs);
static int go_view_func(struct ged	*gedp,
			int		argc,
			const char	*argv[],
			ged_func_ptr	func,
			const char	*usage,
			int		maxargs);

/* Utility Functions */
static void go_drawSolid(struct dm *dmp, struct solid *sp);
static int go_drawSList(struct dm *dmp, struct bu_list *hsp);

static int go_close_fbs(struct ged_dm_view *gdvp);
static void go_fbs_callback();
static int go_open_fbs(struct ged_dm_view *gdvp, Tcl_Interp *interp);

static void go_refresh_view(struct ged_dm_view *gdvp);
static void go_refresh_handler(void *clientdata);
static void go_refresh_all_views(struct ged_obj *gop);
static void go_autoview_view(struct ged_dm_view *gdvp);
static void go_autoview_all_views(struct ged_obj *gop);

static void go_output_handler(struct ged *gedp, char *line);

typedef int (*go_wrapper_func_ptr)(struct ged *, int, const char *[], ged_func_ptr, const char *, int);
#define GO_WRAPPER_FUNC_PTR_NULL (go_wrapper_func_ptr)0

#define GO_MAX_RT_ARGS 64

static struct ged_obj HeadGedObj;
static struct ged_obj *go_current_gop = GED_OBJ_NULL;

#define GO_MAX_RT_ARGS 64

struct go_cmdtab {
    char	 *go_name;
    char	 *go_usage;
    int		 go_maxargs;
    go_wrapper_func_ptr	go_wrapper_func;
    ged_func_ptr go_func;
};

static struct go_cmdtab go_cmds[] = {
    {"3ptarb",	(char *)0, MAXARGS, go_pass_through_func, ged_3ptarb},
    {"adc",	"vname args", 7, go_view_func, ged_adc},
    {"adjust",	(char *)0, MAXARGS, go_pass_through_func, ged_adjust},
    {"ae2dir",	(char *)0, MAXARGS, go_pass_through_func, ged_ae2dir},
    {"aet",	"vname [[-i] az el [tw]]", 6, go_view_func, ged_aet},
    {"analyze",	(char *)0, MAXARGS, go_pass_through_func, ged_analyze},
    {"arb",	(char *)0, MAXARGS, go_pass_through_func, ged_arb},
    {"arced",	(char *)0, MAXARGS, go_pass_through_func, ged_arced},
    {"arot",	"vname x y z angle", 6, go_view_func, ged_arot},
    {"attr",	(char *)0, MAXARGS, go_pass_through_func, ged_attr},
    {"autoview",	"vname", MAXARGS, go_autoview, GED_FUNC_PTR_NULL},
    {"bev",	(char *)0, MAXARGS, go_pass_through_func, ged_bev},
    {"blast",	(char *)0, MAXARGS, go_blast, GED_FUNC_PTR_NULL},
    {"bo",	(char *)0, MAXARGS, go_pass_through_func, ged_binary},
    {"bot_condense",	(char *)0, MAXARGS, go_pass_through_func, ged_bot_condense},
    {"bot_decimate",	(char *)0, MAXARGS, go_pass_through_func, ged_bot_decimate},
    {"bot_dump",	(char *)0, MAXARGS, go_pass_through_func, ged_bot_dump},
    {"bot_face_fuse",	(char *)0, MAXARGS, go_pass_through_func, ged_bot_face_fuse},
    {"bot_face_sort",	(char *)0, MAXARGS, go_pass_through_func, ged_bot_face_sort},
    {"bot_merge",	(char *)0, MAXARGS, go_pass_through_func, ged_bot_merge},
    {"bot_smooth",	(char *)0, MAXARGS, go_pass_through_func, ged_bot_smooth},
    {"bot_split",	(char *)0, MAXARGS, go_pass_through_func, ged_bot_split},
    {"bot_vertex_fuse",	(char *)0, MAXARGS, go_pass_through_func, ged_bot_vertex_fuse},
    {"c",	(char *)0, MAXARGS, go_pass_through_func, ged_comb_std},
    {"cat",	(char *)0, MAXARGS, go_pass_through_func, ged_cat},
    {"center",	"vname [x y z]", 5, go_view_func, ged_center},
    {"clear",	(char *)0, MAXARGS, go_pass_through_and_refresh_func, ged_zap},
    {"clone",	(char *)0, MAXARGS, go_pass_through_func, ged_clone},
    {"color",	(char *)0, MAXARGS, go_pass_through_func, ged_color},
    {"comb",	(char *)0, MAXARGS, go_pass_through_func, ged_comb},
    {"comb_color",	(char *)0, MAXARGS, go_pass_through_func, ged_comb_color},
    {"concat",	(char *)0, MAXARGS, go_pass_through_func, ged_concat},
    {"configure",	"vname", MAXARGS, go_configure, GED_FUNC_PTR_NULL},
    {"constrain_rmode",	"vname x|y|z x y", MAXARGS, go_constrain_rmode, GED_FUNC_PTR_NULL},
    {"constrain_tmode",	"vname x|y|z x y", MAXARGS, go_constrain_tmode, GED_FUNC_PTR_NULL},
    {"copyeval",	(char *)0, MAXARGS, go_pass_through_func, ged_copyeval},
    {"copymat",	(char *)0, MAXARGS, go_pass_through_func, ged_copymat},
    {"cp",	(char *)0, MAXARGS, go_pass_through_func, ged_copy},
    {"cpi",	(char *)0, MAXARGS, go_pass_through_func, ged_cpi},
    {"d",	(char *)0, MAXARGS, go_pass_through_and_refresh_func, ged_erase},
    {"dall",	(char *)0, MAXARGS, go_pass_through_and_refresh_func, ged_erase_all},
    {"dbip",	(char *)0, MAXARGS, go_pass_through_func, ged_dbip},
    {"decompose",	(char *)0, MAXARGS, go_pass_through_func, ged_decompose},
    {"delay",	(char *)0, MAXARGS, go_pass_through_func, ged_delay},
    {"delete_view",	"vname", MAXARGS, go_delete_view, GED_FUNC_PTR_NULL},
    {"dir2ae",	(char *)0, MAXARGS, go_pass_through_func, ged_dir2ae},
    {"draw",	(char *)0, MAXARGS, go_autoview_func, ged_draw},
    {"dump",	(char *)0, MAXARGS, go_pass_through_func, ged_dump},
    {"dup",	(char *)0, MAXARGS, go_pass_through_func, ged_dup},
    {"E",	(char *)0, MAXARGS, go_autoview_func, ged_E},
    {"e",	(char *)0, MAXARGS, go_autoview_func, ged_draw},
    {"eac",	(char *)0, MAXARGS, go_autoview_func, ged_eac},
    {"echo",	(char *)0, MAXARGS, go_pass_through_func, ged_echo},
    {"edcodes",	(char *)0, MAXARGS, go_pass_through_func, ged_edcodes},
    {"edcomb",	(char *)0, MAXARGS, go_pass_through_func, ged_edcomb},
    {"edmater",	(char *)0, MAXARGS, go_pass_through_func, ged_edmater},
    {"erase",	(char *)0, MAXARGS, go_pass_through_and_refresh_func, ged_erase},
    {"erase_all",	(char *)0, MAXARGS, go_pass_through_and_refresh_func, ged_erase_all},
    {"ev",	(char *)0, MAXARGS, go_autoview_func, ged_ev},
    {"expand",	(char *)0, MAXARGS, go_pass_through_func, ged_expand},
    {"eye",	"vname [x y z]", 5, go_view_func, ged_eye},
    {"eye_pos",	"vname [x y z]", 5, go_view_func, ged_eye_pos},
    {"facetize",	(char *)0, MAXARGS, go_pass_through_func, ged_facetize},
    {"find",	(char *)0, MAXARGS, go_pass_through_func, ged_find},
    {"form",	(char *)0, MAXARGS, go_pass_through_func, ged_form},
    {"fracture",	(char *)0, MAXARGS, go_pass_through_func, ged_fracture},
    {"g",	(char *)0, MAXARGS, go_pass_through_func, ged_group},
    {"get",	(char *)0, MAXARGS, go_pass_through_func, ged_get},
    {"get_autoview",	(char *)0, MAXARGS, go_pass_through_func, ged_get_autoview},
    {"get_comb",	(char *)0, MAXARGS, go_pass_through_func, ged_get_comb},
    {"get_eyemodel",	"vname", 2, go_view_func, ged_get_eyemodel},
    {"get_type",	(char *)0, MAXARGS, go_pass_through_func, ged_get_type},
    {"glob",	(char *)0, MAXARGS, go_pass_through_func, ged_glob},
    {"gqa",	(char *)0, MAXARGS, go_pass_through_func, ged_gqa},
    {"grid",	"vname args", 6, go_view_func, ged_grid},
    {"hide",	(char *)0, MAXARGS, go_pass_through_func, ged_hide},
    {"how",	(char *)0, MAXARGS, go_pass_through_func, ged_how},
    {"i",	(char *)0, MAXARGS, go_pass_through_func, ged_instance},
    {"idents",	(char *)0, MAXARGS, go_pass_through_func, ged_tables},
    {"idle_mode",	"vname", MAXARGS, go_idle_mode, GED_FUNC_PTR_NULL},
    {"illum",	(char *)0, MAXARGS, go_pass_through_and_refresh_func, ged_illum},
    {"importFg4Section",	(char *)0, MAXARGS, go_pass_through_func, ged_importFg4Section},
    {"in",	(char *)0, MAXARGS, go_more_args_func, ged_in},
    {"inside",	(char *)0, MAXARGS, go_more_args_func, ged_inside},
    {"isize",	"vname", 2, go_view_func, ged_isize},
    {"item",	(char *)0, MAXARGS, go_pass_through_func, ged_item},
    {"keep",	(char *)0, MAXARGS, go_pass_through_func, ged_keep},
    {"keypoint",	"vname [x y z]", 5, go_view_func, ged_keypoint},
    {"kill",	(char *)0, MAXARGS, go_pass_through_and_refresh_func, ged_kill},
    {"killall",	(char *)0, MAXARGS, go_pass_through_and_refresh_func, ged_killall},
    {"killrefs",	(char *)0, MAXARGS, go_pass_through_and_refresh_func, ged_killrefs},
    {"killtree",	(char *)0, MAXARGS, go_pass_through_and_refresh_func, ged_killtree},
    {"l",	(char *)0, MAXARGS, go_pass_through_func, ged_list},
    {"light",	"vname [0|1]", MAXARGS, go_light, GED_FUNC_PTR_NULL},
    {"list_views",	(char *)0, MAXARGS, go_list_views, GED_FUNC_PTR_NULL},
    {"listen",	"vname [port]", MAXARGS, go_listen, GED_FUNC_PTR_NULL},
    {"listeval",	(char *)0, MAXARGS, go_pass_through_func, ged_pathsum},
    {"loadview",	"vname filename", 3, go_view_func, ged_loadview},
    {"log",	(char *)0, MAXARGS, go_pass_through_func, ged_log},
    {"lookat",	"vname x y z", 5, go_view_func, ged_lookat},
    {"ls",	(char *)0, MAXARGS, go_pass_through_func, ged_ls},
    {"lt",	(char *)0, MAXARGS, go_pass_through_func, ged_lt},
    {"m2v_point",	"vname x y z", 5, go_view_func, ged_m2v_point},
    {"make",	(char *)0, MAXARGS, go_make, GED_FUNC_PTR_NULL},
    {"make_bb",	(char *)0, MAXARGS, go_pass_through_func, ged_make_bb},
    {"make_name",	(char *)0, MAXARGS, go_pass_through_func, ged_make_name},
    {"match",	(char *)0, MAXARGS, go_pass_through_func, ged_match},
    {"mater",	(char *)0, MAXARGS, go_pass_through_func, ged_mater},
    {"mirror",	(char *)0, MAXARGS, go_mirror, GED_FUNC_PTR_NULL},
    {"model2view",	"vname", 2, go_view_func, ged_model2view},
    {"more_args_callback",	"set/get the \"more args\" callback", MAXARGS, go_more_args_callback, GED_FUNC_PTR_NULL},
    {"move_arb_edge",	(char *)0, MAXARGS, go_pass_through_func, ged_move_arb_edge},
    {"move_arb_face",	(char *)0, MAXARGS, go_pass_through_func, ged_move_arb_face},
    {"mouse_constrain_rot",	"vname coord x y", MAXARGS, go_mouse_constrain_rot, GED_FUNC_PTR_NULL},
    {"mouse_constrain_trans",	"vname coord x y", MAXARGS, go_mouse_constrain_trans, GED_FUNC_PTR_NULL},
    {"mouse_rot",	"vname x y", MAXARGS, go_mouse_rot, GED_FUNC_PTR_NULL},
    {"mouse_scale",	"vname x y", MAXARGS, go_mouse_scale, GED_FUNC_PTR_NULL},
    {"mouse_trans",	"vname x y", MAXARGS, go_mouse_trans, GED_FUNC_PTR_NULL},
    {"mv",	(char *)0, MAXARGS, go_pass_through_func, ged_move},
    {"mvall",	(char *)0, MAXARGS, go_pass_through_func, ged_move_all},
    {"new_view",	"vname type [args]", MAXARGS, go_new_view, GED_FUNC_PTR_NULL},
    {"nirt",	"vname [args]", GO_MAX_RT_ARGS, go_view_func, ged_nirt},
    {"nmg_collapse",	(char *)0, MAXARGS, go_pass_through_func, ged_nmg_collapse},
    {"nmg_simplify",	(char *)0, MAXARGS, go_pass_through_func, ged_nmg_simplify},
    {"ocenter",	(char *)0, MAXARGS, go_pass_through_func, ged_ocenter},
    {"open",	(char *)0, MAXARGS, go_pass_through_and_refresh_func, ged_reopen},
    {"orient",	"vname quat", 6, go_view_func, ged_orient},
    {"orotate",	(char *)0, MAXARGS, go_pass_through_func, ged_orotate},
    {"oscale",	(char *)0, MAXARGS, go_pass_through_func, ged_oscale},
    {"otranslate",	(char *)0, MAXARGS, go_pass_through_func, ged_otranslate},
    {"overlay",	(char *)0, MAXARGS, go_autoview_func, ged_overlay},
    {"paint_rect_area",	"vname", MAXARGS, go_paint_rect_area, GED_FUNC_PTR_NULL},
    {"pathlist",	(char *)0, MAXARGS, go_pass_through_func, ged_pathlist},
    {"paths",	(char *)0, MAXARGS, go_pass_through_func, ged_pathsum},
    {"perspective",	"vname [angle]", 3, go_view_func, ged_perspective},
    {"plot",	"vname [options] file.pl", 16, go_view_func, ged_plot},
    {"pmat",	"vname [mat]", 3, go_view_func, ged_pmat},
    {"pmodel2view",	"vname", 2, go_view_func, ged_pmodel2view},
    {"png",	"vname [options] file.png", 16, go_view_func, ged_png},
    {"pov",	"vname center quat scale eye_pos perspective", 7, go_view_func, ged_pmat},
    {"prcolor",	(char *)0, MAXARGS, go_pass_through_func, ged_prcolor},
    {"prefix",	(char *)0, MAXARGS, go_pass_through_func, ged_prefix},
    {"preview",	"vname [options] script", MAXARGS, go_view_func, ged_preview},
    {"ps",	"vname [options] file.ps", 16, go_view_func, ged_ps},
    {"push",	(char *)0, MAXARGS, go_pass_through_func, ged_push},
    {"put",	(char *)0, MAXARGS, go_pass_through_func, ged_put},
    {"put_comb",	(char *)0, MAXARGS, go_pass_through_func, ged_put_comb},
    {"putmat",	(char *)0, MAXARGS, go_pass_through_func, ged_putmat},
    {"qray",	(char *)0, MAXARGS, go_pass_through_func, ged_qray},
    {"quat",	"vname a b c d", 6, go_view_func, ged_quat},
    {"qvrot",	"vname x y z angle", 6, go_view_func, ged_qvrot},
    {"r",	(char *)0, MAXARGS, go_pass_through_func, ged_region},
    {"rcodes",	(char *)0, MAXARGS, go_pass_through_func, ged_rcodes},
    {"rect",	"vname args", 6, go_view_func, ged_rect},
    {"red",	(char *)0, MAXARGS, go_pass_through_func, ged_red},
    {"refresh",	"vname", MAXARGS, go_refresh, GED_FUNC_PTR_NULL},
    {"refresh_all",	(char *)0, MAXARGS, go_refresh_all, GED_FUNC_PTR_NULL},
    {"regdef",	(char *)0, MAXARGS, go_pass_through_func, ged_regdef},
    {"regions",	(char *)0, MAXARGS, go_pass_through_func, ged_tables},
    {"report",	(char *)0, MAXARGS, go_pass_through_func, ged_report},
    {"rfarb",	(char *)0, MAXARGS, go_pass_through_func, ged_rfarb},
    {"rm",	(char *)0, MAXARGS, go_pass_through_func, ged_remove},
    {"rmap",	(char *)0, MAXARGS, go_pass_through_func, ged_rmap},
    {"rmat",	"vname [mat]", 3, go_view_func, ged_rmat},
    {"rmater",	(char *)0, MAXARGS, go_pass_through_func, ged_rmater},
    {"rot",	"vname [-m|-v] x y z", 6, go_view_func, ged_rot},
    {"rot_about",	"vname [e|k|m|v]", 3, go_view_func, ged_rotate_about},
    {"rot_point",	"vname x y z", 5, go_view_func, ged_rot_point},
    {"rotate_arb_face",	(char *)0, MAXARGS, go_pass_through_func, ged_rotate_arb_face},
    {"rotate_mode",	"vname x y", MAXARGS, go_rotate_mode, GED_FUNC_PTR_NULL},
    {"rrt",	"vname [args]", GO_MAX_RT_ARGS, go_view_func, ged_rrt},
    {"rt",	"vname [args]", GO_MAX_RT_ARGS, go_view_func, ged_rt},
    {"rt_gettrees",	"[-i] [-u] pname object", MAXARGS, go_rt_gettrees, GED_FUNC_PTR_NULL},
    {"rtarea",	"vname [args]", GO_MAX_RT_ARGS, go_view_func, ged_rt},
    {"rtabort",	(char *)0, GO_MAX_RT_ARGS, go_pass_through_func, ged_rtabort},
    {"rtedge",	"vname [args]", GO_MAX_RT_ARGS, go_view_func, ged_rt},
    {"rtcheck",	"vname [args]", GO_MAX_RT_ARGS, go_view_func, ged_rtcheck},
    {"rtweight",	"vname [args]", GO_MAX_RT_ARGS, go_view_func, ged_rt},
    {"savekey",	"vname filename", 3, go_view_func, ged_savekey},
    {"saveview",	"vname filename", 3, go_view_func, ged_saveview},
    {"sca",	"vname sf", 3, go_view_func, ged_scale},
    {"scale_mode",	"vname x y", MAXARGS, go_scale_mode, GED_FUNC_PTR_NULL},
    {"set_coord",	"vname [m|v]", MAXARGS, go_set_coord, GED_FUNC_PTR_NULL},
    {"set_fb_mode",	"vname [mode]", MAXARGS, go_set_fb_mode, GED_FUNC_PTR_NULL},
    {"set_output_script",	"[script]", MAXARGS, go_pass_through_func, ged_set_output_script},
    {"set_transparency",	(char *)0, MAXARGS, go_pass_through_and_refresh_func, ged_set_transparency},
    {"set_uplotOutputMode",	(char *)0, MAXARGS, go_pass_through_func, ged_set_uplotOutputMode},
    {"setview",	"vname x y z", 5, go_view_func, ged_setview},
    {"shaded_mode",	(char *)0, MAXARGS, go_pass_through_func, ged_shaded_mode},
    {"shader",	(char *)0, MAXARGS, go_pass_through_func, ged_shader},
    {"shells",	(char *)0, MAXARGS, go_pass_through_func, ged_shells},
    {"showmats",	(char *)0, MAXARGS, go_pass_through_func, ged_showmats},
    {"size",	"vname [size]", 3, go_view_func, ged_size},
    {"slew",	"vname x y [z]", 5, go_view_func, ged_slew},
    {"solids",	(char *)0, MAXARGS, go_pass_through_func, ged_tables},
    {"solids_on_ray",	(char *)0, MAXARGS, go_pass_through_func, ged_solids_on_ray},
    {"summary",	(char *)0, MAXARGS, go_pass_through_func, ged_summary},
    {"sync",	(char *)0, MAXARGS, go_pass_through_func, ged_sync},
    {"title",	(char *)0, MAXARGS, go_pass_through_func, ged_title},
    {"tol",	(char *)0, MAXARGS, go_pass_through_func, ged_tol},
    {"tops",	(char *)0, MAXARGS, go_pass_through_func, ged_tops},
    {"tra",	"vname [-m|-v] x y z", 6, go_view_func, ged_tra},
    {"track",	(char *)0, MAXARGS, go_pass_through_func, ged_track},
    {"translate_mode",	"vname x y", MAXARGS, go_translate_mode, GED_FUNC_PTR_NULL},
    {"tree",	(char *)0, MAXARGS, go_pass_through_func, ged_tree},
    {"unhide",	(char *)0, MAXARGS, go_pass_through_func, ged_unhide},
    {"units",	(char *)0, MAXARGS, go_pass_through_func, ged_units},
    {"v2m_point",	"vname x y z", 5, go_view_func, ged_v2m_point},
    {"vdraw",	(char *)0, MAXARGS, go_autoview_func, ged_vdraw},
    {"version",	(char *)0, MAXARGS, go_pass_through_func, ged_version},
    {"view",	"vname quat|ypr|aet|center|eye|size [args]", 3, go_view_func, ged_view},
    {"view2model",	"vname", 2, go_view_func, ged_view2model},
    {"viewdir",	"vname [-i]", 3, go_view_func, ged_viewdir},
    {"vmake",	"vname pname ptype", MAXARGS, go_vmake, GED_FUNC_PTR_NULL},
    {"vnirt",	"vname [args]", GO_MAX_RT_ARGS, go_view_func, ged_vnirt},
    {"vslew",	"vname x y", MAXARGS, go_vslew, GED_FUNC_PTR_NULL},
    {"wcodes",	(char *)0, MAXARGS, go_pass_through_func, ged_wcodes},
    {"whatid",	(char *)0, MAXARGS, go_pass_through_func, ged_whatid},
    {"which_shader",	(char *)0, MAXARGS, go_pass_through_func, ged_which_shader},
    {"whichair",	(char *)0, MAXARGS, go_pass_through_func, ged_which},
    {"whichid",	(char *)0, MAXARGS, go_pass_through_func, ged_which},
    {"who",	(char *)0, MAXARGS, go_pass_through_func, ged_who},
    {"wmater",	(char *)0, MAXARGS, go_pass_through_func, ged_wmater},
    {"xpush",	(char *)0, MAXARGS, go_pass_through_func, ged_xpush},
    {"ypr",	"vname yaw pitch roll", 5, go_view_func, ged_ypr},
    {"zap",	(char *)0, MAXARGS, go_pass_through_and_refresh_func, ged_zap},
    {"zbuffer",	"vname [0|1]", MAXARGS, go_zbuffer, GED_FUNC_PTR_NULL},
    {"zclip",	"vname [0|1]", MAXARGS, go_zclip, GED_FUNC_PTR_NULL},
    {"zoom",	"vname sf", 3, go_view_func, ged_zoom},
    {(char *)0,	(char *)0, 0, GO_WRAPPER_FUNC_PTR_NULL, GED_FUNC_PTR_NULL}
};


/**
 * @brief create the Tcl command for go_open
 *
 */
int
Go_Init(Tcl_Interp *interp)
{
    /*XXX Use of brlcad_interp is temporary */
    brlcad_interp = interp;

    BU_LIST_INIT(&HeadGedObj.l);
    (void)Tcl_CreateCommand(interp, (const char *)"go_open", go_open_tcl,
			    (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);

#if 1
    /*XXX Temporary */
    /* initialize database objects */
    Wdb_Init(interp);

    /* initialize drawable geometry objects */
    Dgo_Init(interp);

    /* initialize view objects */
    Vo_Init(interp);
#endif

    bu_semaphore_reinit(GED_SEM_LAST);

    return TCL_OK;
}

/**
 *			G O _ C M D
 *@brief
 * Generic interface for database commands.
 *
 * @par Usage:
 *        procname cmd ?args?
 *
 * @return result of ged command.
 */
static int
go_cmd(ClientData	clientData,
	Tcl_Interp	*interp,
	int		argc,
	char		**argv)
{
    register struct go_cmdtab *ctp;
    struct ged_obj *gop = (struct ged_obj *)clientData;
    Tcl_DString ds;
    int ret;
#if 0
    char flags[128];

    GED_CHECK_OBJ(gop);
#endif

    Tcl_DStringInit(&ds);

    if (argc < 2) {
	Tcl_DStringAppend(&ds, "subcommand not specfied; must be one of: ", -1);
	for (ctp = go_cmds; ctp->go_name != (char *)NULL; ctp++) {
	    Tcl_DStringAppend(&ds, " ", -1);
	    Tcl_DStringAppend(&ds, ctp->go_name, -1);
	}
	Tcl_DStringAppend(&ds, "\n", -1);
	Tcl_DStringResult(interp, &ds);

	return TCL_ERROR;
    }

    go_current_gop = gop;

    for (ctp = go_cmds; ctp->go_name != (char *)0; ctp++) {
	if (ctp->go_name[0] == argv[1][0] &&
	    !strcmp(ctp->go_name, argv[1])) {
	    ret = (*ctp->go_wrapper_func)(gop->go_gedp, argc-1, (const char **)argv+1, ctp->go_func, ctp->go_usage, ctp->go_maxargs);
	    break;
	}
    }

    /* Command not found. */
    if (ctp->go_name == (char *)0) {
	Tcl_DStringAppend(&ds, "unknown subcommand: ", -1);
	Tcl_DStringAppend(&ds, argv[1], -1);
	Tcl_DStringAppend(&ds, "; must be one of: ", -1);

	for (ctp = go_cmds; ctp->go_name != (char *)NULL; ctp++) {
	    Tcl_DStringAppend(&ds, " ", -1);
	    Tcl_DStringAppend(&ds, ctp->go_name, -1);
	}
	Tcl_DStringAppend(&ds, "\n", -1);
	Tcl_DStringResult(interp, &ds);

	return TCL_ERROR;
    }

    Tcl_DStringAppend(&ds, bu_vls_addr(&gop->go_gedp->ged_result_str), -1);
    Tcl_DStringResult(interp, &ds);

    if (ret == BRLCAD_ERROR)
	return TCL_ERROR;

    return TCL_OK;
}


/**
 * @brief
 * Called by Tcl when the object is destroyed.
 */
void
go_deleteProc(ClientData clientData)
{
    struct ged_obj *gop = (struct ged_obj *)clientData;
    struct ged_dm_view *gdvp;

    if (go_current_gop == gop)
	go_current_gop = GED_OBJ_NULL;

#if 0
    GED_CHECK_OBJ(gop);
#endif
    BU_LIST_DEQUEUE(&gop->l);
    bu_vls_free(&gop->go_name);
    ged_close(gop->go_gedp);
#if 1
    while (BU_LIST_WHILE(gdvp, ged_dm_view, &gop->go_head_views.l)) {
	BU_LIST_DEQUEUE(&(gdvp->l));
	bu_vls_free(&gdvp->gdv_name);
	DM_CLOSE(gdvp->gdv_dmp);
	bu_free((genptr_t)gdvp->gdv_view, "ged_view");

	go_close_fbs(gdvp);

	bu_free((genptr_t)gdvp, "ged_dm_view");
    }
#else
    for (i = 0; i < GED_OBJ_NUM_VIEWS; ++i)
	bu_free((genptr_t)gop->go_views[i], "struct ged_view");
    if (gop->go_dmp != DM_NULL)
	DM_CLOSE(gop->go_dmp);
#endif
    bu_free((genptr_t)gop, "struct ged_obj");
}

/**
 * @brief
 * Create a command named "oname" in "interp" using "gedp" as its state.
 *
 */
int
go_create_cmd(Tcl_Interp	*interp,
	      struct ged_obj	*gop,	/* pointer to object */
	      const char	*oname)	/* object name */
{
    if (gop == GED_OBJ_NULL) {
	Tcl_AppendResult(interp, "go_create_cmd ", oname, " failed", NULL);
	return TCL_ERROR;
    }

    /* Instantiate the newprocname, with clientData of gop */
    /* Beware, returns a "token", not TCL_OK. */
    (void)Tcl_CreateCommand(interp, oname, (Tcl_CmdProc *)go_cmd,
			    (ClientData)gop, go_deleteProc);

    /* Return new function name as result */
    Tcl_AppendResult(interp, oname, (char *)NULL);

    return TCL_OK;
}

#if 0
/**
 * @brief
 * Create an command/object named "oname" in "interp" using "gop" as
 * its state.  It is presumed that the gop has already been opened.
 */
int
go_init_obj(Tcl_Interp		*interp,
	     struct ged_obj	*gop,	/* pointer to object */
	     const char		*oname)	/* object name */
{
    if (gop == GED_OBJ_NULL) {
	Tcl_AppendResult(interp, "ged_init_obj ", oname, " failed (ged_init_obj)", NULL);
	return TCL_ERROR;
    }

    /* initialize ged_obj */
    bu_vls_init(&gop->go_name);
    bu_vls_strcpy(&gop->go_name, oname);
    bu_vls_init(&gop->go_more_args_callback);

    BU_LIST_INIT(&gop->go_observers.l);
    gop->go_interp = interp;

    /* append to list of ged_obj */
    BU_LIST_APPEND(&HeadGedObj.l, &gop->l);

    return TCL_OK;
}
#endif

/**
 *			G E D _ O P E N _ T C L
 *@brief
 *  A TCL interface to wdb_fopen() and wdb_dbopen().
 *
 *  @par Implicit return -
 *	Creates a new TCL proc which responds to get/put/etc. arguments
 *	when invoked.  clientData of that proc will be ged_obj pointer
 *	for this instance of the database.
 *	Easily allows keeping track of multiple databases.
 *
 *  @return wdb pointer, for more traditional C-style interfacing.
 *
 *  @par Example -
 *	set gop [go_open .inmem inmem $dbip]
 *@n	.inmem get box.s
 *@n	.inmem close
 *
 *@n	go_open db file "bob.g"
 *@n	db get white.r
 *@n	db close
 */
static int
go_open_tcl(ClientData	clientData,
	     Tcl_Interp	*interp,
	     int	argc,
	     const char	**argv)
{
    struct ged_obj *gop;
    struct ged *gedp;

    if (argc == 1) {
	/* get list of database objects */
	for (BU_LIST_FOR(gop, ged_obj, &HeadGedObj.l))
	    Tcl_AppendResult(interp, bu_vls_addr(&gop->go_name), " ", (char *)NULL);

	return TCL_OK;
    }

    if (argc < 3 || 4 < argc) {
	Tcl_AppendResult(interp, "\
Usage: go_open\n\
       go_open newprocname file filename\n\
       go_open newprocname disk $dbip\n\
       go_open newprocname disk_append $dbip\n\
       go_open newprocname inmem $dbip\n\
       go_open newprocname inmem_append $dbip\n\
       go_open newprocname db filename\n\
       go_open newprocname filename\n",
			 NULL);
	return TCL_ERROR;
    }

    /* Delete previous proc (if any) to release all that memory, first */
    (void)Tcl_DeleteCommand(interp, argv[1]);

    if (argc == 3 || strcmp(argv[2], "db") == 0) {
	if (argc == 3)
	    gedp = ged_open("filename", argv[2], 0); 
	else
	    gedp = ged_open("db", argv[3], 0); 
    } else
	gedp = ged_open(argv[2], argv[3], 0); 

    /* initialize ged_obj */
    BU_GETSTRUCT(gop, ged_obj);
    gop->go_gedp = gedp;
    gop->go_gedp->ged_output_handler = go_output_handler;
    gop->go_gedp->ged_refresh_handler = go_refresh_handler;
    bu_vls_init(&gop->go_name);
    bu_vls_strcpy(&gop->go_name, argv[1]);
    bu_vls_init(&gop->go_more_args_callback);
    BU_LIST_INIT(&gop->go_observers.l);
    gop->go_interp = interp;

    BU_LIST_INIT(&gop->go_head_views.l);

    /* append to list of ged_obj */
    BU_LIST_APPEND(&HeadGedObj.l, &gop->l);

    return go_create_cmd(interp, gop, argv[1]);
}


/*************************** Local Command Functions ***************************/
static int
go_autoview(struct ged		*gedp,
	    int			argc,
	    const char		*argv[],
	    ged_func_ptr	func,
	    const char		*usage,
	    int			maxargs)
{
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    if (argc != 2) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    go_autoview_view(gdvp);

    return BRLCAD_OK;
}

static int
go_blast(struct ged	*gedp,
	 int		argc,
	 const char	*argv[],
	 ged_func_ptr	func,
	 const char	*usage,
	 int		maxargs)
{
    int ret;

    ret = ged_blast(gedp, argc, argv);

    if (ret != BRLCAD_OK)
	return ret;

    go_autoview_all_views(go_current_gop);

    return ret;
}

static int
go_configure(struct ged		*gedp,
	     int		argc,
	     const char		*argv[],
	     ged_func_ptr	func,
	     const char		*usage,
	     int		maxargs)
{
    struct ged_dm_view *gdvp;
    int	status;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    if (argc != 2) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    /* configure the display manager window */
    status = DM_CONFIGURE_WIN(gdvp->gdv_dmp);

    /* configure the framebuffer window */
    if (gdvp->gdv_fbs.fbs_fbp != FBIO_NULL)
	fb_configureWindow(gdvp->gdv_fbs.fbs_fbp,
			   gdvp->gdv_dmp->dm_width,
			   gdvp->gdv_dmp->dm_height);

    {
	char cdimX[32];
	char cdimY[32];
	char *av[5];

	snprintf(cdimX, 32, "%d", gdvp->gdv_dmp->dm_width);
	snprintf(cdimY, 32, "%d", gdvp->gdv_dmp->dm_height);

	av[0] = "rect";
	av[1] = "cdim";
	av[2] = cdimX;
	av[3] = cdimY;
	av[4] = '\0';

	gedp->ged_gvp = gdvp->gdv_view;
	(void)ged_rect(gedp, 4, (const char **)av);
    }

    if (status == TCL_OK) {
	go_refresh_view(gdvp);
	return BRLCAD_OK;
    }

    return BRLCAD_ERROR;
}

static int
go_constrain_rmode(struct ged	*gedp,
		   int		argc,
		   const char	*argv[],
		   ged_func_ptr	func,
		   const char	*usage,
		   int		maxargs)
{
    fastf_t x, y;
    struct bu_vls bindings;
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc != 5) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    if ((argv[2][0] != 'x' &&
	 argv[2][0] != 'y' &&
	 argv[2][0] != 'z') || argv[2][1] != '\0') {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_OK;
    }

    if (sscanf(argv[3], "%lf", &x) != 1 ||
	sscanf(argv[4], "%lf", &y) != 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    gdvp->gdv_view->gv_prevMouseX = x;
    gdvp->gdv_view->gv_prevMouseY = y;
    gdvp->gdv_view->gv_mode = GED_CONSTRAINED_ROTATE_MODE;

    bu_vls_init(&bindings);
    bu_vls_printf(&bindings, "bind %V <Motion> {%V mouse_constrain_rot %V %s %%x %%y}; break",
		  &gdvp->gdv_dmp->dm_pathName,
		  &go_current_gop->go_name,
		  &gdvp->gdv_name,
		  argv[2]);
    Tcl_Eval(go_current_gop->go_interp, bu_vls_addr(&bindings));
    bu_vls_free(&bindings);

    return BRLCAD_OK;
}

static int
go_constrain_tmode(struct ged	*gedp,
		   int		argc,
		   const char	*argv[],
		   ged_func_ptr	func,
		   const char	*usage,
		   int		maxargs)
{
    fastf_t x, y;
    struct bu_vls bindings;
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc != 5) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    if ((argv[2][0] != 'x' &&
	 argv[2][0] != 'y' &&
	 argv[2][0] != 'z') || argv[2][1] != '\0') {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_OK;
    }

    if (sscanf(argv[3], "%lf", &x) != 1 ||
	sscanf(argv[4], "%lf", &y) != 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    gdvp->gdv_view->gv_prevMouseX = x;
    gdvp->gdv_view->gv_prevMouseY = y;
    gdvp->gdv_view->gv_mode = GED_CONSTRAINED_TRANSLATE_MODE;

    bu_vls_init(&bindings);
    bu_vls_printf(&bindings, "bind %V <Motion> {%V mouse_constrain_trans %V %s %%x %%y}; break",
		  &gdvp->gdv_dmp->dm_pathName,
		  &go_current_gop->go_name,
		  &gdvp->gdv_name,
		  argv[2]);
    Tcl_Eval(go_current_gop->go_interp, bu_vls_addr(&bindings));
    bu_vls_free(&bindings);

    return BRLCAD_OK;
}

static int
go_delete_view(struct ged	*gedp,
	       int		argc,
	       const char	*argv[],
	       ged_func_ptr	func,
	       const char	*usage,
	       int		maxargs)
{
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc != 2) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    BU_LIST_DEQUEUE(&(gdvp->l));
    bu_vls_free(&gdvp->gdv_name);
    DM_CLOSE(gdvp->gdv_dmp);
    bu_free((genptr_t)gdvp->gdv_view, "ged_view");
    bu_free((genptr_t)gdvp, "ged_dm_view");

    return BRLCAD_OK;
}

static int
go_idle_mode(struct ged		*gedp,
	     int		argc,
	     const char		*argv[],
	     ged_func_ptr	func,
	     const char		*usage,
	     int		maxargs)
{
    struct bu_vls bindings;
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc != 2) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    bu_vls_init(&bindings);
    bu_vls_printf(&bindings, "bind %V <Motion> {}",
		  &gdvp->gdv_dmp->dm_pathName);
    Tcl_Eval(go_current_gop->go_interp, bu_vls_addr(&bindings));
    bu_vls_free(&bindings);

    if (gdvp->gdv_view->gv_grid.ggs_snap &&
	(gdvp->gdv_view->gv_mode == GED_TRANSLATE_MODE ||
	 gdvp->gdv_view->gv_mode == GED_CONSTRAINED_TRANSLATE_MODE)) {
	char *av[3];

	gedp->ged_gvp = gdvp->gdv_view;
	av[0] = "grid";
	av[1] = "vsnap";
	av[2] = '\0';
	ged_grid(gedp, 2, (const char **)av);
	go_refresh_view(gdvp);
    }

    gdvp->gdv_view->gv_mode = GED_IDLE_MODE;

    return BRLCAD_OK;
}

static int
go_light(struct ged	*gedp,
	 int		argc,
	 const char	*argv[],
	 ged_func_ptr	func,
	 const char	*usage,
	 int		maxargs)
{
    int light;
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (3 < argc) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    /* get light flag */
    if (argc == 2) {
	bu_vls_printf(&gedp->ged_result_str, "%d", gdvp->gdv_dmp->dm_light);
	return BRLCAD_OK;
    }

    /* set light flag */
    if (sscanf(argv[2], "%d", &light) != 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    if (light < 0)
	light = 0;
    else if (1 < light)
	light = 1;

    DM_SET_LIGHT(gdvp->gdv_dmp, light);
    go_refresh_view(gdvp);

    return BRLCAD_OK;
}

static int
go_list_views(struct ged	*gedp,
	      int		argc,
	      const char	*argv[],
	      ged_func_ptr	func,
	      const char	*usage,
	      int		maxargs)
{
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    if (argc != 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s", argv[0]);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l))
	bu_vls_printf(&gedp->ged_result_str, "%V ", &gdvp->gdv_name);

    return BRLCAD_OK;
}

static int
go_listen(struct ged	*gedp,
	  int		argc,
	  const char	*argv[],
	  ged_func_ptr	func,
	  const char	*usage,
	  int		maxargs)
{
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (3 < argc) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    if (gdvp->gdv_fbs.fbs_fbp == FBIO_NULL) {
	bu_vls_printf(&gedp->ged_result_str, "%s listen: framebuffer not open!\n", argv[0]);
	return BRLCAD_ERROR;
    }

    /* return the port number */
    if (argc == 2) {
	bu_vls_printf(&gedp->ged_result_str, "%d", gdvp->gdv_fbs.fbs_listener.fbsl_port);
	return BRLCAD_OK;
    }

    if (argc == 3) {
	int port;

	if (sscanf(argv[2], "%d", &port) != 1) {
	    bu_vls_printf(&gedp->ged_result_str, "listen: bad value - %s\n", argv[2]);
	    return BRLCAD_ERROR;
	}

	if (port >= 0)
	    fbs_open(&gdvp->gdv_fbs, port);
	else {
	    fbs_close(&gdvp->gdv_fbs);
	}
	bu_vls_printf(&gedp->ged_result_str, "%d", gdvp->gdv_fbs.fbs_listener.fbsl_port);
	return BRLCAD_OK;
    }

    bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
    return BRLCAD_ERROR;
}

static int
go_make(struct ged	*gedp,
	int		argc,
	const char	*argv[],
	ged_func_ptr	func,
	const char	*usage,
	int		maxargs)
{
    int ret;
    char *av[3];

    ret = ged_make(gedp, argc, argv);

    if (ret == BRLCAD_OK) {
	av[0] = "draw";
	av[1] = (char *)argv[argc-2];
	av[2] = (char *)0;
	go_autoview_func(gedp, 2, (const char **)av, ged_draw, (char *)0, MAXARGS);
    }

    return ret;
}

static int
go_mirror(struct ged	*gedp,
	  int		argc,
	  const char	*argv[],
	  ged_func_ptr	func,
	  const char	*usage,
	  int		maxargs)
{
    int ret;
    char *av[3];

    ret = ged_mirror(gedp, argc, argv);

    if (ret == BRLCAD_OK) {
	av[0] = "draw";
	av[1] = (char *)argv[argc-1];
	av[2] = (char *)0;
	go_autoview_func(gedp, 2, (const char **)av, ged_draw, (char *)0, MAXARGS);
    }

    return ret;
}

static int
go_more_args_callback(struct ged	*gedp,
		      int		argc,
		      const char	*argv[],
		      ged_func_ptr	func,
		      const char	*usage,
		      int		maxargs)
{
    register int i;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* get the callback string */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "%s", bu_vls_addr(&go_current_gop->go_more_args_callback));
	
	return BRLCAD_OK;
    }

    /* set the callback string */
    bu_vls_trunc(&go_current_gop->go_more_args_callback, 0);
    for (i = 1; i < argc; ++i)
	bu_vls_printf(&go_current_gop->go_more_args_callback, "%s ", argv[i]);

    return BRLCAD_OK;
}

static int
go_mouse_constrain_rot(struct ged	*gedp,
		       int		argc,
		       const char	*argv[],
		       ged_func_ptr	func,
		       const char	*usage,
		       int		maxargs)
{
    int ret;
    int ac;
    char *av[3];
    fastf_t x, y;
    fastf_t dx, dy;
    fastf_t sf;
    struct bu_vls rot_vls;
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc != 5) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    if ((argv[2][0] != 'x' && argv[2][0] != 'y' && argv[2][0] != 'z') || argv[2][1] != '\0') {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    if (sscanf(argv[3], "%lf", &x) != 1 ||
	sscanf(argv[4], "%lf", &y) != 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    dx = x - gdvp->gdv_view->gv_prevMouseX;
    dy = gdvp->gdv_view->gv_prevMouseY - y;

    gdvp->gdv_view->gv_prevMouseX = x;
    gdvp->gdv_view->gv_prevMouseY = y;

    if (dx < gdvp->gdv_view->gv_minMouseDelta)
	dx = gdvp->gdv_view->gv_minMouseDelta;
    else if (gdvp->gdv_view->gv_maxMouseDelta < dx)
	dx = gdvp->gdv_view->gv_maxMouseDelta;

    if (dy < gdvp->gdv_view->gv_minMouseDelta)
	dy = gdvp->gdv_view->gv_minMouseDelta;
    else if (gdvp->gdv_view->gv_maxMouseDelta < dy)
	dy = gdvp->gdv_view->gv_maxMouseDelta;

    dx *= gdvp->gdv_view->gv_rscale;
    dy *= gdvp->gdv_view->gv_rscale;

    if (fabs(dx) > fabs(dy))
	sf = dx;
    else
	sf = dy;

    bu_vls_init(&rot_vls);
    switch (argv[2][0]) {
    case 'x':
	bu_vls_printf(&rot_vls, "%lf 0 0", sf);
    case 'y':
	bu_vls_printf(&rot_vls, "0 %lf 0", sf);
    case 'z':
	bu_vls_printf(&rot_vls, "0 0 %lf", sf);
    }

    gedp->ged_gvp = gdvp->gdv_view;
    ac = 2;
    av[0] = "rot";
    av[1] = bu_vls_addr(&rot_vls);
    av[2] = (char *)0;

    ret = ged_rot(gedp, ac, (const char **)av);
    bu_vls_free(&rot_vls);

    if (ret == BRLCAD_OK)
	go_refresh_view(gdvp);

    return BRLCAD_OK;
}

static int
go_mouse_constrain_trans(struct ged	*gedp,
			 int		argc,
			 const char	*argv[],
			 ged_func_ptr	func,
			 const char	*usage,
			 int		maxargs)
{
    int ret;
    int ac;
    char *av[3];
    fastf_t x, y;
    fastf_t dx, dy;
    fastf_t sf;
    fastf_t inv_width;
    struct bu_vls tran_vls;
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc != 5) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    if ((argv[2][0] != 'x' && argv[2][0] != 'y' && argv[2][0] != 'z') || argv[2][1] != '\0') {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    if (sscanf(argv[3], "%lf", &x) != 1 ||
	sscanf(argv[4], "%lf", &y) != 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    dx = x - gdvp->gdv_view->gv_prevMouseX;
    dy = gdvp->gdv_view->gv_prevMouseY - y;

    gdvp->gdv_view->gv_prevMouseX = x;
    gdvp->gdv_view->gv_prevMouseY = y;

    if (dx < gdvp->gdv_view->gv_minMouseDelta)
	dx = gdvp->gdv_view->gv_minMouseDelta;
    else if (gdvp->gdv_view->gv_maxMouseDelta < dx)
	dx = gdvp->gdv_view->gv_maxMouseDelta;

    if (dy < gdvp->gdv_view->gv_minMouseDelta)
	dy = gdvp->gdv_view->gv_minMouseDelta;
    else if (gdvp->gdv_view->gv_maxMouseDelta < dy)
	dy = gdvp->gdv_view->gv_maxMouseDelta;

    inv_width = 1.0 / gdvp->gdv_dmp->dm_width;
    dx *= inv_width * gdvp->gdv_view->gv_size * gedp->ged_wdbp->dbip->dbi_local2base;
    dy *= inv_width * gdvp->gdv_view->gv_size * gedp->ged_wdbp->dbip->dbi_local2base;

    if (fabs(dx) > fabs(dy))
	sf = dx;
    else
	sf = dy;

    bu_vls_init(&tran_vls);
    switch (argv[2][0]) {
    case 'x':
	bu_vls_printf(&tran_vls, "%lf 0 0", sf);
    case 'y':
	bu_vls_printf(&tran_vls, "0 %lf 0", sf);
    case 'z':
	bu_vls_printf(&tran_vls, "0 0 %lf", sf);
    }

    gedp->ged_gvp = gdvp->gdv_view;
    ac = 2;
    av[0] = "tra";
    av[1] = bu_vls_addr(&tran_vls);
    av[2] = (char *)0;

    ret = ged_tra(gedp, ac, (const char **)av);
    bu_vls_free(&tran_vls);

    if (ret == BRLCAD_OK)
	go_refresh_view(gdvp);

    return BRLCAD_OK;
}

static int
go_mouse_rot(struct ged		*gedp,
	     int		argc,
	     const char		*argv[],
	     ged_func_ptr	func,
	     const char		*usage,
	     int		maxargs)
{
    int ret;
    int ac;
    char *av[4];
    fastf_t x, y;
    fastf_t dx, dy;
    struct bu_vls rot_vls;
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc != 4) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    if (sscanf(argv[2], "%lf", &x) != 1 ||
	sscanf(argv[3], "%lf", &y) != 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    dx = gdvp->gdv_view->gv_prevMouseY - y;
    dy = gdvp->gdv_view->gv_prevMouseX - x;

    gdvp->gdv_view->gv_prevMouseX = x;
    gdvp->gdv_view->gv_prevMouseY = y;

    if (dx < gdvp->gdv_view->gv_minMouseDelta)
	dx = gdvp->gdv_view->gv_minMouseDelta;
    else if (gdvp->gdv_view->gv_maxMouseDelta < dx)
	dx = gdvp->gdv_view->gv_maxMouseDelta;

    if (dy < gdvp->gdv_view->gv_minMouseDelta)
	dy = gdvp->gdv_view->gv_minMouseDelta;
    else if (gdvp->gdv_view->gv_maxMouseDelta < dy)
	dy = gdvp->gdv_view->gv_maxMouseDelta;

    dx *= gdvp->gdv_view->gv_rscale;
    dy *= gdvp->gdv_view->gv_rscale;

    bu_vls_init(&rot_vls);
    bu_vls_printf(&rot_vls, "%lf %lf 0", dx, dy);

    gedp->ged_gvp = gdvp->gdv_view;
    ac = 3;
    av[0] = "rot";
    av[1] = "-v";
    av[2] = bu_vls_addr(&rot_vls);
    av[3] = (char *)0;

    ret = ged_rot(gedp, ac, (const char **)av);
    bu_vls_free(&rot_vls);

    if (ret == BRLCAD_OK)
	go_refresh_view(gdvp);

    return BRLCAD_OK;
}

static int
go_mouse_scale(struct ged	*gedp,
	       int		argc,
	       const char	*argv[],
	       ged_func_ptr	func,
	       const char	*usage,
	       int		maxargs)
{
    int ret;
    int ac;
    char *av[3];
    fastf_t x, y;
    fastf_t dx, dy;
    fastf_t sf;
    fastf_t inv_width;
    struct bu_vls zoom_vls;
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc != 4) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    if (sscanf(argv[2], "%lf", &x) != 1 ||
	sscanf(argv[3], "%lf", &y) != 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    dx = x - gdvp->gdv_view->gv_prevMouseX;
    dy = gdvp->gdv_view->gv_prevMouseY - y;

    gdvp->gdv_view->gv_prevMouseX = x;
    gdvp->gdv_view->gv_prevMouseY = y;

    if (dx < gdvp->gdv_view->gv_minMouseDelta)
	dx = gdvp->gdv_view->gv_minMouseDelta;
    else if (gdvp->gdv_view->gv_maxMouseDelta < dx)
	dx = gdvp->gdv_view->gv_maxMouseDelta;

    if (dy < gdvp->gdv_view->gv_minMouseDelta)
	dy = gdvp->gdv_view->gv_minMouseDelta;
    else if (gdvp->gdv_view->gv_maxMouseDelta < dy)
	dy = gdvp->gdv_view->gv_maxMouseDelta;

    inv_width = 1.0 / gdvp->gdv_dmp->dm_width;
    dx *= inv_width * gdvp->gdv_view->gv_sscale;
    dy *= inv_width * gdvp->gdv_view->gv_sscale;

    if (fabs(dx) > fabs(dy))
	sf = 1.0 + dx;
    else
	sf = 1.0 + dy;

    bu_vls_init(&zoom_vls);
    bu_vls_printf(&zoom_vls, "%lf", sf);

    gedp->ged_gvp = gdvp->gdv_view;
    ac = 2;
    av[0] = "zoom";
    av[1] = bu_vls_addr(&zoom_vls);
    av[2] = (char *)0;

    ret = ged_zoom(gedp, ac, (const char **)av);
    bu_vls_free(&zoom_vls);

    if (ret == BRLCAD_OK)
	go_refresh_view(gdvp);

    return BRLCAD_OK;
}

static int
go_mouse_trans(struct ged	*gedp,
	       int		argc,
	       const char	*argv[],
	       ged_func_ptr	func,
	       const char	*usage,
	       int		maxargs)
{
    int ret;
    int ac;
    char *av[4];
    fastf_t x, y;
    fastf_t dx, dy;
    fastf_t inv_width;
    struct bu_vls trans_vls;
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc != 4) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    if (sscanf(argv[2], "%lf", &x) != 1 ||
	sscanf(argv[3], "%lf", &y) != 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    dx = gdvp->gdv_view->gv_prevMouseX - x;
    dy = y - gdvp->gdv_view->gv_prevMouseY;

    gdvp->gdv_view->gv_prevMouseX = x;
    gdvp->gdv_view->gv_prevMouseY = y;

    if (dx < gdvp->gdv_view->gv_minMouseDelta)
	dx = gdvp->gdv_view->gv_minMouseDelta;
    else if (gdvp->gdv_view->gv_maxMouseDelta < dx)
	dx = gdvp->gdv_view->gv_maxMouseDelta;

    if (dy < gdvp->gdv_view->gv_minMouseDelta)
	dy = gdvp->gdv_view->gv_minMouseDelta;
    else if (gdvp->gdv_view->gv_maxMouseDelta < dy)
	dy = gdvp->gdv_view->gv_maxMouseDelta;

    inv_width = 1.0 / gdvp->gdv_dmp->dm_width;
    dx *= inv_width * gdvp->gdv_view->gv_size * gedp->ged_wdbp->dbip->dbi_local2base;
    dy *= inv_width * gdvp->gdv_view->gv_size * gedp->ged_wdbp->dbip->dbi_local2base;

    bu_vls_init(&trans_vls);
    bu_vls_printf(&trans_vls, "%lf %lf 0", dx, dy);

    gedp->ged_gvp = gdvp->gdv_view;
    ac = 3;
    av[0] = "tra";
    av[1] = "-v";
    av[2] = bu_vls_addr(&trans_vls);
    av[3] = (char *)0;

    ret = ged_tra(gedp, ac, (const char **)av);
    bu_vls_free(&trans_vls);

    if (ret == BRLCAD_OK)
	go_refresh_view(gdvp);

    return BRLCAD_OK;
}

static int
go_new_view(struct ged		*gedp,
	    int			argc,
	    const char		*argv[],
	    ged_func_ptr	func,
	    const char		*usage,
	    int			maxargs)
{
    struct ged_dm_view *new_gdvp = BU_LIST_LAST(ged_dm_view, &go_current_gop->go_head_views.l);
    static const int name_index = 1;
    int type = DM_TYPE_BAD;

    GED_CHECK_DATABASE_OPEN(gedp, BRLCAD_ERROR);

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc < 3) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    /* find display manager type */
#ifdef DM_X
    if (argv[2][0] == 'X' || argv[2][0] == 'x')
	type = DM_TYPE_X;
#endif /* DM_X */

#ifdef DM_TK
    if (!strcmp(argv[2], "tk"))
	type = DM_TYPE_TK;
#endif /* DM_TK */

#ifdef DM_OGL
    if (!strcmp(argv[2], "ogl"))
	type = DM_TYPE_OGL;
#endif /* DM_OGL */

#ifdef DM_WGL
    if (!strcmp(argv[2], "wgl"))
	type = DM_TYPE_WGL;
#endif /* DM_WGL */

    if (type == DM_TYPE_BAD) {
	bu_vls_printf(&gedp->ged_result_str, "Unsupported display manager type - %s\n", argv[2]);
	return BRLCAD_ERROR;
    }

    BU_GETSTRUCT(new_gdvp, ged_dm_view);
    BU_GETSTRUCT(new_gdvp->gdv_view, ged_view);

    {
	int i;
	int arg_start = 3;
	int newargs = 0;
	int ac;
	char **av;

	ac = argc + newargs;
	av = (char **)bu_malloc(sizeof(char *) * (ac+1), "go_new_view: av");
	av[0] = (char *)argv[0];

	/*
	 * Stuff name into argument list.
	 */
	av[1] = "-n";
	av[2] = (char *)argv[name_index];

	/* copy the rest */
	for (i = arg_start; i < argc; ++i)
	    av[i+newargs] = (char *)argv[i];
	av[i+newargs] = (char *)NULL;

	if ((new_gdvp->gdv_dmp = dm_open(go_current_gop->go_interp, type, ac, av)) == DM_NULL) {
	    bu_free((genptr_t)new_gdvp->gdv_view, "ged_view");
	    bu_free((genptr_t)new_gdvp, "ged_dm_view");
	    bu_free((genptr_t)av, "go_new_view: av");

	    bu_vls_printf(&gedp->ged_result_str, "Failed to create %s\n", argv[1]);
	    return BRLCAD_ERROR;
	}

	bu_free((genptr_t)av, "go_new_view: av");

    }

    new_gdvp->gdv_gop = go_current_gop;
    bu_vls_init(&new_gdvp->gdv_name);
    bu_vls_printf(&new_gdvp->gdv_name, argv[name_index]);
    ged_view_init(new_gdvp->gdv_view);
    BU_LIST_INSERT(&go_current_gop->go_head_views.l, &new_gdvp->l);

    bu_vls_printf(&gedp->ged_result_str, "%s", argv[name_index]);

    new_gdvp->gdv_fbs.fbs_listener.fbsl_fbsp = &new_gdvp->gdv_fbs;
    new_gdvp->gdv_fbs.fbs_listener.fbsl_fd = -1;
    new_gdvp->gdv_fbs.fbs_listener.fbsl_port = -1;
    new_gdvp->gdv_fbs.fbs_fbp = FBIO_NULL;
    new_gdvp->gdv_fbs.fbs_callback = go_fbs_callback;
    new_gdvp->gdv_fbs.fbs_clientData = new_gdvp;
    new_gdvp->gdv_fbs.fbs_interp = go_current_gop->go_interp;

    new_gdvp->gdv_view->gv_adc.gas_a1 = 45.0;
    new_gdvp->gdv_view->gv_adc.gas_a2 = 45.0;
    new_gdvp->gdv_view->gv_adc.gas_line_color[0] = 255;
    new_gdvp->gdv_view->gv_adc.gas_line_color[1] = 255;
    new_gdvp->gdv_view->gv_adc.gas_line_color[2] = 0;
    new_gdvp->gdv_view->gv_adc.gas_tick_color[0] = 255;
    new_gdvp->gdv_view->gv_adc.gas_tick_color[1] = 255;
    new_gdvp->gdv_view->gv_adc.gas_tick_color[2] = 255;

    new_gdvp->gdv_view->gv_grid.ggs_anchor[0] = 0.0;
    new_gdvp->gdv_view->gv_grid.ggs_anchor[1] = 0.0;
    new_gdvp->gdv_view->gv_grid.ggs_anchor[2] = 0.0;
    new_gdvp->gdv_view->gv_grid.ggs_res_h = 1.0;
    new_gdvp->gdv_view->gv_grid.ggs_res_v = 1.0;
    new_gdvp->gdv_view->gv_grid.ggs_res_major_h = 5;
    new_gdvp->gdv_view->gv_grid.ggs_res_major_v = 5;
    new_gdvp->gdv_view->gv_grid.ggs_color[0] = 255;
    new_gdvp->gdv_view->gv_grid.ggs_color[1] = 255;
    new_gdvp->gdv_view->gv_grid.ggs_color[2] = 255;

    new_gdvp->gdv_view->gv_rect.grs_draw = 0;
    new_gdvp->gdv_view->gv_rect.grs_pos[0] = 128;
    new_gdvp->gdv_view->gv_rect.grs_pos[1] = 128;
    new_gdvp->gdv_view->gv_rect.grs_dim[0] = 256;
    new_gdvp->gdv_view->gv_rect.grs_dim[1] = 256;
    new_gdvp->gdv_view->gv_rect.grs_color[0] = 255;
    new_gdvp->gdv_view->gv_rect.grs_color[1] = 255;
    new_gdvp->gdv_view->gv_rect.grs_color[2] = 255;

    /* open the framebuffer */
    go_open_fbs(new_gdvp, go_current_gop->go_interp);

    /* Set default bindings */
    {
	struct bu_vls bindings;

	bu_vls_init(&bindings);
	bu_vls_printf(&bindings, "bind %V <Configure> {%V configure %V; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <Expose> {%V refresh %V; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "wm protocol %V WM_DELETE_WINDOW {%V delete_view %V; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <2> {%V vslew %V %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <1> {%V zoom %V 0.5; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <3> {%V zoom %V 2.0; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);

	/* Idle Mode */
	bu_vls_printf(&bindings, "bind %V <ButtonRelease> {%V idle_mode %V; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <KeyRelease-Control_L> {%V idle_mode %V; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <KeyRelease-Control_R> {%V idle_mode %V; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <KeyRelease-Shift_L> {%V idle_mode %V; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <KeyRelease-Shift_R> {%V idle_mode %V; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <KeyRelease-Alt_L> {%V idle_mode %V; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <KeyRelease-Alt_R> {%V idle_mode %V; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);

	/* Rotate Mode */
	bu_vls_printf(&bindings, "bind %V <Control-ButtonPress-1> {%V rotate_mode %V %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <Control-ButtonPress-2> {%V rotate_mode %V %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <Control-ButtonPress-3> {%V rotate_mode %V %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);

	/* Translate Mode */
	bu_vls_printf(&bindings, "bind %V <Shift-ButtonPress-1> {%V translate_mode %V %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <Shift-ButtonPress-2> {%V translate_mode %V %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <Shift-ButtonPress-3> {%V translate_mode %V %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);

	/* Scale Mode */
	bu_vls_printf(&bindings, "bind %V <Control-Shift-ButtonPress-1> {%V scale_mode %V %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <Control-Shift-ButtonPress-2> {%V scale_mode %V %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <Control-Shift-ButtonPress-3> {%V scale_mode %V %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <Alt-Control-Shift-ButtonPress-1> {%V scale_mode %V %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <Alt-Control-Shift-ButtonPress-2> {%V scale_mode %V %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <Alt-Control-Shift-ButtonPress-3> {%V scale_mode %V %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);

	/* Constrained Rotate Mode */
	bu_vls_printf(&bindings, "bind %V <Alt-Control-ButtonPress-1> {%V constrain_rmode %V x %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <Alt-Control-ButtonPress-2> {%V constrain_rmode %V y %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <Alt-Control-ButtonPress-3> {%V constrain_rmode %V z %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);

	/* Constrained Translate Mode */
	bu_vls_printf(&bindings, "bind %V <Alt-Shift-ButtonPress-1> {%V constrain_tmode %V x %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <Alt-Shift-ButtonPress-2> {%V constrain_tmode %V y %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V <Alt-Shift-ButtonPress-3> {%V constrain_tmode %V z %%x %%y; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);

	/* Key Bindings */
	bu_vls_printf(&bindings, "bind %V 3 {%V aet %V 35 25; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V 4 {%V aet %V 45 45; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V f {%V aet %V 0 0; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V R {%V aet %V 180 0; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V r {%V aet %V 270 0; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V l {%V aet %V 90 0; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V t {%V aet %V 0 90; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "bind %V b {%V aet %V 0 270; break}; ",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);
	bu_vls_printf(&bindings, "event generate %V <Configure>; %V autoview %V",
		      &new_gdvp->gdv_dmp->dm_pathName,
		      &go_current_gop->go_name,
		      &new_gdvp->gdv_name);

	Tcl_Eval(go_current_gop->go_interp, bu_vls_addr(&bindings));
	bu_vls_free(&bindings);
    }

    return BRLCAD_OK;
}

static int
go_paint_rect_area(struct ged	*gedp,
		   int		argc,
		   const char	*argv[],
		   ged_func_ptr	func,
		   const char	*usage,
		   int		maxargs)
{
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }
    if (argc < 2 || 7 < argc) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    (void)fb_refresh(gdvp->gdv_fbs.fbs_fbp, gdvp->gdv_view->gv_rect.grs_pos[X], gdvp->gdv_view->gv_rect.grs_pos[Y],
		     gdvp->gdv_view->gv_rect.grs_dim[X], gdvp->gdv_view->gv_rect.grs_dim[Y]);

    return BRLCAD_OK;
}

static int
go_refresh(struct ged	*gedp,
	   int		argc,
	   const char	*argv[],
	   ged_func_ptr	func,
	   const char	*usage,
	   int		maxargs)
{
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc != 2) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

#if 0
    GED_CHECK_DRAWABLE(gedp, BRLCAD_ERROR);
#endif

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    go_refresh_view(gdvp);

    return BRLCAD_OK;
}

static int
go_refresh_all(struct ged	*gedp,
	       int		argc,
	       const char	*argv[],
	       ged_func_ptr	func,
	       const char	*usage,
	       int		maxargs)
{
    if (argc != 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s", argv[0]);
	return BRLCAD_ERROR;
    }

    go_refresh_all_views(go_current_gop);

    return BRLCAD_OK;
}

static int
go_rotate_mode(struct ged	*gedp,
	       int		argc,
	       const char	*argv[],
	       ged_func_ptr	func,
	       const char	*usage,
	       int		maxargs)
{
    fastf_t x, y;
    struct bu_vls bindings;
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc != 4) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    if (sscanf(argv[2], "%lf", &x) != 1 ||
	sscanf(argv[3], "%lf", &y) != 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    gdvp->gdv_view->gv_prevMouseX = x;
    gdvp->gdv_view->gv_prevMouseY = y;
    gdvp->gdv_view->gv_mode = GED_ROTATE_MODE;

    bu_vls_init(&bindings);
    bu_vls_printf(&bindings, "bind %V <Motion> {%V mouse_rot %V %%x %%y}",
		  &gdvp->gdv_dmp->dm_pathName,
		  &go_current_gop->go_name,
		  &gdvp->gdv_name);
    Tcl_Eval(go_current_gop->go_interp, bu_vls_addr(&bindings));
    bu_vls_free(&bindings);

    return BRLCAD_OK;
}

/**
 *			GO _ D E L E T E P R O C _ R T
 *@brief
 *  Called when the named proc created by rt_gettrees() is destroyed.
 */
static void
go_deleteProc_rt(ClientData clientData)
{
    struct application	*ap = (struct application *)clientData;
    struct rt_i		*rtip;

    RT_AP_CHECK(ap);
    rtip = ap->a_rt_i;
    RT_CK_RTI(rtip);

    rt_free_rti(rtip);
    ap->a_rt_i = (struct rt_i *)NULL;

    bu_free( (genptr_t)ap, "struct application" );
}

/**
 *			G O _ R T _ G E T T R E E S
 *@brief
 *  Given an instance of a database and the name of some treetops,
 *  create a named "ray-tracing" object (proc) which will respond to
 *  subsequent operations.
 *  Returns new proc name as result.
 *
 * @par Example:
 *	.inmem rt_gettrees .rt all.g light.r
 */
int
go_rt_gettrees(struct ged	*gedp,
	       int		argc,
	       const char	*argv[],
	       ged_func_ptr	func,
	       const char	*usage,
	       int		maxargs)
{
    struct rt_i		*rtip;
    struct application	*ap;
    struct resource	*resp;
    char		*newprocname;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc < 3) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    rtip = rt_new_rti(gedp->ged_wdbp->dbip);
    newprocname = (char *)argv[1];

    /* Delete previous proc (if any) to release all that memory, first */
    (void)Tcl_DeleteCommand(go_current_gop->go_interp, newprocname);

    while (argv[2][0] == '-') {
	if (strcmp( argv[2], "-i") == 0) {
	    rtip->rti_dont_instance = 1;
	    argc--;
	    argv++;
	    continue;
	}
	if (strcmp(argv[2], "-u") == 0) {
	    rtip->useair = 1;
	    argc--;
	    argv++;
	    continue;
	}
	break;
    }

    if (rt_gettrees(rtip, argc-2, (const char **)&argv[2], 1) < 0) {
	bu_vls_printf(&gedp->ged_result_str, "rt_gettrees() returned error");
	rt_free_rti(rtip);
	return TCL_ERROR;
    }

    /* Establish defaults for this rt_i */
    rtip->rti_hasty_prep = 1;	/* Tcl isn't going to fire many rays */

    /*
     *  In case of multiple instances of the library, make sure that
     *  each instance has a separate resource structure,
     *  because the bit vector lengths depend on # of solids.
     *  And the "overwrite" sequence in Tcl is to create the new
     *  proc before running the Tcl_CmdDeleteProc on the old one,
     *  which in this case would trash rt_uniresource.
     *  Once on the rti_resources list, rt_clean() will clean 'em up.
     */
    BU_GETSTRUCT(resp, resource);
    rt_init_resource(resp, 0, rtip);
    BU_ASSERT_PTR( BU_PTBL_GET(&rtip->rti_resources, 0), !=, NULL );

    ap = (struct application *)bu_malloc(sizeof(struct application), "go_rt_gettrees: ap");
    RT_APPLICATION_INIT(ap);
    ap->a_magic = RT_AP_MAGIC;
    ap->a_resource = resp;
    ap->a_rt_i = rtip;
    ap->a_purpose = "Conquest!";

    rt_ck(rtip);

    /* Instantiate the proc, with clientData of wdb */
    /* Beware, returns a "token", not TCL_OK. */
    (void)Tcl_CreateCommand(go_current_gop->go_interp, newprocname, rt_tcl_rt,
			    (ClientData)ap, go_deleteProc_rt);

    /* Return new function name as result */
    bu_vls_printf(&gedp->ged_result_str, "%s", newprocname);

    return TCL_OK;
}

static int
go_scale_mode(struct ged	*gedp,
	      int		argc,
	      const char	*argv[],
	      ged_func_ptr	func,
	      const char	*usage,
	      int		maxargs)
{
    fastf_t x, y;
    struct bu_vls bindings;
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc != 4) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    if (sscanf(argv[2], "%lf", &x) != 1 ||
	sscanf(argv[3], "%lf", &y) != 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    gdvp->gdv_view->gv_prevMouseX = x;
    gdvp->gdv_view->gv_prevMouseY = y;
    gdvp->gdv_view->gv_mode = GED_SCALE_MODE;

    bu_vls_init(&bindings);
    bu_vls_printf(&bindings, "bind %V <Motion> {%V mouse_scale %V %%x %%y}",
		  &gdvp->gdv_dmp->dm_pathName,
		  &go_current_gop->go_name,
		  &gdvp->gdv_name);
    Tcl_Eval(go_current_gop->go_interp, bu_vls_addr(&bindings));
    bu_vls_free(&bindings);

    return BRLCAD_OK;
}

static int
go_set_coord(struct ged		*gedp,
	     int		argc,
	     const char		*argv[],
	     ged_func_ptr	func,
	     const char		*usage,
	     int		maxargs)
{
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (3 < argc) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    /* Get coord */
    if (argc == 2) {
	bu_vls_printf(&gedp->ged_result_str, "%c", gdvp->gdv_view->gv_coord);
	return BRLCAD_OK;
    }

    /* Set coord */
    if ((argv[2][0] != 'm' && argv[2][0] != 'v') || argv[2][1] != '\0') {
	bu_vls_printf(&gedp->ged_result_str, "set_coord: bad value - %s\n", argv[2]);
	return BRLCAD_ERROR;
    }

    gdvp->gdv_view->gv_coord = argv[2][0];

    return BRLCAD_OK;
}

static int
go_set_fb_mode(struct ged	*gedp,
	       int		argc,
	       const char	*argv[],
	       ged_func_ptr	func,
	       const char	*usage,
	       int		maxargs)
{
    int mode;
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (3 < argc) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    /* Get fb mode */
    if (argc == 2) {
	bu_vls_printf(&gedp->ged_result_str, "%d", gdvp->gdv_fbs.fbs_mode);
	return BRLCAD_OK;
    }

    /* Set fb mode */
    if (sscanf(argv[2], "%d", &mode) != 1) {
	bu_vls_printf(&gedp->ged_result_str, "set_fb_mode: bad value - %s\n", argv[2]);
	return BRLCAD_ERROR;
    }

    if (mode < 0)
	mode = 0;
    else if (GED_OBJ_FB_MODE_OVERLAY < mode)
	mode = GED_OBJ_FB_MODE_OVERLAY;

    gdvp->gdv_fbs.fbs_mode = mode;
    go_refresh_view(gdvp);

    return BRLCAD_OK;
}

static int
go_translate_mode(struct ged	*gedp,
		  int		argc,
		  const char	*argv[],
		  ged_func_ptr	func,
		  const char	*usage,
		  int		maxargs)
{
    fastf_t x, y;
    struct bu_vls bindings;
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc != 4) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    if (sscanf(argv[2], "%lf", &x) != 1 ||
	sscanf(argv[3], "%lf", &y) != 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    gdvp->gdv_view->gv_prevMouseX = x;
    gdvp->gdv_view->gv_prevMouseY = y;
    gdvp->gdv_view->gv_mode = GED_TRANSLATE_MODE;

    bu_vls_init(&bindings);
    bu_vls_printf(&bindings, "bind %V <Motion> {%V mouse_trans %V %%x %%y}",
		  &gdvp->gdv_dmp->dm_pathName,
		  &go_current_gop->go_name,
		  &gdvp->gdv_name);
    Tcl_Eval(go_current_gop->go_interp, bu_vls_addr(&bindings));
    bu_vls_free(&bindings);

    return BRLCAD_OK;
}

static int
go_vmake(struct ged	*gedp,
	 int		argc,
	 const char	*argv[],
	 ged_func_ptr	func,
	 const char	*usage,
	 int		maxargs)
{
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc != 4) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    {
	int ret;
	char *av[8];
	char center[512];
	char scale[128];

	sprintf(center, "%lf %lf %lf",
		-gdvp->gdv_view->gv_center[MDX],
		-gdvp->gdv_view->gv_center[MDY],
		-gdvp->gdv_view->gv_center[MDZ]);
	sprintf(scale, "%lf", gdvp->gdv_view->gv_scale * 2.0);

	av[0] = (char *)argv[0];
	av[1] = "-o";
	av[2] = center;
	av[3] = "-s";
	av[4] = scale;
	av[5] = (char *)argv[2];
	av[6] = (char *)argv[3];
	av[7] = (char *)0;

	ret = ged_make(gedp, 7, (const char **)av);

	if (ret == BRLCAD_OK) {
	    av[0] = "draw";
	    av[1] = (char *)argv[2];
	    av[2] = (char *)0;
	    go_autoview_func(gedp, 2, (const char **)av, ged_draw, (char *)0, MAXARGS);
	}

	return ret;
    }
}

static int
go_vslew(struct ged	*gedp,
	 int		argc,
	 const char	*argv[],
	 ged_func_ptr	func,
	 const char	*usage,
	 int		maxargs)
{
    int ret;
    int ac;
    char *av[3];
    fastf_t x1, y1;
    fastf_t x2, y2;
    fastf_t sf;
    struct bu_vls slew_vec;
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc != 4) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    if (sscanf(argv[2], "%lf", &x1) != 1 ||
	sscanf(argv[3], "%lf", &y1) != 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    x2 = 0.5 * gdvp->gdv_dmp->dm_width;
    y2 = 0.5 * gdvp->gdv_dmp->dm_height;
    sf = 2.0 / gdvp->gdv_dmp->dm_width;

    bu_vls_init(&slew_vec);
    bu_vls_printf(&slew_vec, "%lf %lf", (x1 - x2) * sf, (y2 - y1) * sf);

    gedp->ged_gvp = gdvp->gdv_view;
    ac = 2;
    av[0] = (char *)argv[0];
    av[1] = bu_vls_addr(&slew_vec);
    av[2] = (char *)0;

    ret = ged_slew(gedp, ac, (const char **)av);
    bu_vls_free(&slew_vec);

    if (ret == BRLCAD_OK) {
	if (gdvp->gdv_view->gv_grid.ggs_snap) {
	    char *av[3];

	    gedp->ged_gvp = gdvp->gdv_view;
	    av[0] = "grid";
	    av[1] = "vsnap";
	    av[2] = '\0';
	    ged_grid(gedp, 2, (const char **)av);
	}
	go_refresh_view(gdvp);
    }

    return ret;
}

static int
go_zbuffer(struct ged	*gedp,
	   int		argc,
	   const char	*argv[],
	   ged_func_ptr	func,
	   const char	*usage,
	   int		maxargs)
{
    int zbuffer;
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (3 < argc) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    /* get zbuffer flag */
    if (argc == 2) {
	bu_vls_printf(&gedp->ged_result_str, "%d", gdvp->gdv_dmp->dm_zbuffer);
	return BRLCAD_OK;
    }

    /* set zbuffer flag */
    if (sscanf(argv[2], "%d", &zbuffer) != 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    if (zbuffer < 0)
	zbuffer = 0;
    else if (1 < zbuffer)
	zbuffer = 1;

    DM_SET_ZBUFFER(gdvp->gdv_dmp, zbuffer);
    go_refresh_view(gdvp);

    return BRLCAD_OK;
}

static int
go_zclip(struct ged	*gedp,
	   int		argc,
	   const char	*argv[],
	   ged_func_ptr	func,
	   const char	*usage,
	   int		maxargs)
{
    int zclip;
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (3 < argc) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    /* get zclip flag */
    if (argc == 2) {
	bu_vls_printf(&gedp->ged_result_str, "%d", gdvp->gdv_dmp->dm_zclip);
	return BRLCAD_OK;
    }

    /* set zclip flag */
    if (sscanf(argv[2], "%d", &zclip) != 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    if (zclip < 0)
	zclip = 0;
    else if (1 < zclip)
	zclip = 1;

    gdvp->gdv_dmp->dm_zclip = zclip;
    go_refresh_view(gdvp);

    return BRLCAD_OK;
}


/*************************** Wrapper Functions ***************************/
static int
go_autoview_func(struct ged	*gedp,
		int		argc,
		const char	*argv[],
		ged_func_ptr	func,
		const char	*usage,
		int		maxargs)
{
    int ret;
    char *av[2];
    int aflag = 0;

    av[0] = "who";
    av[1] = (char *)0;
    ret = ged_who(gedp, 1, (const char **)av);

    if (ret == BRLCAD_OK && strlen(bu_vls_addr(&gedp->ged_result_str)) == 0)
	aflag = 1;

    ret = (*func)(gedp, argc, (const char **)argv);

    if (ret == BRLCAD_OK) {
	if (aflag)
	    go_autoview_all_views(go_current_gop);
	else
	    go_refresh_all_views(go_current_gop);
    }

    return ret;
}

static int
go_more_args_func(struct ged	*gedp,
		  int		argc,
		  const char	*argv[],
		  ged_func_ptr	func,
		  const char	*usage,
		  int		maxargs)
{
    register int i;
    int ac;
    int ret;
    char *av[256];
    struct bu_vls callback_cmd;
    struct bu_vls temp;

    bu_vls_init(&callback_cmd);
    bu_vls_init(&temp);

    /* copy all args */
    ac = argc;
    for (i = 0; i < ac; ++i)
	av[i] = bu_strdup((char *)argv[i]);
    av[ac] = (char *)0;

    while ((ret = (*func)(gedp, ac, (const char **)av)) == BRLCAD_MORE_ARGS) {
	int n;
	int ac_more;
	const char **avmp;
	const char **av_more = NULL;

	if (0 < bu_vls_strlen(&go_current_gop->go_more_args_callback)) {
	    bu_vls_printf(&callback_cmd, "%s \"%s\"",
			  bu_vls_addr(&go_current_gop->go_more_args_callback),
			  bu_vls_addr(&gedp->ged_result_str));

	    if (Tcl_Eval(go_current_gop->go_interp, bu_vls_addr(&callback_cmd)) != TCL_OK) {
		bu_vls_printf(&gedp->ged_result_str, "%s", Tcl_GetStringResult(go_current_gop->go_interp));
		Tcl_ResetResult(go_current_gop->go_interp);
		return BRLCAD_ERROR;
	    }

	    bu_vls_printf(&temp, Tcl_GetStringResult(go_current_gop->go_interp));
	    Tcl_ResetResult(go_current_gop->go_interp);
	} else {
	    bu_log("\r%s", bu_vls_addr(&gedp->ged_result_str));
	    bu_vls_trunc(&temp, 0);
	    if (bu_vls_gets(&temp, stdin) < 0) {
		break;
	    }
	}
	
	if (Tcl_SplitList(go_current_gop->go_interp, bu_vls_addr(&temp), &ac_more, &av_more) != TCL_OK) {
	    continue;
	}

	if (ac_more < 1) {
	    /* space has still been allocated */
	    Tcl_Free((char *)av_more);

	    continue;
	}

	/* skip first element if empty */
	avmp = av_more;
	if (*avmp[0] == '\0') {
	    --ac_more;
	    ++avmp;
	}

	/* ignore last element if empty */
	if (*avmp[ac_more-1] == '\0')
	    --ac_more;

	/* copy additional args */
	for(i = 0; i < ac_more; ++i)
	    av[ac++] = bu_strdup(avmp[i]);
	av[ac+1] = (char *)0;

	Tcl_Free((char *)av_more);
    }

    bu_vls_free(&callback_cmd);
    bu_vls_free(&temp);

    for (i = 0; i < ac; ++i)
	bu_free((void *)av[i], "go_in");

    return ret;
}

static int
go_pass_through_func(struct ged		*gedp,
		     int		argc,
		     const char		*argv[],
		     ged_func_ptr	func,
		     const char		*usage,
		     int		maxargs)
{
    return (*func)(gedp, argc, argv);
}

static int
go_pass_through_and_refresh_func(struct ged	*gedp,
				 int		argc,
				 const char	*argv[],
				 ged_func_ptr	func,
				 const char	*usage,
				 int		maxargs)
{
    int ret;

    ret = (*func)(gedp, argc, argv);

    if (ret == BRLCAD_OK)
	go_refresh_all_views(go_current_gop);

    return ret;
}

static int
go_view_func(struct ged		*gedp,
	     int		argc,
	     const char		*argv[],
	     ged_func_ptr	func,
	     const char		*usage,
	     int		maxargs)
{
    register int i;
    int ret;
    int ac;
    char *av[MAXARGS];
    struct ged_dm_view *gdvp;

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (MAXARGS < maxargs || maxargs < argc) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    for (BU_LIST_FOR(gdvp, ged_dm_view, &go_current_gop->go_head_views.l)) {
	if (!strcmp(bu_vls_addr(&gdvp->gdv_name), argv[1]))
	    break;
    }

    if (BU_LIST_IS_HEAD(&gdvp->l, &go_current_gop->go_head_views.l)) {
	bu_vls_printf(&gedp->ged_result_str, "View not found - %s", argv[1]);
	return BRLCAD_ERROR;
    }

    /* Copy argv into av while skipping argv[1] (i.e. the view name) */
    gedp->ged_gvp = gdvp->gdv_view;
    gedp->ged_refresh_clientdata = (void *)gdvp;
    av[0] = (char *)argv[0];
    ac = argc-1;
    for (i = 2; i < argc; ++i)
	av[i-1] = (char *)argv[i];
    av[i-1] = (char *)0;
    ret = (*func)(gedp, ac, (const char **)av);

    /* Keep the view's perspective in sync with its corresponding display manager */
    gdvp->gdv_dmp->dm_perspective = gdvp->gdv_view->gv_perspective;

    if (ret == BRLCAD_OK)
	go_refresh_view(gdvp);

    return ret;
}


/*************************** Local Utility Functions ***************************/
static void
go_drawSolid(struct dm *dmp, struct solid *sp)
{
    if (sp->s_iflag == UP)
	DM_SET_FGCOLOR(dmp, 255, 255, 255, 0, sp->s_transparency);
    else
	DM_SET_FGCOLOR(dmp,
		       (unsigned char)sp->s_color[0],
		       (unsigned char)sp->s_color[1],
		       (unsigned char)sp->s_color[2], 0, sp->s_transparency);

    DM_DRAW_VLIST(dmp, (struct bn_vlist *)&sp->s_vlist);
}

/* Draw all solids in the list */
static int
go_drawSList(struct dm *dmp, struct bu_list *hsp)
{
    struct solid *sp;
    int linestyle = -1;

    if (dmp->dm_transparency) {
	/* First, draw opaque stuff */
	FOR_ALL_SOLIDS(sp, hsp) {
	    if (sp->s_transparency < 1.0)
		continue;

	    if (linestyle != sp->s_soldash) {
		linestyle = sp->s_soldash;
		DM_SET_LINE_ATTR(dmp, dmp->dm_lineWidth, linestyle);
	    }

	    go_drawSolid(dmp, sp);
	}

	/* disable write to depth buffer */
	DM_SET_DEPTH_MASK(dmp, 0);

	/* Second, draw transparent stuff */
	FOR_ALL_SOLIDS(sp, hsp) {
	    /* already drawn above */
	    if (sp->s_transparency == 1.0)
		continue;

	    if (linestyle != sp->s_soldash) {
		linestyle = sp->s_soldash;
		DM_SET_LINE_ATTR(dmp, dmp->dm_lineWidth, linestyle);
	    }

	    go_drawSolid(dmp, sp);
	}

	/* re-enable write to depth buffer */
	DM_SET_DEPTH_MASK(dmp, 1);
    } else {

	FOR_ALL_SOLIDS(sp, hsp) {
	    if (linestyle != sp->s_soldash) {
		linestyle = sp->s_soldash;
		DM_SET_LINE_ATTR(dmp, dmp->dm_lineWidth, linestyle);
	    }

	    go_drawSolid(dmp, sp);
	}
    }

    return BRLCAD_OK;
}

static void
go_fbs_callback(genptr_t clientData)
{
    struct ged_dm_view *gdvp = (struct ged_dm_view *)clientData;

    go_refresh_view(gdvp);
}

static int
go_close_fbs(struct ged_dm_view *gdvp)
{
    if (gdvp->gdv_fbs.fbs_fbp == FBIO_NULL)
	return TCL_OK;

    _fb_pgflush(gdvp->gdv_fbs.fbs_fbp);

    switch (gdvp->gdv_dmp->dm_type) {
#ifdef DM_X
	case DM_TYPE_X:
	    X24_close_existing(gdvp->gdv_fbs.fbs_fbp);
	    break;
#endif
#ifdef DM_TK
/* XXX TJM: not ready yet
   case DM_TYPE_TK:
   tk_close_existing(gdvp->gdv_fbs.fbs_fbp);
   break;
*/
#endif
#ifdef DM_OGL
	case DM_TYPE_OGL:
	    ogl_close_existing(gdvp->gdv_fbs.fbs_fbp);
	    break;
#endif
#ifdef DM_WGL
	case DM_TYPE_WGL:
	    wgl_close_existing(gdvp->gdv_fbs.fbs_fbp);
	    break;
#endif
    }

    /* free framebuffer memory */
    if (gdvp->gdv_fbs.fbs_fbp->if_pbase != PIXEL_NULL)
	free((void *)gdvp->gdv_fbs.fbs_fbp->if_pbase);
    free((void *)gdvp->gdv_fbs.fbs_fbp->if_name);
    free((void *)gdvp->gdv_fbs.fbs_fbp);
    gdvp->gdv_fbs.fbs_fbp = FBIO_NULL;

    return TCL_OK;
}

/*
 * Open/activate the display managers framebuffer.
 */
static int
go_open_fbs(struct ged_dm_view *gdvp, Tcl_Interp *interp)
{

    /* already open */
    if (gdvp->gdv_fbs.fbs_fbp != FBIO_NULL)
	return TCL_OK;

    /* don't use bu_calloc so we can fail slightly more gradefully */
    if ((gdvp->gdv_fbs.fbs_fbp = (FBIO *)calloc(sizeof(FBIO), 1)) == FBIO_NULL) {
	Tcl_Obj	*obj;

	obj = Tcl_GetObjResult(interp);
	if (Tcl_IsShared(obj))
	    obj = Tcl_DuplicateObj(obj);

	Tcl_AppendStringsToObj(obj, "openfb: failed to allocate framebuffer memory\n",
			       (char *)NULL);

	Tcl_SetObjResult(interp, obj);
	return TCL_ERROR;
    }

    switch (gdvp->gdv_dmp->dm_type) {
#ifdef DM_X
	case DM_TYPE_X:
	    *gdvp->gdv_fbs.fbs_fbp = X24_interface; /* struct copy */

	    gdvp->gdv_fbs.fbs_fbp->if_name = bu_malloc((unsigned)strlen("/dev/X")+1, "if_name");
	    bu_strlcpy(gdvp->gdv_fbs.fbs_fbp->if_name, "/dev/X", strlen("/dev/X")+1);

	    /* Mark OK by filling in magic number */
	    gdvp->gdv_fbs.fbs_fbp->if_magic = FB_MAGIC;

	    _X24_open_existing(gdvp->gdv_fbs.fbs_fbp,
			       ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->dpy,
			       ((struct x_vars *)gdvp->gdv_dmp->dm_vars.priv_vars)->pix,
			       ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->win,
			       ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->cmap,
			       ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->vip,
			       gdvp->gdv_dmp->dm_width,
			       gdvp->gdv_dmp->dm_height,
			       ((struct x_vars *)gdvp->gdv_dmp->dm_vars.priv_vars)->gc);
	    break;
#endif
#ifdef DM_TK
#if 0
/* XXX TJM implement _tk_open_existing */
	case DM_TYPE_TK:
	    *gdvp->gdv_fbs.fbs_fbp = tk_interface; /* struct copy */

	    gdvp->gdv_fbs.fbs_fbp->if_name = bu_malloc((unsigned)strlen("/dev/tk")+1, "if_name");
	    bu_strlcpy(gdvp->gdv_fbs.fbs_fbp->if_name, "/dev/tk", strlen("/dev/tk")+1);

	    /* Mark OK by filling in magic number */
	    gdvp->gdv_fbs.fbs_fbp->if_magic = FB_MAGIC;

	    _tk_open_existing(gdvp->gdv_fbs.fbs_fbp,
			      ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->dpy,
			      ((struct x_vars *)gdvp->gdv_dmp->dm_vars.priv_vars)->pix,
			      ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->win,
			      ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->cmap,
			      ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->vip,
			      gdvp->gdv_dmp->dm_width,
			      gdvp->gdv_dmp->dm_height,
			      ((struct x_vars *)gdvp->gdv_dmp->dm_vars.priv_vars)->gc);
	    break;
#endif
#endif

#ifdef DM_OGL
	case DM_TYPE_OGL:
	    *gdvp->gdv_fbs.fbs_fbp = ogl_interface; /* struct copy */

	    gdvp->gdv_fbs.fbs_fbp->if_name = bu_malloc((unsigned)strlen("/dev/ogl")+1, "if_name");
	    bu_strlcpy(gdvp->gdv_fbs.fbs_fbp->if_name, "/dev/ogl", strlen("/dev/ogl")+1);

	    /* Mark OK by filling in magic number */
	    gdvp->gdv_fbs.fbs_fbp->if_magic = FB_MAGIC;

	    _ogl_open_existing(gdvp->gdv_fbs.fbs_fbp,
			       ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->dpy,
			       ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->win,
			       ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->cmap,
			       ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->vip,
			       gdvp->gdv_dmp->dm_width,
			       gdvp->gdv_dmp->dm_height,
			       ((struct ogl_vars *)gdvp->gdv_dmp->dm_vars.priv_vars)->glxc,
			       ((struct ogl_vars *)gdvp->gdv_dmp->dm_vars.priv_vars)->mvars.doublebuffer,
			       0);
	    break;
#endif
#ifdef DM_WGL
	case DM_TYPE_WGL:
	    *gdvp->gdv_fbs.fbs_fbp = wgl_interface; /* struct copy */

	    gdvp->gdv_fbs.fbs_fbp->if_name = bu_malloc((unsigned)strlen("/dev/wgl")+1, "if_name");
	    bu_strlcpy(gdvp->gdv_fbs.fbs_fbp->if_name, "/dev/wgl", strlen("/dev/wgl")+1);

	    /* Mark OK by filling in magic number */
	    gdvp->gdv_fbs.fbs_fbp->if_magic = FB_MAGIC;

	    _wgl_open_existing(gdvp->gdv_fbs.fbs_fbp,
			       ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->dpy,
			       ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->win,
			       ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->cmap,
			       ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->vip,
			       ((struct dm_xvars *)gdvp->gdv_dmp->dm_vars.pub_vars)->hdc,
			       gdvp->gdv_dmp->dm_width,
			       gdvp->gdv_dmp->dm_height,
			       ((struct wgl_vars *)gdvp->gdv_dmp->dm_vars.priv_vars)->glxc,
			       ((struct wgl_vars *)gdvp->gdv_dmp->dm_vars.priv_vars)->mvars.doublebuffer,
			       0);
	    break;
#endif
    }

    return TCL_OK;
}

static void
go_draw(struct ged_dm_view *gdvp)
{
    mat_t new;
    matp_t mat;
    mat_t perspective_mat;

    mat = gdvp->gdv_view->gv_model2view;

    if (0 < gdvp->gdv_view->gv_perspective) {
#if 1
	point_t l, h;

	VSET(l, -1.0, -1.0, -1.0);
	VSET(h, 1.0, 1.0, 200.0);

	if (gdvp->gdv_view->gv_eye_pos[Z] == 1.0) {
	    /* This way works, with reasonable Z-clipping */
	    ged_persp_mat(perspective_mat, gdvp->gdv_view->gv_perspective,
			  (fastf_t)1.0f, (fastf_t)0.01f, (fastf_t)1.0e10f, (fastf_t)1.0f);
	} else {
	    /* This way does not have reasonable Z-clipping,
	     * but includes shear, for GDurf's testing.
	     */
	    ged_deering_persp_mat(perspective_mat, l, h, gdvp->gdv_view->gv_eye_pos);
	}
#else
	    /*
	     *  There are two strategies that could be used:
	     *  1)  Assume a standard head location w.r.t. the
	     *  screen, and fix the perspective angle.
	     *  2)  Based upon the perspective angle, compute
	     *  where the head should be to achieve that field of view.
	     *  Try strategy #2 for now.
	     */
	    fastf_t	to_eye_scr;	/* screen space dist to eye */
	    point_t	l, h, eye;

	    /* Determine where eye should be */
	    to_eye_scr = 1 / tan(gdvp->gdv_view->gv_perspective * bn_degtorad * 0.5);

	    VSET(l, -1.0, -1.0, -1.0);
	    VSET(h, 1.0, 1.0, 200.0);
	    VSET(eye, 0.0, 0.0, to_eye_scr);

	    /* Non-stereo case */
	    ged_mike_persp_mat(perspective_mat, gdvp->gdv_view->gv_eye_pos);
#endif

	bn_mat_mul(new, perspective_mat, mat);
	mat = new;
    }

    DM_LOADMATRIX(gdvp->gdv_dmp, mat, 0);
    go_drawSList(gdvp->gdv_dmp, &gdvp->gdv_gop->go_gedp->ged_gdp->gd_headSolid);
}

static void
go_draw_faceplate(struct ged_dm_view *gdvp)
{
    /* Draw center dot */
    DM_SET_FGCOLOR(gdvp->gdv_dmp,
		   255, 255, 0, 1, 1.0);
    DM_DRAW_POINT_2D(gdvp->gdv_dmp, 0.0, 0.0);

    /*XXX Whether or not and how things are drawn needs to be application settable.
     *    For the moment, things are hardwired.
     */
    /* Draw view axes */
    {
	point_t origin = {0.0, 0.0, 0.0};
	int axes_color[3] = {100, 100, 255};
	int axes_label_color[3] = {255, 255, 0};

	dmo_drawAxes_cmd(gdvp->gdv_dmp,
			 gdvp->gdv_view->gv_size,
			 gdvp->gdv_view->gv_rotation,
			 origin,
			 0.25,
			 axes_color,
			 axes_label_color,
			 0, /* line width */
			 0, /* positive direction only */
			 0, /* three colors (i.e. X-red, Y-green, Z-blue) */
			 0, /* no ticks */
			 0, /* tick len */
			 0, /* major tick len */
			 0, /* tick interval */
			 0, /* ticks per major */
			 NULL, /* tick color */
			 NULL, /* major tick color */
			 0 /* tick threshold */);
    }

    /* Draw the angle distance cursor */
    if (gdvp->gdv_view->gv_adc.gas_draw)
	dm_draw_adc(gdvp->gdv_dmp, gdvp->gdv_view);

    /* Draw grid */
    if (gdvp->gdv_view->gv_grid.ggs_draw)
	dm_draw_grid(gdvp->gdv_dmp, &gdvp->gdv_view->gv_grid, gdvp->gdv_view, gdvp->gdv_gop->go_gedp->ged_wdbp->dbip->dbi_base2local);

    /* Draw rect */
    if (gdvp->gdv_view->gv_rect.grs_draw)
	dm_draw_rect(gdvp->gdv_dmp, &gdvp->gdv_view->gv_rect, gdvp->gdv_view);
}

static void
go_refresh_view(struct ged_dm_view *gdvp)
{
    DM_DRAW_BEGIN(gdvp->gdv_dmp);

    if (gdvp->gdv_fbs.fbs_mode == GED_OBJ_FB_MODE_OVERLAY) {
	if (gdvp->gdv_view->gv_rect.grs_draw) {
	    go_draw(gdvp);

	    /* Restore to non-rotated, full brightness */
	    DM_NORMAL(gdvp->gdv_dmp);

	    go_draw_faceplate(gdvp);

	    fb_refresh(gdvp->gdv_fbs.fbs_fbp,
		       gdvp->gdv_view->gv_rect.grs_pos[X], gdvp->gdv_view->gv_rect.grs_pos[Y],
		       gdvp->gdv_view->gv_rect.grs_dim[X], gdvp->gdv_view->gv_rect.grs_dim[Y]);
	    dm_draw_rect(gdvp->gdv_dmp, &gdvp->gdv_view->gv_rect, gdvp->gdv_view);
	} else
	    fb_refresh(gdvp->gdv_fbs.fbs_fbp, 0, 0,
		       gdvp->gdv_dmp->dm_width, gdvp->gdv_dmp->dm_height);

	DM_DRAW_END(gdvp->gdv_dmp);
	return;
    } else if (gdvp->gdv_fbs.fbs_mode == GED_OBJ_FB_MODE_INTERLAY) {
	go_draw(gdvp);

	if (gdvp->gdv_view->gv_rect.grs_draw) {
	    go_draw(gdvp);
	    fb_refresh(gdvp->gdv_fbs.fbs_fbp,
		       gdvp->gdv_view->gv_rect.grs_pos[X], gdvp->gdv_view->gv_rect.grs_pos[Y],
		       gdvp->gdv_view->gv_rect.grs_dim[X], gdvp->gdv_view->gv_rect.grs_dim[Y]);
	} else
	    fb_refresh(gdvp->gdv_fbs.fbs_fbp, 0, 0,
		       gdvp->gdv_dmp->dm_width, gdvp->gdv_dmp->dm_height);
    } else {
	if (gdvp->gdv_fbs.fbs_mode == GED_OBJ_FB_MODE_UNDERLAY) {
	    if (gdvp->gdv_view->gv_rect.grs_draw) {
		fb_refresh(gdvp->gdv_fbs.fbs_fbp,
			   gdvp->gdv_view->gv_rect.grs_pos[X], gdvp->gdv_view->gv_rect.grs_pos[Y],
			   gdvp->gdv_view->gv_rect.grs_dim[X], gdvp->gdv_view->gv_rect.grs_dim[Y]);
	    } else
		fb_refresh(gdvp->gdv_fbs.fbs_fbp, 0, 0,
			   gdvp->gdv_dmp->dm_width, gdvp->gdv_dmp->dm_height);
	}

	go_draw(gdvp);
    }

    /* Restore to non-rotated, full brightness */
    DM_NORMAL(gdvp->gdv_dmp);
#if 1
    go_draw_faceplate(gdvp);
#else
    /* Draw center dot */
    DM_SET_FGCOLOR(gdvp->gdv_dmp,
		   255, 255, 0, 1, 1.0);
    DM_DRAW_POINT_2D(gdvp->gdv_dmp, 0.0, 0.0);

    /*XXX Whether or not and how things are drawn needs to be application settable.
     *    For the moment, things are hardwired.
     */
    /* Draw view axes */
    {
	point_t origin = {0.0, 0.0, 0.0};
	int axes_color[3] = {100, 100, 255};
	int axes_label_color[3] = {255, 255, 0};

	dmo_drawAxes_cmd(gdvp->gdv_dmp,
			 gdvp->gdv_view->gv_size,
			 gdvp->gdv_view->gv_rotation,
			 origin,
			 0.25,
			 axes_color,
			 axes_label_color,
			 0, /* line width */
			 0, /* positive direction only */
			 0, /* three colors (i.e. X-red, Y-green, Z-blue) */
			 0, /* no ticks */
			 0, /* tick len */
			 0, /* major tick len */
			 0, /* tick interval */
			 0, /* ticks per major */
			 NULL, /* tick color */
			 NULL, /* major tick color */
			 0 /* tick threshold */);
    }

    /* Draw the angle distance cursor */
    if (gdvp->gdv_view->gv_adc.gas_draw)
	dm_draw_adc(gdvp->gdv_dmp, gdvp->gdv_view);

    /* Draw grid */
    if (gdvp->gdv_view->gv_grid.ggs_draw)
	dm_draw_grid(gdvp->gdv_dmp, &gdvp->gdv_view->gv_grid, gdvp->gdv_view, gdvp->gdv_gop->go_gedp->ged_wdbp->dbip->dbi_base2local);

    /* Draw rect */
    if (gdvp->gdv_view->gv_rect.grs_draw)
	dm_draw_rect(gdvp->gdv_dmp, &gdvp->gdv_view->gv_rect, gdvp->gdv_view);
#endif

    DM_DRAW_END(gdvp->gdv_dmp);
}

static void
go_refresh_handler(void *clientdata)
{
    struct ged_dm_view *gdvp = (struct ged_dm_view *)clientdata;

    go_refresh_view(gdvp);
}

static void
go_refresh_all_views(struct ged_obj *gop)
{
    struct ged_dm_view *gdvp;

    for (BU_LIST_FOR(gdvp, ged_dm_view, &gop->go_head_views.l)) {
	go_refresh_view(gdvp);
    }
}

static void
go_autoview_view(struct ged_dm_view *gdvp)
{
    int ret;
    char *av[2];

    gdvp->gdv_gop->go_gedp->ged_gvp = gdvp->gdv_view;
    av[0] = "autoview";
    av[1] = (char *)0;
    ret = ged_autoview(gdvp->gdv_gop->go_gedp, 1, (const char **)av);

    if (ret == BRLCAD_OK)
	go_refresh_view(gdvp);
}

static void
go_autoview_all_views(struct ged_obj *gop)
{
    struct ged_dm_view *gdvp;

    for (BU_LIST_FOR(gdvp, ged_dm_view, &gop->go_head_views.l)) {
	go_autoview_view(gdvp);
    }
}

static void
go_output_handler(struct ged *gedp, char *line)
{
    if (gedp->ged_output_script != (char *)0) {
	struct bu_vls vls;

	bu_vls_init(&vls);
	bu_vls_printf(&vls, "%s \"%s\"", gedp->ged_output_script, line);
	Tcl_Eval(go_current_gop->go_interp, bu_vls_addr(&vls));
	bu_vls_free(&vls);
    } else {
	struct bu_vls vls;

	bu_vls_init(&vls);
	bu_vls_printf(&vls, "puts \"%s\"", line);
	Tcl_Eval(go_current_gop->go_interp, bu_vls_addr(&vls));
	bu_vls_free(&vls);
    }
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * indent-tabs-mode: t
 * c-file-style: "stroustrup"
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
