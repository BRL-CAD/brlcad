blob
data 46117
The Hacker's Guide to BRL-CAD
=============================

Please read this document if you are contributing to BRL-CAD.

BRL-CAD is a relatively large package with a long history and
heritage.  Many people have contributed over the years, and there
continues to be room for involvement and improvement in just about
every aspect of the package.  As such, contributions to BRL-CAD are
very welcome and appreciated.

For the sake of code consistency, project coherency, and the long-term
evolution of BRL-CAD, there are guidelines for getting involved.
Contributors are strongly encouraged to follow these guidelines and to
likewise ensure that other contributors similarly follow the
guidelines.  There are simply too many religious wars over what
usually come down to personal preferences and familiarity that are
distractions from making productive progress.

These guidelines apply to all developers, documentation writers,
testers, porters, graphic designers, web designers, and anyone else
that is directly contributing to BRL-CAD.  As all contributors are
also directly assisting in the development of BRL-CAD as a package,
this guide often simply refers to contributors as developers.

Although BRL-CAD was originally developed and supported primarily by
the U.S. Army Research Laboratory and its affiliates, it is now a true
Open Source project with contributions coming in to the project from
around the world.  The U.S. Army Research Laboratory continues to
support and contribute to BRL-CAD, but now the project is primarily
driven by a team of core developers and the BRL-CAD open source
community.  Contact the BRL-CAD developers for more information.


TABLE OF CONTENTS
-----------------
  Introduction
  Table of Contents
  Getting Started
  How to Contribute
  Source Code Languages
  Filesystem Organization
  Coding Style & Standards
  Documentation
  Testing
  Patch Submission Guidelines
  Bugs & Unexpected Behavior
  Commit Access
  Contributor Responsibilities
  Version Numbers & Compatibility
  Naming a Source Release
  Naming a Binary Release
  Making a Release
  Getting Help


GETTING STARTED
---------------

As there are many ways to get started with BRL-CAD, one of the most
important steps for new contributors to do is get involved in the
discussions and communicate with the BRL-CAD developers.  There are
mailing lists, on-line forums, and an IRC channel dedicated to BRL-CAD
development and project communication.  All contributors are
encouraged to participate in any of the available communication
channels:

* Internet Relay Chat

  The primary and generally preferred mechanism for interactive
  developer discussions is via Internet Relay Chat (IRC).  Several of
  the core developers and core contributors of BRL-CAD hang out in
  #brlcad on the Freenode network.  With most any IRC client, you
  should be able to join #brlcad on irc.freenode.net, port 6667.  See
  http://freenode.net and http://irchelp.org for more information

* E-mail Mailing Lists

  There are several mailing lists available for interaction, e.g. the
  http://sourceforge.net/mail/?group_id=105292 "brlcad-devel" mailing
  list.  More involved contributors may also be interested in joining
  the "brlcad-commits" and "brlcad-tracker" mailing lists.

* On-line Forums

  Discussion forums are available on the project site at
  http://sourceforge.net/forum/?group_id=105292 for both developers
  and users.  Of particular interest to developers is, of course, the
  "Developers" forum where all contributors are incouraged to
  participate.


HOW TO CONTRIBUTE
-----------------

BRL-CAD's open source management structure is best described as a
meritocracy.  Roughly stated, this basically means that the power to
make decisions lies directly with the individuals that have ability or
merit with respect to BRL-CAD.  An individual's ability and merit is
basically a function of their past and present contributions to the
project.  Those who constructively contribute, frequently interact,
and remain highly involved have more say than those who do not.

As BRL-CAD is comprised of a rather large code base with extensive
existing documentation and web resources, there are many many places
where one may begin to get involved with the project.  More than
likely, there is some new goal you already have in mind, be it a new
geometry converter, support for a different image type, a fix to some
bug, an update to existing documentation, a new web page, or something
else entirely.  Regardless of the goal or contribution, it is highly
encouraged that you interact with the existing developers and discuss
your intentions.  This is particularly important if you would like to
see your modification added to BRL-CAD and you do not yet have
contributor access.  When in doubt, working on resolving existing
bugs, improving performance, documentation, and writing tests are
perfect places to begin.

For many, it can be overwhelming at just how much there is.  To a
certain extent, you will need to familiarize yourself with the basic
existing infrastructure before significantly changing or adding a
completely new feature.  There is documentation available in the
source distribution's doc/ directory, throughout the source hierarchy
in manpages, on the website, and potentially in the documentation
tracker at http://sourceforge.net/docman/?group_id=105292 covering a
wide variety of topics.  Consult the existing documentation, sources,
and developers to become more familiar with what already exists.

See the PATCH SUBMISSION GUIDELINES section below for details on
preparing and providing contributions.


SYSTEM ARCHITECTURE
-------------------

At a glance, BRL-CAD consists of about a dozen libraries and over 400
executable binaries.  The package has been designed from the ground up
adopting a UNIX methodology, providing many tools that may often be
used in harmony in order to complete a task at hand.  These tools
include geometry and image converters, image and signal processing
tools, various raytrace applications, geometry manipulators, and more.

One of the firm design intents of the architecture is to be as
cross-platform and portable as is realistically and reasonably
possible.  As such, BRL-CAD maintains support for many legacy systems
and devices provided that maintaining such support is not a
significant burden on developer resources.  Whether it is a burden or
not is of course a potentially subjective matter.  As a general
guideline, there needs to be a strong compelling motivation to
actually remove any functionality.  Code posterity, readability, and
complexity are generally not sufficient reasons.  This applies to
sections of code that are no longer being used, might not compile, or
might even have major issues (bugs).  This applies to bundled 3rd
party libraries, compilation environments, compiler support, and
language constructs.

In correlation with a long-standing heritage of support is a design
intent to maintain verifiable repeatable results throughout the
package, in particular in the raytrace library.  BRL-CAD includes
scripts that will compare a given compilation against the performance
of one of the very first systems to support BRL-CAD: a VAX 11/780
running BSD.  As the BRL-CAD Benchmark is a metric of the raytrace
application itself, the performance results are a very useful metric
for weighing the relative computational strength of a given platform.
The mathematically intensive computations exercise the processing
unit, system memory, various levels of data and instruction cache, the
operating system, and compiler optimization capabilities.

To support what has evolved to be a relatively large software package,
there are a variety of support libraries and interfaces that have
aided to encapsulate and simplify application programming.  At the
heart of BRL-CAD is a Constructive Solid Geometry (CSG) raytrace
library.  BRL-CAD has its own database format for storing geometry to
disk which includes both binary and text file format representations.
The raytrace library utilizes a suite of other libraries that provide
other basic application functionality.

LIBRARIES
---------

librt: The BRL-CAD Ray-Trace library is a performance and
accuracy-oriented ray intersection, geometric analysis, and geometry
representation library that supports a wide variety of geometric
forms.  Geometry can be grouped into combinations and regions using
CSG boolean operations.
	Depends on: libbn libbu libtcl libregex libm (openNURBS)

libbu: The BRL-CAD Utility library contains a wide variety of routines
for memory allocation, threading, string handling, argument support,
linked lists, and more.
	Depends on: libtcl (threading) (malloc)

libbn: The BRL-CAD Numerics library provides many floating-point math
manipulation routines for vector and matrix math, a polynomial
equation solver, noise functions, random number generators, complex
number support, and more as well.
	Depends on: libbu libtcl libm

libcursor: The cursor library is a lightweight cursor manipulation
library similar to curses but with less overhead.
	Depends on: termlib

libdm: The display manager library contains the logic for generalizing
a drawable context.  This includes the ability to output
drawing/plotting instructions to a variety of devices such as X11,
Postscript, OpenGL, plot files, textfiles, and more.  There is
generally structured order to data going to a display manager (like
the wireframe in the geometry editor).
	Depends on: librt libbn libbu libtcl libpng (X11)

libfb: The framebuffer library is an interface for managing a graphics
context that consists of pixel data.  This library supports multiple
devices directly, providing a generic device-independent method of
using a frame buffer or files containing frame buffer images.
	Depends on: libbu libpkg libtcl (X11) (OpenGL)

libfft: The Fast-Fourier Transform library is a signal processing
library for performing FFTs or inverse FFTs efficiently.
	Depends on: libm

libmultispectral: The multispectral optics library is a separate
compilation mode of the optics library where support for additional
bands of energy are added.  By providing a defined spectrum of energy,
the raytrace library will produce different signal analyses for a
given set of geometry.
	Depends on: librt libbn libbu libtcl

liboptical: The optical library is the basis for BRL-CAD's shaders.
This includes shaders such as the Phong and Cook-Torrence lighting
models, as well as various visual effects such as texturing, marble,
wood graining, air, gravel, grass, clouds, fire, and more.
	Depends on: librt libbn libbu libtcl

liborle: The "old" run-length encoding library that will decode and
encode University of Utah Raster Toolkit format Run-Length Encoded
data.
	Depends on nothing

libpkg: The "Package" library is a network communications library that
supports multiplexing and demultiplexing synchronous and asynchronous
messages across stream connections.  The library supports a
client-server communication model.
	Depends on: libbu

librtserver: The ray-trace server library is a thin interface over
librt that simplifies the process of applying individual ray
intersection tests against a given set of geometry.  The library
supports communication with a BRL-CAD geometry repository and
multithreaded ray dispatch.
	Depends on: librt libbn libbu libtcl
	Includes dependent libraries as part of this libaray

libsysv: The System 5 compatibility library exists to support legacy
systems that lack functionality required by BRL-CAD.  This library is
deprecated and should generally not be used for new development.
	Depends on nothing

libtclcad: The Tcl-CAD library is a thin interface that assists in the
binding of an image to a Tk graphics context.
	Depends on: libbn libbu libfb libtcl libtk

libtermio: The terminal I/O library is a TTY control library for
managing a terminal interface.
	Depends on nothing

libwdb: The "write database" library provides a simple interface for
the generation of BRL-CAD geometry files supporting a majority of the
various primitives available as well as combination/region support.
The library is a write-only interface (librt is necessary to read &
write) and is useful for procedural geometry.
	Depends on: librt libbn libbu

libbrlcad: This "conglomerate" library provides the core geometry
engine facilities in BRL-CAD by combining the numerics, ray-tracing,
and geometry database processing libraries into one library.
	Depends on: libwdb librt libbn libbu
	Includes dependent libraries as part of this libaray


FILESYSTEM ORGANIZATION
-----------------------

Included below is a sample (not comprehensive) of how some of the
sources are organized in the source distribution.  For the directories
under src/, see the src/README file for more details on subdirectories
not covered here.

bench/
	The BRL-CAD Benchmark Suite
db/
	Example geometry databases
doc/
	Documentation
include/
	Public headers
m4/
	Autoconf compilation resource files
misc/
	Anything not categorized or is sufficently en masse
pix/
	Sample raytrace images, includes benchmark reference images
regress/
	Scripts and resources for regression testing
sh/
	Utility scripts, used primarily by the build system
src/
	Sources, see src/README for more details
src/adrt
	Advanced Distributed RayTracer
src/conv/
	Various geometry converters
src/conv/iges/
	IGES converter
src/fb/
	Tools for displaying data to or reading from framebuffers
src/fbserv/
	Framebuffer server
src/java/
	Java geometry server interface to librt
src/libbn/
	BRL-CAD numerics library
src/libbu
	BRL-CAD utility library
src/libfb/
	BRL-CAD Framebuffer library
src/libfft/
	Fast Fourier transform library
src/libged/
	Geometry editing library
src/libpkg/
	Network "package" library
src/librt/
	BRL-CAD Ray-trace library
src/libwdb/
	Write database library
src/mged/
	Multi-device geometry editor
src/other/
	External frameworks (Tcl/Tk, libpng, zlib, etc)
src/proc-db/
	Procedural geometry tools, create models programmatically
src/remrt/
	Distributed raytrace support
src/rt/
	Raytracers, various
src/util/
	Various image processing utilities


SOURCE CODE LANGUAGES
---------------------

The vast majority of BRL-CAD is written in ANSI C with the intent to
be strictly conformant to the C standard.  A majority of the MGED
geometry editor is written in a combination of C, Tcl/Tk, and Incr
Tcl/Tk.  The BRL-CAD Benchmark, build system, and utility scripts are
written in what should be POSIX-compliant Bourne Shell Script.  An
initial implementation of a BRL-CAD Geometry Server is written in PHP.

With release 7.0, BRL-CAD has moved forward and worked toward making
all of BRL-CAD C code conform strictly with the ANSI/ISO standard for
C language compilation (ISO/IEC 9899:1990, i.e. c89).  Support for
older compilers and older K&R-based system facilities is being
migrated to build system declarations, preprocessor defines, or being
removed outright.  It's okay to make modifications that assume
compiler conformance with the ANSI C standard (c89).

There currently no C++ interface to the core BRL-CAD libraries.  There
are a few tools and enhancements to libraries that are implemented in
C++ (the new BREP object type in librt, for example), but there are
presently no C++ bindings available beyond experimental developments.
While C++ as an implementation language of new tools and new library
interfaces is not prohibitied, the mixing of C++ semantics and C++
code (including simple // style comments) in the existing C files is
not allowed.  As new interfaces are developed, new contributors become
involved, and C++ code integration becomes more prevalent, the
contributor guidelines will become reinforced with more details.


CODING STYLE & STANDARDS
------------------------

For anyone who plans on contributing code, the following conventions
should be followed.  Contributions that do not conform are likely to
be ridiculed and rejected until they do.  ;-)

Violations of these rules in the existing code are not excuses to
follow suit.  If code is seen that doesn't conform, it may and should
be fixed.

Code Organization:

Code that is potentially useful to another application, or that may be
abstracted in such a way that it is useful to other applications,
should be put in a library and not in application directories.

C files use the .c extension.  Header files use the .h extension.  C++
files use the .cpp extension.  PHP files use the .php extension.
Tcl/Tk files use the .tcl/.tk extensions.  POSIX Bourne-style shell
scripts use the .sh extension.

Source files go into the src/ directory on the top level, into a
corresponding directory for the category of binary or library that it
belongs to.  Documentation files go into the doc/ directory on the top
level, with the exception of manual pages that should be colocated
with any corresponding source files.

Header files private to a library go into that library's directory.
Public header files go into the include/ directory on the top level.
Public header files should not include any headers that are private.
Headers should include any other headers that they require for correct
parsing (this is an on-going clean-up effort).  Public header files
should not include the common header.

Headers should be included in a particular order.  That order is
generally as follows:

  - any single "interface" header [optional]
  - the common header (unless the interface header includes it)
  - system headers
  - public headers
  - private headers

Applications may optionally provide an interface header that defines
common structures applicable to most or all files being compiled for
that application.  That interface header will generally be the first
file to be included, as it usually includes the common header and
system headers.  The common header should always be included before
any system header.  Standard C system headers should be included
before library system headers.  Headers should be written to be
self-contained, not requiring other headers to be necessarily included
before they may be used.  If another header is necessary for a header
to function correctly, it should include it.

Language Compliance:

Features of C that conform to the ISO/IEC 9899-1990 C standard (C90)
are generally the baseline for strict language conformance.  As
BRL-CAD used to be K&R syntax conformant, there remains on-going
effort to ensure a full conversion to a standards compliant ISO C
implementation.

Code Conventions:

Globals variables, global structures, and other public data containers
are highly discouraged - globals are often the easy way around a hard
coding problem but more often complicate refactoring and restructuring
in the future.  Try to find another solution unless there is a very
compelling and good reason for their use.

Functions should always specify a return type, including functions
that return int or void.  ANSI C prototypes should be used to declare
functions, not K&R function prototypes.

There are several functions whose functionality are either wrapped or
implemented in a cross-platform manner by libbu.  This includes
functions related to memory allocation, command option parsing,
logging routines, and more.  The following functions and global
variables should be utilized instead of the standard C facility:

  bu_malloc() instead of malloc()
  bu_fgets() instead of fgets()
  bu_free() instead of free()
  bu_log() instead of printf()
  bu_bomb() instead of abort()
  bu_exit() instead of printf()+exit()
  bu_dirname() instead of dirname()
  bu_getopt() instead of getopt()
  bu_opterr instead of opterr
  bu_optind instead of optind
  bu_optopt instead of optopt
  bu_optarg instead of optarg
  bu_strlcat instead of strcat(), strncat(), and strlcat()
  bu_strlcpy instead of strcpy(), strncpy(), and strlcpy()

Similarly, ANSI C functions are preferred over the BSD and POSIX
interfaces.  The following functions should be used:

  memset instead of bzero
  memcpy instead of bcopy

The code should strive to achieve conformance with the GNU coding
standard with a few exceptions.  One such exception is NOT utilizing
the GNU indentation style, but instead utilizing the BSD KNF
indentation style which is basically the K&R indentation style with 4
character indents.  The following examples should be strictly adhered
to, if only for the sake of being consistent.

1) Whitespace

Indents are 4 characters, tabs are 8 characters.  There should be an
emacs and vi local variables block setting at the end of each file to
adopt, enforce, and otherwise remind this convention.  The following
lines should be in all C source and header files at the end of the
file:

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * indent-tabs-mode: t
 * c-file-style: "stroustrup"
 * End:
 * ex: shiftwidth=4 tabstop=8
 */

A similar block can be used on source and script files in other
languages (such as Tcl, Shell, Perl, etc).  See the local variable
footer script in sh/footer.sh to automatically set/update files.

Space around operators and between multiple statements.
  a = (b + c) * d;                  /* ok */
  b = 2; c = 3;                     /* ok */

No space immediately inside parentheses.
  while (1) { ...                   /* ok */
  for (i = 0; i < max; i++) { ...   /* ok */
  while ( max ) { ...               /* discouraged */

Commas and semicolons are followed by whitespace.
  int main(int argc, char *argv[]); /* ok */
  for (i = 0; i < max; i++) { ...   /* ok */

Native language statements (if, while, for, switch, and return)
have a separating space, functions do not.
  int my_function(int i) { ...      /* ok, no space */
  while (argc--) ...                /* ok, has space */
  if( var == val )                  /* discouraged */

2) Braces

BRL-CAD uses the "The One True Brace Style" from BSD KNF and K&R.
Opening braces should be on the same line as their statement, closing
braces should line up with that same statement.  Functions, however,
are treated special and place the opening brace on a separate line.
See http://en.wikipedia.org/wiki/Indent_style for details.

  int some_function(char *j)
  {
      for (i = 0; i < 100; i++) {
          if (i % 10 == 0) {
              j += 1;
          } else {
              j -= 1;
          }
      }
  }

3) Names

Prefer mixed-case names over underscore-separated ones. (this one is
less important, as there are vast quantities of both in the code)
Variable names should start with a lowercase letter.
  double localVariable; /* ok */
  double LocalVariable; /* bad (looks like class or constructor) */
  double _localVar;     /* bad (looks like member variable)      */

Variables are not to be "decorated" to show their type (i.e. do not
use Hungarian notation or variations thereof) with a slight exception
for pointers on occasion.  The name should use a concise, meaningful
name that is not cryptic (typing a descriptive name is preferred over
someone else hunting down what was meant).
  char *name;    /* ok  */
  char *pName;   /* discouraged for new code, but okay */
  char *fooPtr;  /* bad */
  char *lpszFoo; /* bad */

Constants should be all upper-case with word boundaries optionally
separated by underscores.
  static const int MAX_READ = 2;  /* ok  */
  static const int arraySize = 8; /* bad */

4) Debugging

Compilation preprocessor defines should never change the size of
structures.
  struct Foo {
  #ifdef DEBUG_CODE  // bad
    int _magic;
  #endif
  };

5) Comments

"//" style comments are not allowed in C source files.  This is mainly
to cause fewer compilation and portability issues when porting to
older systems where such support is frequently not available in the C
compiler.  Comment blocks should utilize an asterisk at the beginning
of each new line.

/* This is a
 * comment block.
 */

GNU Build System:

The GNU Autotools build system (e.g. autoconf defines) should be used
extensively to test for availability of system services such as
standard header files, available libraries, and data types.  No
assumptions should be made regarding the availability of any
particular header, function, datatype, or other resource.  After
running the configure script, there will be an autogenerated
include/brlcad_config.h file that contains many preprocessor
directives and type declarations that may be used where needed.

Generic platform checks (e.g. #ifdef unix, #ifdef _WIN32) are highly
discouraged and should generally not be used.  Replace those checks
with tests for the actual facility being utilized instead.

The Windows platform utilizes its own manually-generated configure
results header (include/config_win.h) that has to be manually updated
if new tests are added to the configure.ac template.

Only the BRL-CAD sources should include and utilize the common.h
header.  They should not include brlcad_config.h or config_win.h
directly.  If used, the common.h header should be listed before any
system headers.


DOCUMENTATION
-------------

BRL-CAD has extensive documentation in various formats and presently
maintained in various locations.  It is an on-going desire and goal of
the project to have all documentation located along with the source
code in our Subversion (SVN) repository.

In line with that goal and where beneficial, a large portion of the
tutorial documentation is being converted to the Docbook XML format.
Having the tutorial documentation in the Docbook XML format allows for
easier maintenances, better export conversion support, and
representation in a textual format that may be revision controlled and
tracked.

Documenting Source Code:

The source code should always be reasonably documented, this almost
goes without saying for any body of code that is to maintain some
longevity.  Determining just how much documentation is sufficient and
how much is too much is generally resolved over time, but it should
generally be looked at from the perspective of "If I look at this code
in a couple years from now, what would help me remember or understand
it better?"  and add documentation accordingly.

All public library functions and most private or application functions
should be appropriately documented using Doxygen/Javadoc style
comments.  Without getting into the advanced details, this minimally
means that you need to add an additional asterisk to a comment that
precedes your functions:

/** Computes the answer to the meaning of life, the universe, and
 *  everything.
 */
int the_answer() { return 42; };


TESTING
-------

The need for a more formal testing plan has become more of a pressing
issue as the size of BRL-CAD continues to grow.  As such, more
importance on various forms of testing is becoming necessary.

While specific plans for unit and black box testing are not yet
finalized, the Corredor Automation Test Suite will be used to assist
in performing cross-platform build tests, regression tests, and
various integration and operability tests.

A debug build may be specified via:

./configure --enable-debug

A profile build may be specified via:

./configure --enable-profiling

Verbose compilation warnings may be enabled:

./configure --enable-warnings

To perform a run of the benchmark suite to validate raytrace behavior:

make benchmark

To perform a run of the test suite:

make test


PATCH SUBMISSION GUIDELINES
---------------------------

To contribute to BRL-CAD, begin by submitting modifications to the
patches section at http://sf.net/projects/brlcad/.  Patches in the
unified diff format (diff -u) are generally preferred when modifying
existing source or other text files.  Otherwise, contributors are
welcome to submit their changes in full to the patches tracker as
compressed file attachments.

All text patches should be submitted in the unified diff format where
it's feasible to create one either using SVN or using the unmodified
original file.  This is generally the "-u" option to diff, and is also
supported by the SVN diff command:

svn diff > mychanges.patch

Where possible, patch files should be generated against the latest
sources available to make it easier to review and apply the changes.
If a modification involves the addition or removal of files, those
files can be provided separately with instructions on where they
belong (or what should be removed).  If SVN cannot be used, please
provide the complete release and build number of the files you worked
with.

ANY MODIFICATIONS THAT ARE PROVIDED MUST NOT MODIFY OR CONFLICT WITH
THE EXISTING "COPYING" FILE DISTRIBUTION REQUIREMENTS.  This means
that most modifications must be LGPL-compatible.  Contributors are
asked to only provide patches that may legally be incorporated into
BRL-CAD under the existing distribution provisions described in the
COPYING file.

Patches that are difficult to apply are difficult to accept.


BUGS & UNEXPECTED BEHAVIOR
--------------------------

When a bug or unexpected behavior is encountered that cannot be
quickly fixed, it minimally needs to be documented.  If you are
already a BRL-CAD contributor, this means either making a comment in
the BUGS file or by making a formal report to the SourceForge bug
tracker at:

http://sourceforge.net/tracker/?atid=640802&group_id=105292&func=browse

If the bug is complicated, will require significant discussion or
collaboration, cannot be fixed any time soon, or if you do not have
commit access, the issue should be reported to the SourceForge bug
tracker.  The issues listed in BUGS are not necessarily listed in bug
tracker, and vice-versa.  The BUGS file is merely maintained as a
convenience notepad of long and short term issues for the developers
only.


COMMIT ACCESS
-------------

BRL-CAD has a STABLE branch in SVN that should always compile and run
with expected behavior on all supported platforms.  Contrary to
STABLE, the SVN trunk is generally expected to compile but more
flexibility is allowed for resolution of cross-platform build issues
and on-going development.

Commit access is evaluated on a person-to-person basis at the
discretion of existing contributors, but generally readily granted so
long as there is an existing developer with commit access willing to
mentor the new developer.  If you would like to have commit access,
there is usually no need to ask -- they will ask you.  Getting
involved with the other contributors and making patches will generally
result in automatic consideration for commit access.  If you have to
ask for it, you probably won't get it.

Those with commit access have a responsibility to ensure that other
developers are following the guidelines that have been described in
this developer's guide within reasonable expectations.  A basic rule
of thumb is: don't break anything.

While the testing process will strive to ensure consistent behavior as
changes are made, the responsibility still remains with the individual
contributors to ensure that everything still compiles and runs as it
should.  At any given time, BRL-CAD should compile on all of the
primary platforms and (minimally) pass the BRL-CAD Benchmark
successfully.  If changes are made that are not exercised by the
Benchmark suite, testing should be manually performed in a manner that
exercises those particular changes.


CONTRIBUTOR RESPONSIBILITIES
----------------------------

Contributors of BRL-CAD that are granted commit access are expected to
uphold standards of conduct and adhere to conventions and procedures
outlines in this guide.  All contributors are directly supporting the
on-going development of BRL-CAD by being granted commit access.  As
such, these individuals are also considered "developers" whether they
are modifying source code or not, and have similar obligations and
expectations.  To summarize some of the expected responsibilities:

0) Primum non nocere.  All contributors are expected in good faith to
help, or at least to do no harm.

1) Developers are expected to uphold the quality, functionality,
maintainability, and portability of the source code at all times.

2) Bugs, typos, and compilation errors are to be expected as part of
the process of active software development and documentation, but it
is ultimately unacceptable to allow them to persist.  If it is
discovered that a recent modification introduces a new problem, such
as causing a compilation portability failure, then it is the
responsibility of the contributor that introduced the change to assist
in resolving the issue promptly.  It is the responsibility of all
developers to address issues as they are encountered regardless of who
introduces the problem.

3) Contributors making commits to the repository are required to
uphold the legal conventions and requirements overviewed in the
COPYING file.  This includes the implicit assignment of copyright to
the U.S. Government on all contributed code unless otherwise
explicitly arranged as well as the usage of appropriate license
headers in all files where expected.  Contributors are also expected
to denote appropriate credits into the AUTHORS file when applying
contributed code and patches.

4) It is expected that developers will adhere to the coding style
conventions and filesystem organization outlined in this developer's
guide.  This includes the utilization of the specified coding style as
well as the prescribed K&R indentation convention.

5) Contributors are expected to communicate with other contributors
and to avoid code or file territorialism.  All contributors are
expected and encouraged to fix problems as they are found regardless
of where in the package they are located.  Care should of course be
taken to ensure that fixing in a bug in a section of code does not
introduce other issues, especially for unfamiliar code.  All
contributors are expect to communicate their changes publicly by
keeping documentation up-to-date, including making note of
user-visible changes in the NEWS file following the inscribed format
convention.


VERSION NUMBERS & COMPATIBILITY
-------------------------------

The BRL-CAD version number is in the include/conf directory in the
MAJOR, MINOR, and PATCH files.  The README, ChangeLog, NEWS files as
well as a variety of documents in the doc/ directory may also make
references to version numbers.  See the MAKING A RELEASE steps listed
below for a more concise list of what needs to be updated.

Starting with release 7.0.0, BRL-CAD has adopted a three-digit version
number convention for identifying and tracking future releases.  This
number follows a common convention where the three numbers represent:

	{MAJOR_VERSION}.{MINOR_VERSION}.{PATCH_VERSION}

All "development" builds use an odd number for the minor version.  All
"release" builds use an even number for the minor version.

The MAJOR_VERSION should only increment when it is deemed that a
significant amount of major changes have accumulated, new features
have been added, or enough significant backwards incompatibilities
were added to make a release warrant a major version increment.  In
general, releases of BRL-CAD that differ in the MAJOR_VERSION are not
considered compatible with each other.

The MINOR_VERSION is updated more frequently and serves the dual role
as previously mentioned of easily identifying a build as a public
release.  A minor version update is generally issued after significant
development activity (generally several months of activity) has been
tested and deemed sufficiently stable.

The PATCH_VERSION may and should be updated as frequently as is
necessary.  Every public maintenance release should increment the
patch version.  Every development version modification that is
backwards incompatible in some manner should increment the patch
version number.


NAMING A SOURCE RELEASE
-----------------------

In order to achieve some consistency when preparing a source release,
the following format should be used as the filename convention:

brlcad-{VERSION}.{EXTENSION}

VERSION is the usual version triplet described above under the section
entitled VERSION NUMBERS & COMPATIBILITY.  Example: 7.12.4

EXTENSION is the filename extension.  Compressed tar files should use
the expanded form (i.e. not tgz, etc) unless otherwise dictated as
necessary convention by a source package management system.  Examples:
tar.gz
tar.bz2
dmg
exe
zip


NAMING A BINARY RELEASE
-----------------------

In order to achieve some consistency when preparing a binary release,
the following format should be used as the filename convention:

BRL-CAD_{VERSION}[_{OS}][_{VENDOR}][_{CPU}][_{NOTE}].{EXTENSION}

Notably, the filename should use 'BRL-CAD' instead of 'brlcad' for the
name, it should delimit sections of the filename with underscores
instead of spaces or dashes, and should always include the version
number and an extension for the file type.  The optional
_{OS}_{VENDOR}_{CPU} portion is a reverse (and simplified version) of
the GNU autotools config.guess canonical host triplet identifier.

VERSION is the usual version triplet described above under the section
entitled VERSION NUMBERS & COMPATIBILITY.  Example: 7.12.4

OS is an optional identifier for the target operating system for
binary distributions.  It should only be used if the file extension is
not already platform specific (e.g., .dmg already indicates Mac OS X,
.exe indicates Windows, etc).  The OS name can be the same as the GNU
autotools OS identifier without the version number.  If there are
other platform considerations like the version of libc or the version
of the OS that need to be called out, they can be included.  Examples:
freebsd
linux
linux_glibc3
solaris

VENDOR is an optional operating system qualifier that isn't necessary
for most platforms.  It's generally only useful for vendors that use
customized versions of common operating systems.  An example would be
something like SGI using a fairly customized variant of Linux on their
Altix line.  In that case, it's useful to include the vendor: sgi

CPU is the hardware architecture identifier.  It should be the first
identifier in the config.guess triplet or the lowercase hardware
identifier returned by uname -a (if any).  Examples:
x86
x86_64
ia64
sparc
ppc
power5
mips
mips_64

NOTE can be just about anything but should only be used when
absolutely necessary.  As an example, a note might be used to indicate
that a binary distribution is a partial or custom release.  Examples:
dll
benchmark

EXTENSION is the filename extension.  Compressed tar files should use
the expanded form (i.e. not tgz, etc) unless otherwise dictated as
necessary convention by a binary package management system.  Examples:
tar.gz
tar.bz2
dmg
exe
zip


MAKING A RELEASE
----------------

BRL-CAD uses a monthly iteration development cycle.  If there have
been significant changes since the previous iteration, the
contributors are expected to "settle down" around the last couple days
of the month so that the source code may be verified, tested, and
released.  Major changes to the source code and documentation should
not occur during these last couple days of the iteration, only minor
bug and build fixes.  A release should then be made within the first
few days of the next month's iteration.  Repeat, rinse, recycle.

In addition to the monthly iteration release, additional releases may
be made on an as-needed basis.  This is particularly relevant for
emergency bug-fix releases and in response to security issues.  The
December/January timeframe is considered a single iteration with only
one iteration release necessarily being made in that timeframe.

When making a release, certain public repositories, mailing lists, and
news outlets require updating and notification.  Especially when the
major or minor version of BRL-CAD is going to be updated, it is very
important to follow and ensure that the following steps have been
successfully performed:

0) All code is committed to SVN.

1) Verify that the NEWS file includes a comment for all relevant and
significant items added since the previous release.

2) All existing manual pages and the TODO file are updated with the
latest changes.

3) Update the ChangeLog with entries since the last release; commit
the updated ChangeLog.  Use the YYYY-MM-DD of the previous release.
Get the date from the NEWS file.

    svn2cl --break-before-msg --include-rev --stdout -r HEAD:{YYYY-MM-DD} > ChangeLog

4) Update or verify the version numbers minimally in the include/conf
version files, NEWS, and README.  See the above VERSION NUMBERS &
COMPATIBILITY section.  Commit the changes to the source repository.

5) "sh autogen.sh && ./configure && make" completes successfully on
all platforms.  "sh autogen.sh && ./configure --enable-all && make"
completes successfully on all platforms.

6) Perform a "make distcheck" and "make check" successfully on trunk.
This will ensure that a proper source distribution tarball may be
generated that should build, install, and uninstall properly.

7) Sync trunk with the STABLE branch.  Make sure all changes since the
previous sync are included and that STABLE matches trunk.

    svn co https://brlcad.svn.sourceforge.net/svnroot/brlcad/brlcad/branches/STABLE brlcad.STABLE && cd brlcad.STABLE
    svn log --stop-on-copy https://brlcad.svn.sourceforge.net/svnroot/brlcad/brlcad/branches/STABLE . | more
    # review the log and obtain the last trunk merge revision number ##### from comments
    svn merge https://brlcad.svn.sourceforge.net/svnroot/brlcad/brlcad/trunk@##### https://brlcad.svn.sourceforge.net/svnroot/brlcad/brlcad/trunk@HEAD .
    sh autogen.sh && ./configure --enable-all && make distcheck
    svn commit -m "merge trunk to STABLE from ##### to HEAD revision"

8) Tag the release using "rel-MAJOR-MINOR-PATCH" format:

    svn cp https://brlcad.svn.sf.net/svnroot/brlcad/brlcad/branches/STABLE https://brlcad.svn.sf.net/svnroot/brlcad/brlcad/tags/rel-MAJOR-MINOR-PATCH

9) Checkout a tagged version of the sources (required so that the
source distribution is correct):

    svn checkout https://brlcad.svn.sourceforge.net/svnroot/brlcad/brlcad/tags/rel-MAJOR-MINOR-PATCH brlcad

10) Perform another "make distcheck" on the exported/updated sources on
a system with the latest GNU Autotools installed to generate the
distributable compressed source tarballs.

11) Verify that the source distribution tarballs may be expanded; and
that they build, run, and that the file permissions are correct.
Minimally check:

    [ rt ] without options reports usage with correct library versions
    [ mged -c test.g "make sph sph ; rt" ] pops up a sphere
    [ benchmark run TIMEFRAME=1 ] completes without ERROR
    [ mged ] starts up gui, run: opendb test2.g ; make sph sph ; rt
    [ rtwizard ] starts up gui

12) Use one of the source distribution tarballs to generate
platform-specific builds.  Use the NAMING A SOURCE RELEASE and the
NAMING A BINARY RELEASE sections above for naming source and binary
distribution files respectively.  Test the build: make test && make
bench

13) Post the source and platform-specific binary distributions to
SourceForge and then select them on the sf.net File Release System:
sftp sfusername@frs.sourceforge.net:uploads
put brlcad-*

14) Increment and commit the next BRL-CAD release numbers to SVN;
update the include/conf/(MAJOR|MINOR|PATCH) version files, and NEWS
immediately to an odd-numbered minor version or a new patch developer
version (e.g. 7.11.0 or 7.4.1).  Update the README version to next
_expected_ release number (e.g. 7.12.0 or 7.4.2).

15) Announce the new release.  The NEWS file should generally be used
as a basis for making release announcements though the announcements
almost always require modification and customization tailored to the
particular forum or audience.  If appropriate, notify and/or update
the following information outlets with the details of the new release:

Source or binary release:

      Freshmeat  (anyone can submit update)
      http://freshmeat.net/projects/BRL-CAD/
	short without news details (sentence format)

      T2 package maintainer
      http://t2-project.org/packages/brlcad.html

      Rock Linux package maintainer
      http://www.rocklinux.net/packages/brlcad.html

Binary release (any platform):

      News on the BRL-CAD website
      http://brlcad.org/
	with news details

      SourceForge Project News
      http://sf.net/projects/brlcad/
	with news details

      BRL-CAD News & Users mailing lists
      brlcad-news@lists.sourceforge.net
      brlcad-users@lists.sourceforge.net
	with news details

Linux binary release:

      CAD on Linux mailing list
      cad-linux@freelists.org
	with news details

      Linux Softpedia
      http://linux.softpedia.com/get/Multimedia/Graphics/BRL-CAD-105.shtml

Mac OS X binary release:

      Versiontracker  (only 'brlcad' can update)
      http://www.versiontracker.com/dyn/moreinfo/macosx/26289
      http://www.versiontracker.com/dyn/moreinfo/win/64903
	short without news details (list format)

      Mac Softpedia (anyone can update)
      http://mac.softpedia.com/user/pad.shtml
      maceditor@softpedia.com
	(either provide doc/pad_file.xml or e-mail)
      http://mac.softpedia.com/get/Multimedia/BRLCAD.shtml

      Fink package maintainer
      jack@krass.com

Multiple platform binary release:

      upFront.ezine (if major)
      Ralph Grabowski
      ralphg@upfrontezine.com
	with news details

      CADinfo.NET (if major)
      copyboy@cadinfo.net
	with news details

      TenLinks Daily (if major)
      http://www.tenlinks.com/NEWS/tl_daily/submit_news.htm
      news@tenlinks.com
	with news details

      Slashdot (if major)
      http://slashdot.org
	short without news details

      Government Computer News (if major)
      Joab Jackson
      jjackson@gcn.com
	short without news details

      DevMaster.net (if major and engine-related)
      http://www.devmaster.net/news/submit.php

16) Sit back and enjoy a beverage for a job well done.


GETTING HELP
------------

See the GETTING STARTED section above.  Basically, communicate with
the existing developers.  There is an IRC channel, e-mail mailing
lists, and on-line forums dedicated to developer discussions.
blob
data 72840
						 -*- coding: utf-8 -*-
BRL-CAD Release Notes
=====================

This document provides a transcript of release notes and user-visible
changes for each release of BRL-CAD.  The individual changes are
listed in chronological order with the most recent changes listed
first and are grouped by release.  Each release also includes optional
descriptive text that emphasizes or further describes significant
changes made.  See document footer for additional details.


----------------------------------------------------------------------
--- 2009-02-06  Release 7.14.2                                     ---
----------------------------------------------------------------------

This release includes a number of new tools and enhancements that
facilitate geometry import and export including a new 'bot_dump' tool
for extracting mesh models without evaluating them for solidity, a new
'dem-g' converter for importing Digital Elevation Model (DEM) data,
a new 'lens' tool for creating accurate optical lenses, and the dxf-g
importer receives a bug fix when importing 2D entities.

* fixed errors in handling of hyp primitive translations - Cliff Yapp
* g_tool now guesses if a change was evolutionary - Erik Greenwald
* added >, <, >= and <= attr value comparisons in search - Cliff Yapp
* fixed double-edged line segment sketch bug in dxf-g - John Anderson
* mged 'inside' command no longer uses edit state objects - Bob Parker
* reported and fixed mged documentation eto typein bug - Robert Penny
* fixed mged itcl.tcl startup failure prior to install - Sean Morrison
* fixed bot_dump -u command line option for setting units - Bob Parker
* changed automatic 'make' sizes for various primitives - Bob Parker
* fixed bug with mged 'make' command automatic keypoints - Bob Parker
* renamed all mk_ tools to remove the mk_ prefix - Sean Morrison
* more conversion of documentation to Docbook format - Janine Gettier
* removed the unused 'k'eypoint point on extrudes - Sean Morrison
* added new dem-g terrain importer - Richard Weiss
* layout tweaks to display of selection lists in archer - Doug Howard
* activate primitive creation buttons in archer - Bob Parker
* activate wizard plugins and add tire wizard to archer - Bob Parker
* new initial manual page for bot_dump - Sean Morrison
* added editing support for hyperboloid primitive to mged - Cliff Yapp
* new 'lens' procedural tool for making optical lenses - Cliff Yapp


----------------------------------------------------------------------
--- 2008-11-04  Release 7.14.0                                     ---
----------------------------------------------------------------------

Of the many enhancements included in this release, MGED gets a
powerful new command called 'search' that is very similar to the UNIX
'find' command but for geometry hierarchies.  Included in the
implementation of 'search' is the ability to list geometry that
matches a specified name using globbing patterns or regular
expressions.  You can also search for objects that have attributes
set, that are referenced in combinations, are at a particular depth in
the geometry hierarchy, and much more.  You can combine search
expressions together using boolean logic as well for even more
powerful operations.

* remove -empty option from mged "search" command - Cliff Yapp
* add -nnodes node count option to mged "search" command - Cliff Yapp
* upgraded libpng to 1.2.32 - Erik Greenwald
* fixed memory leak with in-memory geometry databases - Daniel Roßberg
* mged help menu is restructured for improved usability - Cliff Yapp
* update openNURBS to version 4.0.2007.0718 - Cliff Yapp
* handle (i.e., ignore) comments in asc2g conversions - Erik Greenwald
* fix crash in iges-g when run with -n option - John Anderson
* enhanced documentation management system within mged - Cliff Yapp
* conversion of documentation to Docbook format, editing, and review
	- Cliff Yapp, Janine Gettier
* improved benchmark suite usage and instructions - Sean Morrison
* improved mesh normals from Pro/E exporter - Bob Parker
* fixed 'bspline' surface primitive wireframe plot bug - John Anderson
* removed bot-raw, functionality replaced by bot_dump - Sean Morrison
* abort during non-planar collapse or simplify of NMG  - John Anderson
* jove is deprecated and will no longer be maintained - Sean Morrison
* plugged attribute memory leak in all database tools - Daniel Roßberg
* DSP tessellation honors cut type and handles zeros - John Anderson
* fixed 'gets' command input bug in mged - Sean Morrison, Bob Parker
* improved fast4-g DOS file line-ending support - Sean Morrison
* numerous documentation fixes to manual pages - Cliff Yapp
* bot_dump exporter for extracting BoT meshes unevaluated - Bob Parker
* fixed bug parsing long command lines in mged - Sean Morrison
* tessellation support for the DSP primitive - John Anderson
* additional logging options in Pro/E exporter - Bob Parker
* Pro/E exporter enhancements for dynamic tess tolerance - Bob Parker
* new search command enabling Unix find style searches - C. Yapp
* mged no longer requires PATH for internal commands - Sean Morrison
* mged 'edcolor' command turns into 'color -e' - Sean Morrison
* nirt dest command now avoids overwriting existing files - Cliff Yapp
* fixed mged_players error on tra in classic mode mged  - Bob Parker
* fix attr behavior when setting the region attribute - C. Yapp
* identified fix for "Illegal instruction" bug in rt - Simon Clubley
* mged get_regions and reid ignore duplicate regions - Sean Morrison
* added procedural geometry tools to the Windows port
	- Bob Parker, Andre Castelo
* integrated tgf-g with the default compile/install - Daniel Roßberg
* deprecated the mged '-n' option, use '-c' instead - Sean Morrison
* added the ability to invoke mged through icons/menus - Sean Morrison
* new -a option to mged 'killtree' for killing references - Bob Parker
* added new 'killrefs' command to mged - Bob Parker
* added -C color option to the mged 'E' command - Bob Parker
* fixed curvature calc bug in ehy primitive - Timothy Van Ruitenbeek
* added compilation support for MSVC 9 - André Castelo


----------------------------------------------------------------------
--- 2008-08-19  Release 7.12.6                                     ---
----------------------------------------------------------------------

This release enhances the formatting options available "out of the
box" for the NIRT tool, allowing users to easily select different
data reporting options without having to define their own custom
configuration files.  CSV output options also allow for quick
and easy import into spreadsheets.  The new -L option lists available
formats.

The tire tool's behavior has been improved - it will no longer
overwrite pre-existing files and a "w" flag now accepts a value of
"0" to disable creation of the default wheel rim for modelers wishing
to supply their own rim.  A number of small but visual flaws in the
tread geometry definitions were also corrected.

MGED's dbconcat command works again without needing to specifying an
affix for object names when importing geometry from one database to 
another.  Primitive selection via the Edit menu is working again
thanks to the fixing of the solid_illum bug. The pipe primitive's
performance problems during raytracing, due to unnecessary memory
allocations, are now fixed.  The extrude primitive's handling of 
invalid geometry is now more robust.

* renamed mged binary command to bo for binary objects - Sean Morrison
* fixed bug that caused remote framebuffers to fail - Sean Morrison
* add w option to tire to allow disabling wheel generation - C. Yapp
* tweak tread 2 in tire tool; avoid artifacts on tread wall - C. Yapp
* fixed mged 'dbconcat' hang when not specifying an affix - Bob Parker
* fixed primitive selection solid_illum bug in mged - Bob Parker
* fix bug in tire tool's geometry causing 'nicks' in tread - C. Yapp
* increased raytrace performace of pipe primitive - John Anderson
* fixed bugs handling invalid extrude objects - Sean Morrison
* fixed dependency bug in library pkg-config files - Sean Morrison
* platform installers now use a more consistent naming convention
	- Sean Morrison, Bob Parker
* added new -c character option to the loop command - Dawn Thomas
* tire now checks for files instead of overwriting - Cliff Yapp
* add new nirt formatting options, -L listing option - C. Yapp
* fixed nirt's dest cmd's handling of file name string - Cliff Yapp
* modified mged nirt command to include air in results - Bob Parker


----------------------------------------------------------------------
--- 2008-05-29  Release 7.12.4                                     ---
----------------------------------------------------------------------

This release contains numerous enhancements to MGED's mirror command,
now with the ability to mirror an object across arbitrary vectors or
points along a standard axis.  Additionally, nirt now has a new "gap"
option for reporting the empty spaces between objects on a given
shotline with additional formatting options under development.

The release also has a new procedural database geometry tool called
'tire'.  This new tool was developed by Cliff Yapp for the purpose of
creating highly detailed tires based on user-provided specifications.
Given standard tire dimension information, the program can generate a
corresponding curved sidewall tire on a fitted wheel and that has
detailed tread.  The results are impressively realistic tires.

* added '-l' list option to mged dbfindtree command - Bob Parker
* fixed minor memory leak during raytracing - Daniel Roßberg
* added '-+ t' rtcheck option to produce text plot output - Bob Parker
* added gap reporting option to nirt - Cliff Yapp
* added mirror command to archer - Bob Parker
* improve behavior of interactive nirt backout command - Cliff Yapp
* renamed mged dbbinary command to binary - Sean Morrison
* fixed rt/rtedge clipping bug - Bob Parker
* new mged mirror command options for arbitrary vectors - Bob Parker
* fix -k rt option to work for surface normal lighting - Cliff Yapp
* add tire proc-db for easy tire/wheel model creation - Cliff Yapp
* added query pixel support to the Windows framebuffer - Bob Parker
* mirror across a distance along a given axis in mged - Bob Parker


----------------------------------------------------------------------
--- 2008-04-23  Release 7.12.2                                     ---
----------------------------------------------------------------------

* new pinewood boxcar example geometry database - Cliff Yapp
* add mk_arb5, mk_arb6 and mk_arb7 to libwdb - Cliff Yapp
* added xclone command to mged for xpushed deep copies - Bob Parker
* fixed clone infinite loop for combinations - Sean Morrison, C. Yapp
* wrap mged resource paths with spaces - Bob Parker, Elena Bautu
* new -k 'cutaway view' option added to rt - John Anderson
* improved mged classic mode display manager selection - Sean Morrison
* fixed mged crash when getting forms of sketch objects - Bob Parker
* new -u units option added to rtarea - Sean Morrison
* added uniform binary object creation to mged GUI - John Anderson
* added e, l, o, i options to mged saveview command - Sean Morrison


----------------------------------------------------------------------
--- 2008-03-11  Release 7.12.0                                     ---
----------------------------------------------------------------------

Coalescing after just over a year of concentrated development efforts,
this release unveils a plethora of Windows-specific enhancements, bug
fixes, and additional tools ported.  Notably, the Windows improvements
include fixing various issues with file management and porting many
more ray tracers, geometry converters, framebuffer tools, and MGED
classic mode support.

This release also includes a new geometry converter for the United
Kingdom's INTAVAL format from Her Majesty's Ministry of Defence.  The
new importer was jointly developed by TNO PML and IABG mbH and is
included in the BRL-CAD sources as a contributed module.

Of the numerous bug fixes and feature enhancements in this release,
one of the biggest productivity enhancements is the addition of the
MGED "clone" and "tracker" commands.  Clone is a very powerful yet
simple command that provides an intuitive means for performing deep
copies of objects.  Tracker provides an interface for replicating
objects along a spline path.  These 'new' commands originate from
modifications originally developed by the now defunct Geometric
Solutions, Inc., and after receiving considerable updates and rewrites
are now once again available to users.

Finally, this release also marks a major change to the BRL-CAD source
code repository with a move from CVS to Subversion recently completed.
The conversion was successfully completed with the entire history of
BRL-CAD development preserved, accounting for nearly 25 years of
continuous active development.
 
* automatic redraw updates after Geometry Browser edits - Bob Parker
* improved Geometry Browser mouse behavior in mged - Bob Parker
* make fast4-g use GIFT_material=1 and los=100 - Sean Morrison
* fixed Mac OS X 'ogl' framebuffer crash - Sean Morrison, Bob Parker
* removed ogl framebuffer multiple window 'm' option - Sean Morrison
* tree -d option in mged for limiting tree display depth - Cliff Yapp
* added mouse color query support to OpenGL framebuffer - Bob Parker
* fixed X11 framebuffer colormapping bug - Bob Parker 
* libpng updated to 1.2.25 - Erik Greenwald
* fixed several mged I/O bugs for stdin/stdout/stderr - Bob Parker
* nirt now uses bounding sphere for -b backout option - Erik Greenwald
* document the signals rt responds to for progress - Sean Morrison
* libpng updated to 1.2.24 - Erik Greenwald
* TCL/TK updated to 8.5.1 - Erik Greenwald
* mged now runs in the foreground by default - Erik Greenwald
* fixed g-dxf bug where incorrect object name is assigned - Bob Parker
* fixed browser-based mged help on Mac OS X - Sean Morrison
* added rest of BRL-CAD's geometry converters for Windows - Bob Parker
* added more missing framebuffer tools to Windows port - Bob Parker
* rtwizard enhancments for ghosting and display - Bob Parker
* mged reports failure if ray-tracer returns non-zero - Sean Morrison
* improved mged corrupt geometry file handling - Sean Morrison
* improved dbconcat object suffix and prefix options - Sean Morrison
* Tcl/Tk updated to 8.5 final from 8.5b1 - Erik Greenwald
* fixed PIX image file creation bug on Windows - Bob Parker
* ported rtwizard to function properly on Windows - Bob Parker
* fixed mged text-editing commands on Windows platform - Bob Parker
* removed duplicate points text-editing ARBs in mged - John Anderson
* improved mged ted line-ending support using wordpad - Bob Parker
* fixed g_diff bug where some differences were missed - John Anderson
* fixed bug evaluating metaball normals - Erik Greenwald, Ed Davisson
* improved metaball primitive rendering - Erik Greenwald
* fixed bug in mged rcc-cap command when using 't' option - Bob Parker
* mged classic mode now works on Windows platform - Bob Parker
* fixed Windows-specific raytrace framebuffer delay - Bob Parker
* new tracker tool for extracting NEWS tracker data - Sean Morrison
* converted source repository from CVS to Subversion - Sean Morrison
* new 'dir2ae' mged command for getting az/el from dir - Sean Morrison
* new 'ae2dir' mged command for getting dir from az/el - Bob Parker
* fixed empty name crash when using mged 'lt' command  - Sean Morrison
* Pro/E plugin allows spaces in part name mapping file - Sean Morrison
* Pro/E plugin creates 'top.#' if 'top' already exists - Sean Morrison
* fixed asc2g bug on Windows that caused a crash on exit - Bob Parker
* fixed bugs in several Utah Raster Toolkit tools - Pedro Giffuni
* fixed mged start-up initialization bug on Windows - Daniel Roßberg
* graceful handling of mesh normal failures - Sean Morrison
* fixed variety of g-iges and other exporter crashes - Sean Morrison
* fixed crash-on-exit cleanup bug in g-off exporter - Sean Morrison
* fixed crash when xpush was called on a primitive - Erik Greenwald
* fixed Windows port 'opendb' command crash - Bob Parker
* added configurable max_dist depth option to rtedge - Erik Greenwald
* added rest of BRL-CAD's ray-tracers to the Windows port - Bob Parker
* enabled embedded framebuffer support in Windows port - Bob Parker
* fixed garbled output during parallel crash reports - Sean Morrison
* fixed memory deallocation bug in the raytracers - Bob Parker
* renamed 'hd' hexadecimal dump utility to 'hex' - Sean Morrison
* renamed procedural 'wall' generator to 'masonry' - Sean Morrison 
* mged 'tol' command now accepts multiple tolerances - Sean Morrison
* TCL and TK updated to 8.5b1. itcl/itk to dev 3.4. - Erik Greenwald
* fixed non-normalized vector bugs with ARBN objects - John Anderson
* pix-png warns if PNG is smaller than the PIX input - Sean Morrison
* new tgf-g INTAVAL importer - TNO PML, IABG mbH
* removed longjmp warning message from applications - Sean Morrison
* upgraded bundled incrTcl to version 3.3 - Erik Greenwald
* fixed bug with -g/-G cell size options to rt - John Anderson
* 'tree' command without args now shows e'd objects - Sean Morrison
* new pix-fb -p option to pause before exiting - Karel Kulhavy
* fixed mged 'B' command behavior with -A and no args - John Anderson
* updated bundled libpng to version 1.2.21 - Erik Greenwald
* removed raytrace image continuation code - Erik Greenwald
* new mged 'clone' command for performing deep copies of objects
	- Adam Ross, Sean Morrison, Erik Greenwald
* new mged 'tracker' object routing command - Sean Morrison
* fixed crash in mged ls -A attribute listing command - Sean Morrison
* fixed dbconcat of empty combinations, crash in mged - John Anderson


----------------------------------------------------------------------
--- 2007-10-24  Release 7.10.4                                     ---
----------------------------------------------------------------------

A major productivity change introduced in this release is
tab-completion in MGED.  John Anderson's addition of tab-completion to
MGED allows modelers to have command and object names automatically
completed when they press the tab key when operating on the MGED
command line.  If there are multiple matches, the user is presented
with the list of those possible matches, similar to what one might see
in a UNIX shell.

After much debate and demand, this minor release marks a rather
significant change in default behaviors for RT and MGED.  The
ray-tracers that utilize a framebuffer interface now all create
lingering windows by default instead of transient windows.  One of the
main impacts of this change is that users should no longer need to
specify the linger option when ray-tracing to a window via the -F
framebuffer option nor do they need to set the FB_FILE environment
variable in order to get the window to remain displayed.
Additionally, the default MGED preference setting for Z clipping is
now disabled in order to reduce confusion with clipped geometry.

* lingering framebuffer windows by default - Sean Morrison
* improved matrix readability on mged 'red' command - Karel Kulhavy
* "editor" for ted commands can be set in .mgedrc - Erik Greenwald
* fixed benchmark results computation on Solaris - Erik Greenwald
* fixed database corruption bug caused during dbconcat - John Anderson
* mirror BoT primitives - Sean Morrison
* BoT vertex selection in mged reports local units - Sean Morrison
* improved photon map irradiance progress reporting - Erik Greenwald
* tab-completion for mged - John Anderson
* quelled various flawfinder security issues - Erik Greenwald
* fixed photon-mapping lighting model crash - Erik Greenwald
* ADRT libtie bug fixes and performance enhancements - Justin Shumaker
* mged now tests for vim before vi for text editing - Sean Morrison
* fixed parallel operability bug on the Intel Mac - Erik Greenwald
* detect actual available CPUs on an Intel Mac - Erik Greenwald
* Z clipping now off by default in mged - Sean Morrison
* added pipe primitive performance optimizations - John Anderson
* handle discontinuous changes in pipe inner radii - John Anderson
* allow rt more than available cpus for debugging - Sean Morrison
* fixed small TGC (cone) primitive raytrace prep bug - Sean Morrison
* increased output precision from nirt/query_ray - Sean Morrison
* removed op-bw for reading Optronics Scanner images - Sean Morrison
* beset - Ben's Evolutionary Shape Extraction Tool - Ben Poole


----------------------------------------------------------------------
--- 2007-05-16  Release 7.10.2                                     ---
----------------------------------------------------------------------

* support infinite # of shadow rays in the raytracers - Sean Morrison
* improved anim_hardtrack manual page documentation - Erik Greenwald
* added 'bomb' command to mged for script termination - Sean Morrison
* mged and pl-X automatically focus to X11 on Mac OS X - Sean Morrison
* pl-X functionality enhancements for displaying plots - Sean Morrison
* fixed g_diff bug where -f option missed differences - John Anderson
* fixed mged 'units' command, reports current setting - John Anderson
* benchmark tool automatically logs all output to file - Sean Morrison
* added 'clobber' cleanup command to benchmark tool - Sean Morrison
* added NIST's Template Numerical Toolkit - Sean Morrison
* prevent pix-png from writing png data to a tty - Sean Morrison
* generate crash report files during application abort - Sean Morrison
* upgrade bundled tcl/tk from 8.5a5 to 8.5a6 (AquaTk) - Sean Morrison
* fixed memory leak in librtserver - John Anderson
* converters abort early on corrupted input geometry - John Anderson
* fixed versioning issues in source distributions - Sean Morrison
* new BRL-CAD installer for Windows using NSIS - Jonathan Bonomo
* added a brlcad-config configuration script - Sean Morrison
* added pkg-config files for core libraries - Sean Morrison
* fixed deadlock bug related to rtarea - Sean Morrison, John Anderson
* fixed bug in mged command prompt with page up/down - Sean Morrison
* added attr and make_name commands to archer - Bob Parker


----------------------------------------------------------------------
--- 2007-04-09  Release 7.10.0                                     ---
----------------------------------------------------------------------

With this release marks several significant changes to BRL-CAD's
licensing in order to simplify the distribution terms and increase
overall flexibility of use.  All application front-end code in BRL-CAD
is converted from the GNU General Public License (GPLv2) to the less
restrictive GNU Lesser General Public License (LGPLv2.1).

For documents not already in the public domain, BRL-CAD's default
documentation license terms are also changed from the dual-licensed
GFDL/GPL terms to the BSD Documentation License (BDL).  Originally
derived from the FreeBSD Documentation License, the BDL is effectively
the BSD License with language as it applies specifically to
documentation.  The terms of the BDL are just as flexible allowing
practically any use, whether it be commercial or private, so long as
the authors are appropriately credited.

As a collective work, BRL-CAD is being distributed under the terms of
the LGPL.  Individual portions of BRL-CAD, save for a few 3rd party
codes, effectively fall into one of the following three license
categories: 1) LGPL, 2) BSD/BDL, or 3) are in the public domain.  See
the terms of each individual license as well as BRL-CAD's COPYING file
for more details.

* fixed -i argument bug in g-acad, g-dxf, g-nff, g-obj - Shawn Baker
* framebuffer toggle added to raytrace panel in mged - Sean Morrison
* fixed rtedge multithreaded output render bug - Erik Greenwald
* fixed jove/termcap issues on Mac OS X - Sean Morrison
* increased output precision on mged 'analyze' command - Sean Morrison
* prevent mged shutdown on DSP objects with no data - Sean Morrison
* integration into the Arch Linux packaging system - Loui Chang
* upgrade of bundled tcl/tk from 8.4.6 to 8.5a5 - Sean Morrison
* improved EOL processing in 70+ tools - Sean Morrison, John Anderson
* rewrote pixcmp providing improved I/O format options - Sean Morrison
* added new manual page for pixcmp utility - Sean Morrison
* updated bundled zlib to version 1.2.3 - Sean Morrison
* updated bundled libpng to version 1.2.16 - Sean Morrison
* fixed Windows line-ending bug in dxf-g - John Anderson
* g_qa manual page documents the -t tolerance option - Lee Butler
* updated bundled blt to blt2.4z-patch-2 - Sean Morrison
* dxf-g turns 2D entities into sketches instead of nmg - John Anderson
* removed advertising clause from BSD code - Sean Morrison
* fix index bug, allow material ID of zero in rtweight - Karel Kulhavy
* fixed multiple frame render bug in raytracers - Karel Kulhavy
* mged help command now shows help for all args listed - Sean Morrison


----------------------------------------------------------------------
--- 2006-10-16  Release 7.8.4                                      ---
----------------------------------------------------------------------

* support for handling larger hierarchies in archer - Doug Howard
* added distance measurement tool to archer - Bob Parker
* added component selection capabilites to archer - Bob Parker
* new script to extract gforge task items - Lee Butler, Sean Morrison
* substantial additions and mods to source documentation - Lee Butler
* added scripts to facetize all regions in a database - Lee Butler
* added script to expand combinations to multiple objects - Lee Butler
* prevent infinite loop on classic mged attach prompt - Sean Morrison
* ctrl-d on empty shell line now quits mged - Sean Morrison
* added archer geometry/view loading via command-line arg - Bob Parker
* mged tree command now supports -o/-i, matches docs - John Anderson
* improved beginning-of-line input processing in stl-g - John Anderson
* improved end-of-line input processing in dxf-g - John Anderson
* support for longer Fastgen object names in fast4-g - Sean Morrison
* improved 'ted' mged command text editor support - Sean Morrison
* support mged EDITOR environment override on Windows - Sean Morrison
* fixed mged crash on P binding when not in edit mode - Sean Morrison
* improved FreeBSD 64bit support, fixes AMD64 crash - Erik Greenwald
* allow unlimited light samples during ray tracing - Sean Morrison
* new script for computing BRL-CAD file line counts - Sean Morrison
* fixed mged extrude of empty sketch display crash - Sean Morrison
* re-enabled png-ipu, pix-ipu, ipustat, ipuscan - Sean Morrison
* updated archer splash screen - Bob Parker
* archer enhancements for displaying view parameters - Bob Parker
* improved mged grid zooming using pixel size - John Anderson
* fixed mged hang caused by extreme grid zooming bug - John Anderson
* ported jove to SGI Altix platform, fixed crash bug - Sean Morrison
* increase default mged scrollback to 10k lines - Sean Morrison
* improved support for Mac "delete" keys in mged - Sean Morrison
* mged vi-mode command edit history searching - James (swcto)
* bigger, better vi command line editing in mged - James (swcto)
* rt command script 'ae' no longer resets view scale - Sean Morrison
* fixed asc-nmg manual page usage examples - Sean Morrison


----------------------------------------------------------------------
--- 2006-06-20  Release 7.8.2                                      ---
----------------------------------------------------------------------

This release includes a new example geometry model, a "Toy Barbie
Jeep" (see note below regarding trademarks) that was modeled in 2005
over the course of a day by a small group of students attending a free
hands-on BRL-CAD training class at SURVICE Engineering, Inc.  The
class involved working in groups to simulate a real-world
time-constrained modeling experience taking measurements of a real toy
vehicle, considering what aspects of the vehicle are important for
analytic purposes, deciding how to best represent complex geometric
shapes, modeling the parts of the vehicle in MGED, assembling the
components together, and running geometric processing and rendering
tools on the final model.

The DXF importer received considerable updates this iteration, with
John Anderson providing additional support for a variety of 2D DXF
entities.

* fixed asc-nmg bug that caused a crash on exit - John Anderson
* fixed minor mged memory leak - Jim Monte
* added archer version info to bottom of about dialog - Bob Parker
* added a beta vertex array exporter (g-var) - Prasad Silva
* archer support for multi-select and cut-n-paste - Doug Howard
* added newly supported entities to dxf-g manual page - John Anderson
* fixed asc2g bug reading files with carriage returns - Sean Morrison
* added dbupgrade manual page - Sean Morrison
* updated the g2asc manual page with format details - Sean Morrison
* fixed g_diff attribute comparison issue - Sean Morrison
* g_diff reports more detail whether differences exist - Sean Morrison
* g2asc now saves additional _GLOBAL attribute values - Sean Morrison
* fixed g2asc export of null units bug - Sean Morrison
* fixed libwdb corruption when creating pipes - Daniel Roßberg
* fixed crash in release build concerning bot's - Daniel Roßberg
* new toy barbie jeep geometry - Various Students
* considerable dxf-g enhancements, more entity support - John Anderson

Note: Barbie and Jeep are trademarks of Mattel Inc. and the
Daimler-Chrysler Corporation respectively.  No endorsement is intended
or implied.

----------------------------------------------------------------------
--- 2006-04-11  Release 7.8.0                                      ---
----------------------------------------------------------------------

This release marks a major milestone in the massive effort by the
BRL-CAD developers and the open source community to provide a complete
port of BRL-CAD to the Microsoft Windows platform.  This effort
includes particular support and contributions from SURVICE
Engineering, Inc., TNO Prins Maurits Laboratory, the U.S. Army
Research Library (ARL), and others.  The Windows port effort was
started several years ago, primarily through efforts of friends at the
U.S. Army Aviation and Missile Research Development and Engineering
Center (AMRDEC) and CG2, Inc.  Over the past year, the development
effort was accelerated to a stable status through the work of SURVICE
working for ARL.

This release also includes another major contribution by SURVICE
Engineering, Inc., a new modeling tool called Archer.  A more detailed
announcement and overview of Archer will be given in the near future
after the new tool is more fully integrated into the build system and
tested further.

Other noteworthy enhancements provided in this release include new
sample applications that demonstrate the capabilities of the libpkg
networking library, in-memory geometry database processing, reshooting
of rays from analysis codes for testing pursposes, and the librt root
solver.  For analysts and modelers alike, the MGED modeler also
acquires a few new commands including reid and remat that respectively
assist with the assignment of region and material identifiers.

* fixed mged B command bad geometry resource bug - John Anderson
* new tracker tool for extracting sf.net tracker data - Sean Morrison
* added manual page for benchmark tool - Sean Morrison
* fixed g-dxf export compatibility issue - John Anderson
* smoother sketch primitive spline drawing - Sean Morrison
* fixed read bug in giftorle - Sean Morrison
* fixed multiply referenced object illumination bug - Sean Morrison
* improved nmg tessellation support reliability - Sean Morrison
* new tpkg ttcp-style example application using libpkg - Sean Morrison
* new roots_example root solving sample application - Sean Morrison
* prevent several g-nmg segfaults during tessellation - Sean Morrison
* fixed brlman/awf `./"' unsupported or unknown issue - Sean Morrison
* new g_transfer in-memory geometry example program - Sean Morrison
* new reshoot program to reshoot rays & compare results - Lee Butler
* added support for -F framebuffer option to fb-bw - Sean Morrison
* reid mged command, recursively assign region IDs - Sean Morrison
* remat mged command, recursively assign a material ID - Sean Morrison
* get_regions mged command, list assembly regions - Sean Morrison
* extensive Windows build support enhancements - Bob Parker
* new Archer modeling and visualization tool - Bob Parker, Doug Howard
* raytracers use image size for default aspect ratio - Sean Morrison
* fixed benchmark sqrt of negative numbers error - Sean Morrison
* raytracer performance enhancements - Sean Morrison


----------------------------------------------------------------------
--- 2005-12-15  Release 7.6.6                                      ---
----------------------------------------------------------------------

Continuing with the newly added point collection and reverse modeling
techniques provide in the previous release, this iteration improves
upon that support fixing several issues and refining the modeling
techniques.  Additionally, after more than a year of passively
researching and investigating, this release now accounts for the
majority of known contributors to BRL-CAD over the project's
existence.  This is part of an on-going effort to document the history
of BRL-CAD over the past 20 years.

* improved mged resource searching when not installed - Sean Morrison
* significant AUTHORS file updates, all names filed - Sean Morrison
* fixed sketch primitive bezier path computation bug - Sean Morrison
* cleaned up erroneous rtedge end of line output - Sean Morrison
* configure --enable/disable-everything option - Sean Morrison
* updated g_qa manual page documentation - Lee Butler
* early termination grid spacing limit bug in g_qa fixed - Lee Butler
* fixed Jove sandbox installation issue - Sean Morrison
* fixed adrt/isst client crash bug - Mike Caruso, Razak Arunaugun
* fixed modified env(PATH) startup issue in mged - Sean Morrison
* fixed benchmark tool default resource location bug - Sean Morrison
* added another text alignment handler to dxf-g - John Anderson
* clamped integer value printing of primitives in mged - Sean Morrison
* removed gratuitous nmg debug printing from mged - Sean Morrison
* fixed grouping bug, mged point importer - Jason Owens, Sean Morrison
* improved mged point import support - Lee Butler, Sean Morrison
* fixed bug in plate orientation of mged point importer - Lee Butler


----------------------------------------------------------------------
--- 2005-11-12  Release 7.6.4                                      ---
----------------------------------------------------------------------

This release adds a new geometry creation interface to MGED that
supports reverse modeling geometry of existing objects.  New geometry
creation commands read point data sets in a simple text file format,
recognizing categories and collections of points.  Using
point-acquisition devices such as X-Station Vulcan advanced surveying
systems from Arc Second Inc., points may be collected and used in MGED
to factilitate the generation of geometry models.  Collection
techniques are recognized for polygonal plates, cylinders, spheres,
point clouds, and more.

* auto-locate mged external apps regardless of PATH - Sean Morrison
* mged utilizes a local display if unspecified/unset - Sean Morrison
* set default mged Escape key binding to reject - Sean Morrison
* fixed 'benchmark' tool resource searching - Sean Morrison
* added -u option to mged "make_bb" to allow air - Lee Butler
* fixed IBM AIX compiler support issues - Sean Morrison
* head/tail -n usage posix compliance - Stefan Fiedler, Sean Morrison
* fixed jove compilation issues - Sean Morrison, Daniel Remenak
* fixed conversion bug in the dxf-g converter - John Anderson
* point parsing/import interface to mged - Sean Morrison, Lee Butler
* fixed bug in export of NMG primitives - John Anderson
* fixed itcl configuration issue - Stefan Fiedler, Sean Morrison
* fixed g_qa tolerance option parsing inconsistency - Sean Morrison
* improved mged 'tol' command tolerance value checks - Sean Morrison
* fixed tgc absolute tessellation tolerance issue - Sean Morrison
* optional build support checks for X11 and OpenGL - Sean Morrison
* improved Windows build support - Bob Parker, Daniel Roßberg
* isst observer 2x screen magnification - Justin Shumaker
* added los and material name support to librtserver - John Anderson
* improved 64bit support for ADRT - Justin Shumaker
* updated manual page documentation - Sean Morrison
* added support for text handling to dxf-g - John Anderson


----------------------------------------------------------------------
--- 2005-09-29  Release 7.6.2                                      ---
----------------------------------------------------------------------

In order to resolve an integration issue with the MUVES-S2
vulnerability analysis code, this special release of BRL-CAD was put
together providing updated tclscripts that work correctly when
embedded into MUVES-S2.  This release also facilitates BRL-CAD's
integration with AJEM as well for their corresponding release.

* fixed 'embedded mged' tclscript files - Karen Murray, Sean Morrison


----------------------------------------------------------------------
--- 2005-09-08  Release 7.6.0                                      ---
----------------------------------------------------------------------

This release includes the addition of a new geometry "Quantitative
Analysis" tool called g_qa.  This tool is a new tool that combines
some of the features of rtweight, rtcheck and g_lint, providing a
robust means for computing the weight and volume of objects while also
allowing a means to report overlaps, air gaps, external air regions,
bounding box dimensions, and more.

* configuration build fixes for Tk/Iwidgets - Michal Slonina
* fixed bug in mged overlay command handling of EOF - Lee Butler
* renamed g-wave converter to g-obj - Sean Morrison
* mged will now work without being installed - Sean Morrison
* improved ADRT build support - Sean Morrison
* improved build support detection for OpenGL and X11 - Sean Morrison
* performance enhancements to ADRT - Justin Shumaker
* enabled SGI knobs and button box support for IRIX - Sean Morrison
* fixed mged startup resource bug - Enrique Perez-Terron
* Enhancements to g_qa for stability and performance. - Lee Butler
* 'make test' now runs against an uninstalled  build tree - Lee Butler
* new nightly regression test framework - Lee Butler
* g_qa now has option to report interfaces/connections - Lee Butler
* mged relocation support - Sean Morrison
* Doxygen changes to source code comments - Lee Butler, Sean Duvall


----------------------------------------------------------------------
--- 2005-08-10  Release 7.4.2                                      ---
----------------------------------------------------------------------

Continuing with the impressive ADRT tool suite being provided by
Justin Shumaker is the addition of the Interactive Shot Selection Tool
(ISST).  Using ISST, you can spin large facetized models around in
real-time, slice through them with rays, and examine the geometric
components along a given path.  The tool will take advantage of
clusters and SMP hardware similar to RISE, providing a master job
manager, a slave compute daemon for network distributed processing,
and a client for interacting with and viewing the models.

* fixed ray-trace unique hits evaluation bug - John Anderson
* added manual page for remapid - John Anderson
* fixed quick memory debugging bug - Jim Hunt
* improved brlman relocation - Sean Morrison
* added g_qa geometry quality analysis tool (beta) - Lee Butler
* added adrt interactive shot selection tool - Justin Shumaker
* simultaneous -o and -F options to rt, rtedge, rtxray - Sean Morrison

----------------------------------------------------------------------
--- 2005-07-12  Release 7.4.0                                      ---
----------------------------------------------------------------------

This update includes several enhancements and new additions including
the impressive addition of the Realistic Image Synthesis Engine (RISE)
path-tracer.  RISE is part of the Advanced Distributed Ray-Trace
(ADRT) tool and library suite, which provides a high-performance
triangle ray-trace engine.  This engine serves as the basis for
several tools, RISE being the first toolset to be released.  This
toolset includes a master job manager, a slave compute daemon for
network distributed processing, and a client for observing job
progress.

Driven by user requests, the 'rtarea' command now reports signifcantly
more information than before including area details for all assemblies
and regions being rendered.  Both the presented and exposed areas are
now computed too, including details on how many regions/assemblies are
hit.  The exposed area is the potentially occluded 2D projection
whereas the presented area is calculated without consideration for
occlusions.  That is to say that if an object is in front covering a
regions or assemblies from a particular view, the exposed area of the
covered geometry would be reduced but the presented area would not.
The rtarea command was added to MGED as well, along with rtweight.

* improved mged initialization failure reporting - Sean Morrison
* applied zlib vulnerability patch (CAN-2005-2096) - Sean Morrison
* added the adrt rise path-tracer - Justin Shumaker
* increased mged shadow ray selection max to 64 - Sean Morrison
* added rtarea and rtweight commands to mged - Sean Morrison
* added sorting and hierarchy support to rtarea - Sean Morrison
* rewrote rtarea for region and assemblies support - Sean Morrison
* fixed .density file parser bug in rtweight - Daniel Roßberg
* improve detection and handling of cyclic geometry - Sean Morrison
* added a -noleaf option to the mged pathlist command - Bob Parker
* fixed potential infinite loop bug in BoT primitive - Bob Parker
* no longer install tclsh/wish, use btclsh/bwish - Sean Morrison
* added bot_merge mged cmd (combine 2 bots into 1) - Lee Butler

----------------------------------------------------------------------
--- 2005-06-07  Release 7.2.6                                      ---
----------------------------------------------------------------------

Additional modifications were made to the benchmark suite including
the addition of iterative frames that compare the stability of the
performance results being observed.  The benchmark will continue to
render frames of a designated time-complexity until the numbers are
either stable or a maximum time window is reached.  The benchmark
output now describes what the results mean and provides reference
numbers for comparison.  The benchmark suite is also now included in
the default installation as a command-line tool named 'benchmark'.

In conjunction with the benchmark suite's requirements, some example
geometry databases are now provided as part of the default install as
are the corresponding reference benchmark images and logs.  They are
intended to provide new users with sample geometry models to work
with; and custom configurations may disable the installation of the
additional geometry databases if so desired.

* documented the rtcheck -g and -G options - Sean Morrison
* fixed units bug in mged typein of bot and arbn - Daniel Roßberg
* added -W option to raytracers for white background - Sean Morrison
* synchronized mged startup message with gui creation - Sean Morrison
* added -f option to mged to prevent backgrounding - Sean Morrison
* install example geometry databases - Sean Morrison
* added 'benchmark' tool and install benchmark suite - Sean Morrison
* improved installation instructions - Sean Morrison
* fixed various typos in top level documents - Chuck Kennedy
* added summary and explanation of benchmark results - Sean Morrison
* fixed dimension conversion bug in dxf-g - John Anderson
* added deviation stability checks to benchmark suite - Sean Morrison


----------------------------------------------------------------------
--- 2005-05-11  Release 7.2.4                                      ---
----------------------------------------------------------------------

The release marks the beginning of a series of benchmark suite
enhancements.  The benchmark suite will now iteratively increase the
number of rays being shot until a minimum amount of time has elapsed
per render.  The resulting computations provide a more stable
ray-trace figure of merit (rtfm) and allows the benchmark tests to
scale more effectively to increasingly higher-performance machines
without requiring intervention.  The current default testing time
window minimum of 60 seconds elapsed wallclock time implies that the
benchmark suite will now take about 15 minutes to complete.

* fixed libbu run-time memory corruption checking - Sean Morrison
* prevent indirect OpenGL framebuffers from crashing - Sean Morrison
* throttle cpu usage on lingering OpenGL framebuffers - Sean Morrison
* uniform binary objects from partial file data - Sean morrison
* added libwdb interface to uniform binary objects - Sean Morrison
* fixed mged help for whichid, whatid, and whichair - Sean Morrison
* fixed dsp primitive bug when using binary objects - Sean Morrison
* fixed tabsub 64bit filesystem file read bug - Sean Morrison
* vrml-g now writes out DEF names for exported shapes - Sean Morrison
* updated manual pages with new contact details - Sean Morrison
* iterative scalable benchmark computations - Sean Morrison
* added logging of ray details when root solver fails - Sean Morrison
* added logging of solid name when root solver fails - Lee Butler
* build now includes a termlib library - Sean Morrison
* fixed smp linux rtarea calculation bug - Sean Morrison
* fixed rtweight centimeter units computation bug - Lee Butler
* fixed asc2g double-free warnings bug - Sean Morrison
* added rtarea manpage documentation - Sean Morrison
* fixed compilation support for Solaris - Sean Morrison
* removed redirection usage examples in g2asc docs - Sean Morrison


----------------------------------------------------------------------
--- 2005-04-03  Release 7.2.2                                      ---
----------------------------------------------------------------------

* fixed rtedge/rtwizard background render failure bug - Sean Morrison
* fixed rttherm previous results interference bug - Sean Morrison
* fixed aborted benchmark summary bug - Sean Morrison
* renamed the irprep 'display' tool to 'showtherm' - Sean Morrison
* quelled XInputExtension warning on mged startup - Sean Morrison
* fixed non-square window mged illumination selection - Sean Morrison


----------------------------------------------------------------------
--- 2005-03-05  Release 7.2.0                                      ---
----------------------------------------------------------------------

* fixed libpng link bug on Irix64bit - Lee Butler
* fixed locale build bug - Thierry Thomas & Pedro Giffuni
* fixed g-iges stdout header bug - Manfred Spraul
* fixed minimal BoT disappearance bug  - Lee Butler
* Sketch Editor now starts with an empty sketch - Sean Morrison
* fixed need for brlcad_root on default configure - Sean Morrison
* update to zlib 1.2.2 - Sean Morrison


----------------------------------------------------------------------
--- 2005-01-25  Release 7.0.4                                      ---
----------------------------------------------------------------------

This patch release update fixes several build issues experienced on
various platforms including Gentoo, Debian, and Mac OS X.

* provided libutahrle (urt) vulnerability patch - Pedro Giffuni
* fixed missing vgr results when missing dc - Sean Morrison
* update of Utah Raster Toolkit from 3.0 to 3.1b1 - Sean Morrison
* update of libpng from 1.2.5 to 1.2.8 - Sean Morrison
* gentoo build fixes - Cliff Yapp


----------------------------------------------------------------------
--- 2005-01-07  Release 7.0.2                                      ---
----------------------------------------------------------------------

This release marks the first source and binary distribution of BRL-CAD
as an Open Source project.  With the exception of a few minor bug
fixes, the majority of changes made available through this release
that separate it from 7.0.0 are source code style adoptions and
clarifications of the developer documentation.  All files have adopted
an emacs/vi local variables block for style conformance and the source
code headers are modified to denote the new distribution and copyright
status of the project.


----------------------------------------------------------------------
--- 2004-12-21  Release 7.0.1                                      ---
----------------------------------------------------------------------

While with the new release numbering scheme it will be rare to see a
release with an odd minor patch number, in many ways this is a major
BRL-CAD release with the package entering the realm of Open Source
software.  Likewise, the project moves a new public website as well as
adopts a SourceForge project site.  With the migration of the project
to SourceForge, new forums, mailing lists, bug tracking, feature
requests, support mechanisms, task management, and news announcement
channels all become instantly available.

OPEN SOURCE

This marks the first release of BRL-CAD as Open Source software.  It
has taken several years and much hard work by many people to actually
make this happen.  Special thanks goes out to the U.S. Army Research
Laboratory for giving back to the community by allowing BRL-CAD to be
released as Open Source software under the Open Source Initiative
(OSI) approved NASA Open Source Agreement (NOSA).  The "release"
solely exists in CVS -- binary and source distributions will remain
unprepared.

The majority of BRL-CAD is covered by the GNU General Public License.
The BRL-CAD libraries (src/lib*) are all provided under the GNU Lesser
General Public License.  The documentation is provided under the terms
of the GNU Free Documentation License.  The build infrastructure and
supporting scripts are covered by the Berkeley Software Distribution
license or are in the public domain.  Given the vast size, complexity,
and varied usage needs of BRL-CAD's source code and supporting data,
all of the aforementioned licenses allow for a greater degree of
flexibility in how they may be used.

See the individual files in question and the COPYING file for more
details.  The licenses are intended to foster and encourage
improvements to BRL-CAD and the Open Source community as a whole
without taking away from the package's heritage and history.  See the
COPYING file for more details and information.


----------------------------------------------------------------------
--- 2004-11-01  Release 7.0.0                                      ---
----------------------------------------------------------------------

BRL-CAD's source code has undergone major restructuring with a
complete replacement of the build system and conversion of the sources
toward standards compliance.


SOURCES REORGANIZED

This release of BRL-CAD marks a new beginning for the project in terms
of how to sources are organized and how the package is built.  BRL-CAD
now uses the GNU Build System (autotools) for compilation.  The gen.sh
and Cakefile-based build system is no more.  In addition to a new
build system, the directory hierarchy has been reorganized.

Following the GNU-style source code reorganization, BRL-CAD will now
also follow the major.minor.patch (e.g. 7.0.0) version numbering
convention.

Source code now primarily lives under the top-level src/ directory,
external libraries are in the src/other/ directory.  Several of the
third-party libraries have been updated including tcl/tk and libpng.
There are top-level documentation files available (such as this file
and the README) to get users familiar with the project.  Developers
that would like to get involved with BRL-CAD should refer to the
HACKING file.


ANSI CONFORMANCE

As for the source code itself, full K&R conformance has finally been
let go with the new preference of being fully compliant with the ANSI
C standard (INCITS/ISO/IEC 9899-1999).  More efforts continue to
complete this conversion, maintaining support for as many of the older
compilers as is reasonably possible, as well as general source code
clean up.  See the new HACKING file for for more information.


NEW FEATURES

The enhancements evident in this release of BRL-CAD include dozens of
bug fixes and additional documentation across the entire package.
MGED now sports a new Geometry Browser for traversing through
geometry, as well as improved support for saving and restoring MGED
views.  There is now support for importing from Unigraphics and
Pro-Engineer with the ug-g and proe-brl converters.  There is also a
g-nff converter for exporting to the NFF file format.  There is
experimental initial support for a new super ellipsoid primitive type
for advanced curvature shapes.  There are a few new procedural
database generators including one for creating geometry of an image as
well as generic vegetation.


WINDOWS SUPPORT

This release marks the first release with initial support for the
Windows operating system platform.  All of the core BRL-CAD libraries
as well as several tools (including MGED, RT, NIRT, ASC2G, and more)
have completed the conversion.  While not yet a holistic port, all of
the libraries and the core utilities have been ported and the rest will
soon follow.


----------------------------------------------------------------------
--- 2002-09-13  Release 6.0.2                                      ---
----------------------------------------------------------------------

Bug fixes.


----------------------------------------------------------------------
--- 2002-07-02  Release 6.0.1                                      ---
----------------------------------------------------------------------

Bug fixes.


----------------------------------------------------------------------
--- 2002-03-02  Release 6.0                                        ---
----------------------------------------------------------------------

NEW DATABASE FILE FORMAT

This is probably the most significant change in this release.  It
introduces a large number of new capabilities in BRL-CAD, including:

* Machine-Independent Data

  The geometry in the new file format is stored in an
  architecture-independent fashion. This removes the need to convert
  the geometry file to ASCII representation and back to binary when
  moving between machines of different architectures (e.g., between
  Big-Endian and Little-Endian machines).

* Unlimited-Length Object Names

  Names of objects in the geometry database were previously limited to
  16 characters. This restriction was burdensome when constructing
  complex systems. The new database format (and MGED/RT) allows for
  unlimited-length names for objects. The only limits remaining are
  usability/human factors (i.e., the user may wish to think twice
  before using 1024-character names for all objects).

* Object Attributes

  All geometry file objects can now carry arbitrary text data. This
  information is stored as a series of name-value pairs. For example,
  it is possible to store an attribute called "modeler", which could
  indicate the name and organization of the person who created that
  portion of the geometry. Another attribute might be "density", whose
  value would be the density of the material from which the object was
  constructed. Analysis codes can store application-specific data in
  these attributes and retrieve them at run time. MGED has a GUI
  control panel for creating and editing object attributes.

* Opaque Binary Objects

  It is now possible to store arbitrary data in a BRL-CAD geometry
  database object. For example, the entire description from an
  external CAD system could be stored for reference. Several features
  of BRL-CAD geometry that require ancillary data can now use these
  database objects as a data source in addition to being able to use
  external disk files.

* Reduced Disk Space Requirements

  The new file format is more aggressive about space utilization. Many
  primitives now occupy significantly less disk space.

* New dbupgrade Utility for Easy Migration

  The dbupgrade command has been created to bring old databases up to
  the most current version of the file format.

* Hidden Objects

  It is now possible to mark objects in the database as
  "hidden". These will not be listed in ordinary displays of database
  content. This allows users to keep objects such as opaque binary
  objects from cluttering listings.

* Deprecation of Obsolete hf and poly primitives

  The dsp(Displacement Map) primitive is functionally equivalent to
  the hf and offers substantial performance advantages. The bot (bag
  of triangles) primitive is likewise a substantial improvement over
  the existing poly primitive. The dbupgrade utility converts existing
  hf and poly primitives into dsp and bot primitives,
  respectively. Both hf and poly primitives are deprecated.

* Introduction of 2D sketch primitive

  The sketch primitive consists of straight lines, circular arcs, and
  Bezier curves. There is a drawing utility in MGED for creating them.

* Introduction of extrude primitive

  The extrude primitive supports linear extrusion of closed-boundary
  sketch primitive drawings to create 3D objects.

* New ASCII File Format for New Binary File Format

  This new ASCII format is based upon the Tcl scripting language. It
  allows more convenient processing and manipulation of the ASCII
  format.


MGED GEOMETRY EDITOR IMPROVEMENTS

In addition to supporting both the old and new geometry file formats,
there have been numerous improvements. These include:

* New User's Manual

  This is a completely updated tutorial introduction to MGED and
  modeling with BRL-CAD. Delivered in PDF format and suitable for both
  online browsing and printing. It includes a complete command
  reference. Look for it in the MGED menus at: "Help->Manual->PDF MGED
  Tutorial"

* Dual-Format Capability

  MGED and other BRL-CAD utilities retain the ability to work with
  geometry files constructed in previous versions of BRL-CAD as well
  as the new one. Users can upgrade geometry to the new format when
  they choose. New features implemented in the geometry file may not
  be available under the old format.

* Accelerators for Complex Shape Construction

  These allows user to automatically generate more complex primitives
  from existing ones. For example, rcc-cap creates an ellipsoidal top
  for a right circular cylinder.  The list of accelerators includes:
  rcc-blend, rcc-cap, rcc-tgc, rpp-arch, rpp-cap, rpp-arch, tor-rcc,
  and sph-part.

* Improved Menu and Interface Layout

  Menus have been arranged in a more convenient layout.  Default color
  selections have been improved.

* Abort on Raytrace Control Panel

  Users now have the option to abort a running raytrace process right
  from the control panel.

* Extended Primitive Type-In Support

  Two primitive types can now be created from the command
  prompt. These include:

    o  kinematics control (grip)
    o  arbitrary regular polyhedron (arbn)

* Extended Primitive Auto Generation

  Several primitive types can now be auto generated using the make
  command from within MGED.  Primitives created with this command take
  their initial parameters from the view center and size.  These
  include:

    o  rectangular parallelepipeds (rpp)
    o  arbitrary faceted (ars)
    o  and arbitrary regular polyhedron (arbn)

The following new commands and MGED tools have been implemented:

  * E: Extended options for creating evaluated wireframes.

  * adjust: Alter attributes of an object.

  * attr: Assign or retrieve a named text attribute from an object.

  * autoview: Set view size and center so that all displayed solids
    are in view.

  * bot_decimate: Perform facet reduction on bot by edge collapse.

  * bot_face_sort: Optimize a bot primitive for faster raytracing.

  * copyeval: Copy and evaluated/transformed primitive.

  * hide: Mark database object as hidden.

  * unhide: Mark database object as visible.

  * lt: Produce a listing like ls, but display output in a
    Tcl-friendly format.

  * nmg_collapse: Perform facet reduction on NMG by edge collapse.

  * nmg_simplify: Attempt to convert NMG to CSG primitive (ARB, TGC).

  * pathlist: Lists all existing paths that start from the specified
    combinations and end at a primitive.

  * rtedge: Command line interface to the rtedge program for
    generating line drawings.

  * shells: Separates an NMG primitive into many objects, 1 object per
    NMG shell.

  * showmats: List transformation matrices on a path.

  * summary: Provide database statistics.

  * xpush: An extended push that attempts to avoid degenerate
    conditions in matrix propagation.

  * Build Pattern Tool: this tool facilitates the construction of
    replicated objects in various rectangular grid and circular
    patterns. For example: lines of rivet heads, bolt holes, railroad
    ties, tire tread patterns.


OTHER ENHANCEMENTS

  * Opaque Binary Object Support for dsp Primitive and Texture Shaders

    The dsp primitive can accept an opaque binary object as the source
    for its elevation data. Likewise, texture shaders can now accept
    opaque binary objects as the source for their image data.

  * Improved bot Primitive Raytracing

    The bot primitive supports a multiple bounding-box technique to
    achieve a substantial speedup during raytracing.

  * Improved dsp Primitive Raytracing

    The bot primitive implements an octtree bounding-box technique to
    achieve a substantial speedup during raytracing.

  * ASCII Representation for ebm and vol Primitives

    These two primitives did not have an ASCII representation in
    previous releases. This omission has been corrected.

  * Support for MacOS X

    BRL-CAD again supports the MacOS platform. It requires that the
    XDarwin or other X11 server be installed for correct operation.

  * Improved Pro/Engineer Interface

    The converter for Pro/Engineer has been improved and brought up to
    date with Pro/Engineer 2001. Improvements include:

      o  Oriented and non-oriented triangle support.
      o  Unlimited-name-length support.

  * FASTGEN4 Name Extensions

    The FASTGEN4 converter fast4-g now supports names longer than 16
    characters.

  * Improved Hidden-Line Drawing Support

    A new program called rtedge is included for rendering hidden-line
    drawings through a raytracing technique.

  * Software Library for Multiply Referenced Objects

    A C implementation of the Tcl/Tk dual-ported object type is
    included.

  * New Shaders

    Two new shaders flat and invisible are included. The flat shader
    supports per-channel alpha blending.


NEW UTILITIES

pixcmp: This program Compares two pix format images. Although not
technically new (it was formerly included in source distributions),
pixcmp is now installed.

rtedge: This program raytraces models, detects edges, and writes
BRL-CAD color image (.pix) files.

g_diff: This program compares two geometry database files and reports
differences between the two. This allows databases that contain the
same objects in different orders to be recognized as being the same.

dbupgrade: This program upgrades an old BRL-CAD database to the
current BRL-CAD release file format. This allows older geometry to
take advantage of space savings and new functionality only available
with the newer database formats (e.g., convert a database created with
BRL-CAD rel4.5 to one that is fully functional in BRL-CAD rel6.0).


DEVELOPER NOTES

These items are of interest to developers and others who compile
BRL-CAD from a source code distribution:

  + Compile-time optimizations that significantly increase raytrace
    performance (at cost of run-time debugging).

  + Removed dependency on X (and Tk) during source compilation.

  + Consolidated cake build options.

  + MGED db developer command facilities.

  + New and improved regression test suite.

  + Improved ANSI source conformance (still in transition).

  + New general-purpose Bourne-shell-based utility library (part of
    regression suite).  It includes support for file locking,
    semaphores, stdout/stderr/file logging, mail, cvs, packaging, and
    remote-host querying facilities.


DEPRECATED FEATURES

  lgt

    the lgt tool is replaced by the new rtedge tool.

  Redirection of I/O in g2asc and asc2g

    To support the new database file format, it was necessary to
    remove the ability to run g2asc and asc2g on streaming data.


SPECIAL ACKNOWLEDGMENT

This release is the last to introduce new features developed by Mike
Muuss. Mike embodied a unique blend of unparalleled intellect,
unquenchable curiosity, and unending enthusiasm to advance the
capabilities and performance of everything and everyone he touched. He
was the original architect of BRL-CAD and for 20 years guided its
development and emergence as one of the most advanced physically based
computer-aided design packages in the world. His presence and his
abilities will be missed.


----------------------------------------------------------------------
--- 2001-03-05  Release 5.3                                        ---
----------------------------------------------------------------------

Bug fixes.


----------------------------------------------------------------------
--- 2000-08-21  Release 5.2                                        ---
----------------------------------------------------------------------

Bug fixes.


----------------------------------------------------------------------
--- 1999-09-15  Release 5.0                                        ---
----------------------------------------------------------------------

NEW FEATURES

* Modern graphical user interface (GUI)

* Integrated software development medium

* Controllability from other applications

* Dynamic geometry

* Dozens of new utilities (stand-alone programs)

* New application development libraries and reorganization of existing
  libraries

* HTML documentation

* Haar wavelet signal decomposition and reconstruction

* Barycentric combination

* Cascading and time estimation for animation

* projection shading


TCL/TK

Tcl is an embeddable, full-function interpreted command language.  Tk
is a toolkit, based on Tcl, for building user interfaces.  Tcl/Tk was
initially created by John Ousterhout.  The benefits include rapid
development, ease of providing applications a powerful scripting
language, and user convenience.  Tcl is an excellent "glue" language.
Using Tcl/Tk, a windowing shell interface to the BRL-CAD library
routines has been easily afforded.


MGED

The image frame buffer and ray trace rendering is now integrated into
MGED.  This supports disambiguous rendering, registration of geometry
with imported imagery, the ability to visually query individual rays,
and mouse-based edit and render support.  Additionally, MGED sports a
multiple view multipane mode for viewing the same geometry from
various views simultaneously.  Snap-to-grid support is added as is
networked collaboration.

There should now be uniform mouse-based manipulation of both geometry
and the MGED view.  There is a command history and support for
command-line editing.  There are GUI control panels for ray-traced
rendering, animation, color editing, snap-to-grid, angle/distance
cursor control, and setting material properties.


NEW UTILITIES

There is new conversion tools available now for converting BRL-CAD to
ACAD (General Dynamics) for XPATCH, Alias|Wavefront, Compaq (Digital
Equipment) OFF, and VRML.  Likewise, there are tools for converting
Cyberware digitization, NASTRAN, and 3D systems stereolithography
(stl) formats into BRL-CAD geometry.

Using the g_diff command, you can compare .g files and report
differences.  Non-manifold Geometry (NMGs) can be converted to more
simple primitives.  Finally, region ID support has been reorganized.

In the area of image tools, support for the Portable Network Graphics
(PNG) image format has been added.  This includes image conversion and
display.  Likewise, support for the YUV color model has been added.

Database Maintenance

* g_diff: Compare two BRL-CAD models, writing the results of the comparison
  as an mged(1) script to change one model into the other.
* nmg-polysolid: Convert all the NMG solids in a BRL-CAD model into polysolids.
* remapid: Perform batch modifications of region IDs in a BRL-CAD or TANKILL
  model.
* rtweight: Calculate weight, centroid, and volume data for a BRL-CAD model.
* texturescale: Scale a pix(5) stream to map onto a curved solid.

Converters

* cy-g: Convert from Cyberware digitizer output format to BRL-CAD.
* nastran-g: Convert from NASTRAN finite-element format to BRL-CAD.
* stl-g: Convert from 3D Systems stereolithography format to BRL-CAD.
* g-acad: Convert from BRL-CAD to the General Dynamics ACAD format.
* g-off: Convert from BRL-CAD to the DEC (Compaq) Object File Format.
* g-vrml: Convert from BRL-CAD to the Virtual Reality Markup Language
  format.
* g-wave: Convert from BRL-CAD to the Alias|Wavefront format.

Image Support Tools

* any-png.sh: Convert any of various image file formats to the PNG format.
* bw-png: Convert a bw(5) stream to the PNG format.
* fb-png: Save the contents of a frame buffer to a file in the PNG format.
* imgdims: Guess the width and height of an image file from the name of
  and/or number of bytes in the file.
* pixblend: Blend two pix(5) or bw(5) images either randomly or as a weighted
  average.
* pixborder: Add a 1-pixel-wide border to regions in a pix(5) stream of a
  specified color.
* pixclump: Quantize the colors in a pix(5) stream.
* pixcount: Sort the pixels in a pix(5) stream by color value.
* pixdsplit: Disentangle the chars from the doubles in a pixd(5) stream.
* pixmorph: Perform feature-based image metamorphosis between two pix(5)
  files.
* pixsubst: Change the pixels of a specified color in a pix(5) stream to a
  second specified color.
* pix-png: Convert a pix(5) stream to the PNG format.
* pix-yuv: Convert a pix(5) stream to YUV in CCIR-601 format.
* png_info: Display the non-image information found in a PNG stream.
* png-bw: Convert a PNG(5) stream to bw(5) format.
* png-fb: Display a PNG(5) stream on a frame buffer.
* png-pix: Convert a PNG(5) stream to pix(5) format.
* rtsil: Produce a hidden-line silhouette image.
* yuv-pix: Convert a stream in YUV (CCIR-601) format to pix(5) format.

Animation Tools

* anim_cascade: Evaluate movement of one object relative to another.
* anim_time: Estimate appropriate time parameters for a path.

Miscellaneous

* bary: Compute weighted sums (including barymetric combinations) of
  points.
* bwish: BRL-CAD version of wish(1), the Tcl/Tk-based windowing shell.
  Includes functionality of libbn(3), librt(3), etc.
* mst: Construct a minimum spanning tree for an input graph.
* wavelet: Perform Haar wavelet decomposition or reconstruction.


DEPRECATED FEATURES

As BRL-CAD continues to be developed and evolves, various application
programming interfaces (APIs), headers, and data types necessarily
change to fulfill development requirements and to not allow the APIs
to become overly complicated with unnecessary or undesired complexity.
As these changes are forseen, features will be sometimes marked as
deprecated and will usually be made obsolete at some point in the
future.  For those situations, developers using the BRL-CAD libraries
may need to update to new API features in order to link with newer
versions of BRL-CAD.

See the doc/deprecation.txt file for a transcript of features that are
deprecated or have already become obsolete.

---
See doc/history.txt for more historic information on BRL-CAD.  There
is contained information on releases that predate 1999 and the 5.0
release.  The entire history of the project is available through
Subversion revision control on Sourceforge.

NEWS items should be formatted to column 70 (default M-q in Emacs),
use no tabs, and include credits to all significant contributors.
Multiple contributors may be listed on the following line but the
summary description itself should never exceed column 70 or one line.

// Local Variables:
// mode: Text
// fill-column: 70
// End:
blob
data 8956
/*                         A T T R . C
 * BRL-CAD
 *
 * Copyright (c) 2008-2009 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @file attr.c
 *
 * The attr command.
 *
 */

#include <string.h>

#include "ged.h"

int
ged_attr(struct ged *gedp, int argc, const char *argv[])
{
    int			i;
    struct directory	*dp;
    struct bu_attribute_value_set avs;
    struct bu_attribute_value_pair	*avpp;
    static const char *usage = "set|get|show|rm|append} object [args]";

    GED_CHECK_DATABASE_OPEN(gedp, BRLCAD_ERROR);
    GED_CHECK_READ_ONLY(gedp, BRLCAD_ERROR);
    GED_CHECK_ARGC_GT_0(gedp, argc, BRLCAD_ERROR);

    /* initialize result */
    bu_vls_trunc(&gedp->ged_result_str, 0);

    /* must be wanting help */
    if (argc == 1) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_HELP;
    }

    if (argc < 3) {
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);
	return BRLCAD_ERROR;
    }

    /* this is only valid for v5 databases */
    if (gedp->ged_wdbp->dbip->dbi_version < 5) {
	bu_vls_printf(&gedp->ged_result_str, "Attributes are not available for this database format.\nPlease upgrade your database format using \"dbupgrade\" to enable attributes.", (char *)NULL);
	return BRLCAD_ERROR;
    }

    /* Verify that this wdb supports lookup operations
       (non-null dbip) */
    if (gedp->ged_wdbp->dbip == 0) {
	bu_vls_printf(&gedp->ged_result_str, "db does not support lookup operations");
	return BRLCAD_ERROR;
    }

    if ((dp=db_lookup(gedp->ged_wdbp->dbip, argv[2], LOOKUP_QUIET)) == DIR_NULL) {
	bu_vls_printf(&gedp->ged_result_str, "%s does not exist\n", argv[2]);
	return BRLCAD_ERROR;
    }

    bu_avs_init_empty(&avs);
    if (db5_get_attributes(gedp->ged_wdbp->dbip, &avs, dp)) {
	bu_vls_printf(&gedp->ged_result_str, "Cannot get attributes for object %s\n", dp->d_namep);
	return BRLCAD_ERROR;
    }

    if (strcmp(argv[1], "get") == 0) {
	if (argc == 3) {
	    /* just list all the attributes */
	    avpp = avs.avp;
	    for (i=0; i < avs.count; i++, avpp++) {
		bu_vls_printf(&gedp->ged_result_str, "%s {%s} ", avpp->name, avpp->value);
	    }
	} else {
	    const char *val;
	    int do_separators=argc-4; /* if more than one attribute */

	    for (i=3; i<argc; i++) {
		val = bu_avs_get(&avs, argv[i]);
		if ( !val ) {
		    bu_vls_printf(&gedp->ged_result_str,
				  "Object %s does not have a %s attribute\n",
				  dp->d_namep,
				  argv[i]);
		    bu_avs_free(&avs);
		    return BRLCAD_ERROR;
		}
		if (do_separators) {
		    bu_vls_printf(&gedp->ged_result_str, "{%s} ", val);
		} else {
		    bu_vls_printf(&gedp->ged_result_str, "%s", val);
		}
	    }
	}

	bu_avs_free(&avs);
	return BRLCAD_OK;

    } else if ( strcmp( argv[1], "set" ) == 0 ) {
	/* setting attribute/value pairs */
	if ((argc - 3) % 2) {
	    bu_vls_printf(&gedp->ged_result_str,
			  "Error: attribute names and values must be in pairs!!!\n");
	    bu_avs_free(&avs);
	    return BRLCAD_ERROR;
	}

	i = 3;
	while (i < argc) {
	    if(strcmp( argv[i], "region") == 0 && strcmp(argv[i+1], "R") == 0) {
 		dp->d_flags |= DIR_REGION;
 	    }
	    (void)bu_avs_add(&avs, argv[i], argv[i+1]);
	    i += 2;
	}
	if (db5_update_attributes(dp, &avs, gedp->ged_wdbp->dbip)) {
	    bu_vls_printf(&gedp->ged_result_str,
			  "Error: failed to update attributes\n");
	    bu_avs_free(&avs);
	    return BRLCAD_ERROR;
	}

	/* avs is freed by db5_update_attributes() */
	return BRLCAD_OK;
    } else if (strcmp(argv[1], "rm") == 0) {
	i = 3;
	while (i < argc) {
    	    if(strcmp( argv[i], "region") == 0) {
 		dp->d_flags = dp->d_flags & ~(DIR_REGION);
 	    }
	    (void)bu_avs_remove(&avs, argv[i]);
	    i++;
	}
	if (db5_replace_attributes(dp, &avs, gedp->ged_wdbp->dbip)) {
	    bu_vls_printf(&gedp->ged_result_str,
			  "Error: failed to update attributes\n");
	    bu_avs_free(&avs);
	    return BRLCAD_ERROR;
	}

	/* avs is freed by db5_replace_attributes() */
	return BRLCAD_OK;
    } else if ( strcmp( argv[1], "append" ) == 0 ) {
	if ((argc-3)%2) {
	    bu_vls_printf(&gedp->ged_result_str,
			  "Error: attribute names and values must be in pairs!!!\n");
	    bu_avs_free(&avs);
	    return BRLCAD_ERROR;
	}
	i = 3;
	while (i < argc) {
	    const char *old_val;
	    if(strcmp( argv[i], "region") == 0 && strcmp(argv[i+1], "R") == 0) {
 		dp->d_flags |= DIR_REGION;
 	    }
	    old_val = bu_avs_get(&avs, argv[i]);
	    if ( !old_val ) {
		(void)bu_avs_add(&avs, argv[i], argv[i+1]);
	    } else {
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_strcat(&vls, old_val);
		bu_vls_strcat(&vls, argv[i+1]);
		bu_avs_add_vls(&avs, argv[i], &vls);
		bu_vls_free(&vls);
	    }

	    i += 2;
	}
	if (db5_replace_attributes( dp, &avs, gedp->ged_wdbp->dbip)) {
	    bu_vls_printf(&gedp->ged_result_str,
			  "Error: failed to update attributes\n");
	    bu_avs_free(&avs);
	    return BRLCAD_ERROR;
	}

	/* avs is freed by db5_replace_attributes() */
	return BRLCAD_OK;
    } else if ( strcmp( argv[1], "show" ) == 0 ) {
	int max_attr_name_len=0;
	int tabs1=0;

	/* pretty print */
	if ( dp->d_flags & DIR_COMB ) {
	    if ( dp->d_flags & DIR_REGION ) {
		bu_vls_printf( &gedp->ged_result_str, "%s region:\n", argv[2] );
	    } else {
		bu_vls_printf( &gedp->ged_result_str, "%s combination:\n", argv[2] );
	    }
	} else if ( dp->d_flags & DIR_SOLID ) {
	    bu_vls_printf( &gedp->ged_result_str, "%s %s:\n", argv[2],
			   rt_functab[dp->d_minor_type].ft_label );
	} else {
	    switch ( dp->d_major_type ) {
		case DB5_MAJORTYPE_ATTRIBUTE_ONLY:
		    bu_vls_printf( &gedp->ged_result_str, "%s global:\n", argv[2] );
		    break;
		case DB5_MAJORTYPE_BINARY_EXPM:
		    bu_vls_printf( &gedp->ged_result_str, "%s binary(expm):\n", argv[2] );
		    break;
		case DB5_MAJORTYPE_BINARY_MIME:
		    bu_vls_printf( &gedp->ged_result_str, "%s binary(mime):\n", argv[2] );
		    break;
		case DB5_MAJORTYPE_BINARY_UNIF:
		    bu_vls_printf( &gedp->ged_result_str, "%s %s:\n", argv[2],
				   binu_types[dp->d_minor_type] );
		    break;
	    }
	}
	if ( argc == 3 ) {
	    /* just display all attributes */
	    avpp = avs.avp;
	    for ( i=0; i < avs.count; i++, avpp++ ) {
		int len;

		len = strlen( avpp->name );
		if ( len > max_attr_name_len ) {
		    max_attr_name_len = len;
		}
	    }
	    tabs1 = 2 + max_attr_name_len/8;
	    avpp = avs.avp;
	    for ( i=0; i < avs.count; i++, avpp++ ) {
		const char *c;
		int tabs2;
		int k;
		int len;

		bu_vls_printf( &gedp->ged_result_str, "\t%s", avpp->name );
		len = strlen( avpp->name );
		tabs2 = tabs1 - 1 - len/8;
		for ( k=0; k<tabs2; k++ ) {
		    bu_vls_putc( &gedp->ged_result_str, '\t' );
		}
		c = avpp->value;
		while ( *c ) {
		    bu_vls_putc( &gedp->ged_result_str, *c );
		    if ( *c == '\n' ) {
			for ( k=0; k<tabs1; k++ ) {
			    bu_vls_putc( &gedp->ged_result_str, '\t' );
			}
		    }
		    c++;
		}
		bu_vls_putc( &gedp->ged_result_str, '\n' );
	    }
	} else {
	    const char *val;
	    int len;

	    /* show just the specified attributes */
	    for ( i=0; i<argc; i++ ) {
		len = strlen( argv[i] );
		if ( len > max_attr_name_len ) {
		    max_attr_name_len = len;
		}
	    }
	    tabs1 = 2 + max_attr_name_len/8;
	    for (i=3; i<argc; i++) {
		int tabs2;
		int k;
		const char *c;

		val = bu_avs_get(&avs, argv[i]);
		if (!val) {
		    bu_vls_printf(&gedp->ged_result_str,
				  "Object %s does not have a %s attribute\n",
				  dp->d_namep,
				  argv[i]);
		    bu_avs_free(&avs);
		    return BRLCAD_ERROR;
		}
		bu_vls_printf(&gedp->ged_result_str, "\t%s", argv[i]);
		len = strlen(val);
		tabs2 = tabs1 - 1 - len/8;
		for (k=0; k<tabs2; k++) {
		    bu_vls_putc(&gedp->ged_result_str, '\t');
		}
		c = val;
		while (*c) {
		    bu_vls_putc(&gedp->ged_result_str, *c);
		    if (*c == '\n') {
			for (k=0; k<tabs1; k++) {
			    bu_vls_putc(&gedp->ged_result_str, '\t');
			}
		    }
		    c++;
		}
		bu_vls_putc(&gedp->ged_result_str, '\n');
	    }
	}

	return BRLCAD_OK;
    } else {
	bu_vls_printf(&gedp->ged_result_str, "ERROR: unrecognized attr subcommand %s\n", argv[1]);
	bu_vls_printf(&gedp->ged_result_str, "Usage: %s %s", argv[0], usage);

	return BRLCAD_ERROR;
    }


    return BRLCAD_OK;
}


/*
 * Local Variables:
 * tab-width: 8
 * mode: C
 * indent-tabs-mode: t
 * c-file-style: "stroustrup"
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
