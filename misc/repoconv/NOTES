NOTE:  When generating lists of git commits to compare against an SVN list, do so *before*
archiving the branches that aren't active in SVN.  The git logging mechanisms will ignore
commits now active only in the history of the tag that has archived the branch, and will
look like "dropped" commits in a comparison.  The below script is an attempt to get a
better list:

#!/bin/sh
# Use a trick from https://stackoverflow.com/a/47947423
git cat-file --batch-check --batch-all-objects |grep commit | awk '{print "git log -1 --pretty=format:\"%H %s%n\" " $1}' > print_all_msgs.sh
bash print_all_msgs.sh > all_msgs.txt
cat all_msgs.txt|grep -v Note\ SVN\ revision > all_non_note_msgs.txt
awk '{print "git log -1 --pretty=format:\"GITMSG%n%H,%ct +0000,%B%nGITMSGEND%n\" " $1}' all_non_note_msgs.txt > print_msgs.sh
bash print_msgs.sh > git.log
rm print_all_msgs.sh all_msgs.txt all_non_note_msgs.txt print_msgs.sh
#rm all_msgs.txt all_non_note_msgs.txt

(Also worth noting - preliminary move commits have the same timestamp as their
child commit, so they get chosen as that timestamp's commit line and the
subsequent (identical) commit with it's message doesn't make the list.  The
commits are there, but not (currently) written out by the svn_msg.cxx code...)

The following command will be useful:

git fsck --lost-found

A git show on the resulting sha1 objects (or at least the commit objects) will identify
problems we might have introduced.  When doing archive_branches.sh, do so on a copy and
then run the above command.  See what has been lost (a preliminary test shows a number
of dangling commits and blobs) and figure out what we should do instead to avoid having
them become dangling.  I suspect (but haven't proven yet) that the ambiguous naming warnings
from that script mean we archived the tag commit and not the actual branch commit - probably
need to do full specification of refs/heads in the archiving script so we don't grab the
tags instead:  https://softwareengineering.stackexchange.com/a/378232


NOTE:  When building new logic with Git, we're assuming a modern version (work is being done with
2.17.1.)  1.7 is known to be too old for most of the git notes based tricks below to work, and
it's likely that other features used in distcheck will prompt either a version based test or
some kind of feature check to make sure a new enough git is present on the system for things
to function as expected.


TODO:  We'll need to look at protecting branches from deletion, i.e.
https://help.github.com/en/articles/configuring-protected-branches
https://gist.github.com/pixelhandler/5718585
https://stackoverflow.com/questions/48381923/how-can-i-prevent-deletion-of-remote-branches-in-pure-git
https://stackoverflow.com/questions/19293222/how-to-prevent-remote-branch-deletion-in-git-without-using-gitolite

May also want style-based enforcement at some point:
https://github.com/barisione/clang-format-hooks
https://github.com/mellowcandle/astyle_precommit_hook
https://github.com/Sarcasm/run-clang-format

Possibly useful notes for OSX/Windows users:
https://stackoverflow.com/questions/8904327/case-sensitivity-in-git


################# .gitconfig helpers ###################

Here is a simple way to use notes with svn revision numbers to checkout a specific revision:

git log --all --pretty=format:"%H %N" --grep svn:revision:29886|awk '{system("git checkout "$1)}'

To make this easier, add the following alias to your .gitconfig file:

	svnrev = "!f() { \
		if [ x$1 != x ] ; then \
                   REVSHA1=\"$(git log --all --pretty=format:\"%H %N\" --grep svn:revision:$1$)\"; \
                   REVSHA1N=$(echo $REVSHA1 | awk '{print $1}'); \
                   if [ x$REVSHA1N != x ] ; then \
                      git checkout $REVSHA1N; \
		   else \
		      echo Unknown revision number: $1; \
		   fi; \
		else \
		   echo Need revision number; \
		fi; \
		}; f"

With that alias in place, the command "git svnrev 29886" will check out the git
commit with a not matching the pattern "svn:revision:29886"


In svn, we can svn log in a particular branch checkout to see the history
specific to that branch, but this is apparently a challenge in git.  The
following logic added to your .gitconfig defines a logb command that will list
commits unique to either the currently checked out branch (if you don't supply
a branch name) or the specified branch if you specify one. (This packages up
the tricks from https://stackoverflow.com/q/14848274 and
https://stackoverflow.com/a/12142066)

        logb = "!f() { \
                if [ x$1 != x ] ; then \
                   CURRBRANCH=$1; \
                else \
                   CURRBRANCH=\"$(git rev-parse --abbrev-ref HEAD)\"; \
                fi; \
                HAVEBRANCH=$(git rev-parse --verify --quiet $CURRBRANCH); \
                HAVEABRANCH=$(git rev-parse --verify --quiet archived/$CURRBRANCH); \
		if [ -z $HAVEBRANCH ] && [ ! -z $HAVEABRANCH ] ; then \
                   echo \"Branch $CURRBRANCH is not current - to see archived branch history, specify archived/$CURRBRANCH\" ; \
                else \
                   git log $CURRBRANCH --not $(git for-each-ref --format='%(refname)' refs/heads/ | grep -v \"refs/heads/$CURRBRANCH\"); \
                fi ; \
                }; f"

The above report is limited by git's knowledge of branch history, which will not
always match SVN's (the history of the bullet branch is an example).  To print
the SVN record of the branch, use the following alias:

        logsvnb = "!f() { \
                if [ x$1 != x ] ; then \
                   CURRBRANCH=$1; \
                else \
                   CURRBRANCH=\"$(git rev-parse --abbrev-ref HEAD)\"; \
                fi; \
                git log --all --show-notes --grep=\"svn:branch:$CURRBRANCH$\"; \
                }; f"


############  Other useful tips ##############

Many (most?) of BRL-CAD's commit messages are long one liners - it turns out gitk does have
the ability to word wrap, but (why???) it isn't on by default.  We'll want to advise users
to enable it, per https://stackoverflow.com/questions/35017472/enabling-word-wrap-in-gitk-for-commit-message-display-on-a-mac

May want to investigate conditional includes as well so we can pre-package a repo specific .gitconfig:
https://git-scm.com/docs/git-config#_conditional_includes


# Overview with all branches:

# gitk --branches="*"

# Nifty trick for getting commit counts per committer (https://stackoverflow.com/a/9839491)
# git shortlog -s -n --branches="*"

# Good way to get a quick overview of branch/tag structure:
# tig --all --simplify-by-decoration

###################################
In case this comes up again, here's a quick and dirty way to do a mapping of a bunch of
sha1s between two different git repos based on msg and date:

#!/bin/bash

domap() {
cd /home/user/git_old
MSG=$(git show --quiet --format="%s" $1)
DATE=$(git show --quiet --format="%ct" $1)
cd /home/user/git_new
SHA1=$(git log --all --grep="$MSG\$" --grep="$DATE" --format="%H")
echo "sed -i 's/$1/$SHA1/g' r29886_tags.fi"
}

declare -a sha1s=(
"6732b3ae04ea2efc14b078cff0c4bafd54efaf8b"
"da31186d8e2a3b92db134ab8d019b1ba96a16c52"
"9fcde9ce909dfb745235f8c1e6021f2e43a94cc4"
"33e9ae26d687d71b25601afcf7ffd500af68e0f4"
"6e6cf502a373c6c639b76934a98d9c6ecef079e7"
"df641bc5f9400aaf8a4aa93bfa781a4320a2d752"
"87cdad2ab128136256105f210e91fcf9246243f8"
"79e0e9e6a12fa4f43c5cf6c607893a1c4cc53da5"
"987cf38059e773ebd26eb351a297d8318800eb46"
"18c827233a7282210847cda19cc4a1dea23599be"
"a932994f52048fbff85d7ff62d00880b4cc458b8"
"6bf536c2ced667a12cc226e57a567dd087cd67a4"
"1fe06f06690355b9446a31d719dd5676a1fc844d"
"42b88fa150eace692392c4a07b3b7a7c1aae5692"
"e7226d2d397d2f552b7f499eaf002d9036d7e0c5"
"5adcdd001341a7b7bce7e73f6825f9aa82aee2f7"
"abaab6bf19c3c10cc0d1034f3011cfc463e10cfa"
"a857b8dfeeec0590dfeab4186c8b3c86c9f80459"
"eaea736df6cee415c2a76b1eb2b964af535d1106"
"c7f6ae9cc7d551bc87a1e02fb0f6de387aa4ee50"
"0918f518b576627e77e77ba41394f3029ed6606f"
"80aa3aaac21e35cd287c0f6a9dfe489985104ab7"
"490ed3f06e580c2fa93b0da10f8f8571df294b14"
"8772453ce94aed34d41a87938e8ceefd1e6161ec"
"fa845175e9688286bfaf7c0cd3d7b31183386487"
"1d688c3a19888ef35c7ad1ae620e38e0dba204a1"
"f66a5f63f53a78e1829b14dd3628fe1356a7e5fb"
"104c01519ca221dd6753fad3eaa5a1eddcc12b46"
"cee2208afebf8432eadf59710a92fabfe970c48a"
"2141b80a296f8500ad17896cd97b9b13b3b3631b"
"d5533368993ba74bf1b1b5c6265aab8f227f88d5"
"eb233faf9e1d1226a76f7f0d036a03fd66ae72cf"
"12a73c2c8686eda051792f5ed3c99468abea96ce"
"2ce9de0729ad5673d0a90cc06328c9dcffbb5aea"
"3e35a93c3b6b556cd678e5ec6aa3de16c154f4fb"
"1d5155b104c7e13b77889e7b1be73af9df5fc799"
"805298a25a1f52fe6027dda56015c54f14394209"
"fc6ac13d4adc62d82ae3278823cbbcfb1ab4812f"
"086b7d8c76e46feaf5f27d25d990732c5f99f946"
"2bc3da857e3fd101b160e0b28a2528284367c0a9"
"6a18e97c7b36a52ecb28aaf9d289e2e89acca098"
"856085985385b7f1d7b628a50c36cf31d2174c54"
"dea30720435ffe7928c02d342ab7bef14bad7a14"
"5cad31095ee56812d2cff4d2eb14731190a85e61"
"c7c0956ae4e68ef447584d8e3217b0f7db2bc6f4"
"33c113c3e284430c40b55ea34f85dccee1825705"
"8ded46c9bfc0612519ab8d416c70e0f43677af8a"
"febf9c84017e2219f0a92fd8c11c535722d7d520"
"d159b8291d89327221d8aad9c863fdc2132bef51"
"442e13f0f8368acda7cb7a5a7f658a1fd2788fcc"
"83e80bfee05799bfac089d3969c18b2ab00b6c29"
"b347d4a1c0085d0e7b659c55b05fd70b94dd09bf"
"d7fe11aa96b174798a340e8e8b709d5a7a3f5bbc"
"aecd2750fc895d538df9028458a1adde2668d7a9"
)

for i in "${sha1s[@]}"
do
	domap $i
done


###########################################################################
Sean inquired with the Git list, and per Jeff King there may be a way to
preserve notes across a filter branch operation, which is something we
will need/want if we ever have to apply filter-branch to the converted
repository:

https://marc.info/?l=git&m=156653998201710

# Sigh... It seems the (maybe?) in an old commit name causes
# problems for https://github.com/tomgi/git_stats - may need
# to do something along the lines of https://stackoverflow.com/a/28845565
# with https://stackoverflow.com/a/41301726 and https://stackoverflow.com/a/38586928
# thrown in...
#
# Note: experiment only on a COPY doing this rewrite - it is destructive!!!
#
# Also note:  Once you do the below step, svnfexport cannot incrementally update
# the repository.  Most of the sha1 hashes will be wrong.  Do this sort of thing ONLY as the
# final step BEFORE the git repository becomes live and AFTER the SVN history is frozen.
#
# git config notes.rewriteRef refs/notes/commits  (see https://stackoverflow.com/a/43785538)
# git checkout 7cffbab2a734e3cf
# GIT_COMMITTER_DATE="Fri Oct 3 06:46:53 1986 +0000" git commit --amend --author "root <root>" --date="Fri Oct 3 06:46:53 1986 +0000"
# git checkout master
# git replace 7cffbab2a73 e166ad7454
# git filter-branch \
           --commit-filter '
		commit=$(git commit-tree "$@")
		git notes copy $GIT_COMMIT $commit
		echo $commit
	  ' \
           --tag-name-filter cat \
           --env-filter 'export GIT_COMMITTER_DATE="$GIT_AUTHOR_DATE"' -- --all
# git replace -d 7cffbab2a734e3cf



################################################################################

Uploading to github:

After creating a new repository via the github website:

git remote add origin git@github.com:brlcad/brlcad.git
git push -u origin master
git push --all
git push --tags
git push origin refs/notes/commits

# We then download it back from github:
git clone git@github.com:brlcad/brlcad.git
cd brlcad
# Verify all the branches and tags are there:
git branch -a
git tag
#When cloning the repo from github, you also have to manually fetch the notes:
git fetch origin refs/notes/commits:refs/notes/commits

To make this automatic, add a section to your .git/config:
https://gist.github.com/topheman/ec8cde7c54e24a785e52

# To pull a backup, use --mirror (this seems to get the notes):
git clone --mirror git@github.com:brlcad/brlcad.git

