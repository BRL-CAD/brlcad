# This file defines Continuous Integration (CI) tests for BRL-CAD using the
# Github Actions framework that are executed each time a commit is pushed.
# Currently it defines configurations for Windows, Linux and OSX.
#
# For more information about available platforms for testing, see:
#
# https://docs.github.com/en/free-pro-team@latest/actions/reference/specifications-for-github-hosted-runners
#
# The general rule when building in CI is to go more verbose in output settings
# rather than less, since iterative debugging isn't practical.  We also want to
# avoid parallel building - while that will sometimes catch dependency issues,
# it also makes the outputs far harder to interpret when there is a problem.
# Better to do parallel build debugging in an environment were more interactive
# and iterative debugging is available while preserving the readability of the
# CI outputs for other issues.

name: Per-push

on:
  push:

jobs:

  linux:
    name: Ubuntu GCC
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    env:
      DEBIAN_FRONTEND: noninteractive
    if: github.event_name == 'push'
    steps:
      - name: Setup - CMake
        uses: lukka/get-cmake@latest

      # Cache apt package downloads (not installed pkgs)
      - name: Cache apt packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/push.yml') }}

      # Install system dependencies
      - name: Install apt dependencies
        run: |
          sudo apt-get update
          # Install X/OpenGL dev pkgs
          sudo apt-get install xserver-xorg-dev libx11-dev libxi-dev libxext-dev libglu1-mesa-dev libfontconfig-dev
          # Install tools
          sudo apt-get install astyle re2c xsltproc libxml2-utils
          # Install dependency dev pkgs
          sudo apt-get install zlib1g-dev libpng-dev libjpeg-dev libtiff-dev libeigen3-dev libgdal-dev libassimp-dev libopencv-dev tcl-dev tk-dev
          # Install XCB/OpenGL dev pkgs for Qt - see:
          # https://wiki.qt.io/Building_Qt_6_from_Git
          # https://doc.qt.io/qt-6/linux-requirements.html
          sudo apt-get install libfontconfig1-dev libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libxcb-cursor-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev libxcb-util-dev libxcb-xinerama0-dev libxcb-xkb-dev libxcb-xinput-dev libxcb-xrm-dev libxkbcommon-dev libxkbcommon-x11-dev
          sudo apt-get install libgl-dev
          sudo apt-get install libinput-dev

      # Prepare bext cache key
      - name: Clone bext
        run: git clone https://github.com/BRL-CAD/bext.git

      - name: Get bext commit SHA
        id: bext-sha
        run: |
          cd bext
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Compute bext cache discriminator
        id: cachekey
        shell: bash
        run: |
          info="${{ steps.bext-sha.outputs.sha }}-$(uname -s)-$(uname -r)-$(gcc --version | head -n 1)"
          echo "hash=$(echo -n "$info" | sha1sum | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Cache bext build outputs
        id: cache-bext
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/bext_output
          key: ${{ runner.os }}-bext-${{ steps.cachekey.outputs.hash }}

      - name: Build bext (if cache miss)
        if: steps.cache-bext.outputs.cache-hit != 'true'
        run: |
          cmake -E make_directory bext_build
          cmake -S bext -B bext_build -DCMAKE_BUILD_TYPE=Release -DENABLE_ALL=ON -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/bext_output
          cmake --build bext_build --config Release -j 2
          cmake -E rm -rf bext
          cmake -E rm -rf bext_build

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: brlcad

      - name: Directory setup
        run: |
          cmake -E make_directory ./build_linux
          cmake -E make_directory $HOME/.cache
          cmake -E make_directory $HOME/.cache/BRL-CAD

      - name: Configure
        run: |
          export PATH=$GITHUB_WORKSPACE:$PATH
          cmake -S brlcad -B build_linux -G Ninja -DCMAKE_BUILD_TYPE=Release -DBRLCAD_EXT_DIR=${{ github.workspace }}/bext_output -DBRLCAD_ENABLE_QT=ON

      - name: Build
        id: build_parallel
        run: |
          export PATH=$GITHUB_WORKSPACE:$PATH
          cmake --build build_linux --config Release --target check -j2
          cmake --build build_linux --config Release --target package -j2
        continue-on-error: true

      - name: Build (serial for diagnostics)
        if: steps.build_parallel.outcome == 'failure'
        run: |
          export PATH=$GITHUB_WORKSPACE:$PATH
          cmake --build build_linux --config Release --target check
          cmake --build build_linux --config Release --target package

  # A full distcheck is too expensive for the runners, but we can run the
  # repository integrity check and make sure we can build source archives.
  archives:
    name: Source Archives
    runs-on: ubuntu-latest
    needs: [linux]
    strategy:
      fail-fast: true
    env:
      DEBIAN_FRONTEND: noninteractive
    if: github.event_name == 'push'
    steps:
      - name: Setup - CMake
        uses: lukka/get-cmake@latest

      - name: Cache apt packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/push.yml') }}

      - name: Setup - System
        run: |
          sudo apt-get update
          # Install X/OpenGL dev pkgs
          sudo apt-get install xserver-xorg-dev libx11-dev libxi-dev libxext-dev libglu1-mesa-dev libfontconfig-dev
          # Install tools
          sudo apt-get install astyle re2c xsltproc libxml2-utils
          # Install dependency dev pkgs
            # (Kept consistent with other jobs to ensure dist targets succeed)
          sudo apt-get install zlib1g-dev libpng-dev libjpeg-dev libtiff-dev libeigen3-dev libgdal-dev libassimp-dev libopencv-dev tcl-dev tk-dev

      - name: Clone bext
        run: git clone https://github.com/BRL-CAD/bext.git

      - name: Get bext commit SHA
        id: bext-sha
        run: |
          cd bext
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Compute bext cache discriminator
        id: cachekey
        shell: bash
        run: |
          info="${{ steps.bext-sha.outputs.sha }}-$(uname -s)-$(uname -r)-$(gcc --version | head -n 1)"
          echo "hash=$(echo -n "$info" | sha1sum | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Cache bext build outputs
        id: cache-bext
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/bext_output
          key: ${{ runner.os }}-bext-${{ steps.cachekey.outputs.hash }}

      - name: Build bext (if cache miss)
        if: steps.cache-bext.outputs.cache-hit != 'true'
        run: |
          cmake -E make_directory bext_build
          cmake -S bext -B bext_build -DCMAKE_BUILD_TYPE=Release -DENABLE_ALL=ON -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/bext_output
          cmake --build bext_build --config Release -j2
          rm -rf bext
          rm -rf bext_build

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: brlcad

      - name: Build
        run: |
          cmake -E make_directory build_archives
          cmake -S brlcad -B build_archives -DCMAKE_BUILD_TYPE=Release -DBRLCAD_EXT_PARALLEL=1 -DBRLCAD_EXT_DIR=${{ github.workspace }}/bext_output
          cmake --build build_archives --config Release --target distcheck-source_archives

  windows:
    name: MSVC - Ninja
    runs-on: windows-latest
    strategy:
      fail-fast: true
    if: github.event_name == 'push'
    steps:
      - name: Setup - CMake
        uses: lukka/get-cmake@latest

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Add cl.exe to PATH
        uses: ilammy/msvc-dev-cmd@v1

      - name: Add github workspace to path
        shell: pwsh
        run: Add-Content -Path $env:GITHUB_PATH -Value $env:GITHUB_WORKSPACE

      - name: Clone bext
        # Note - this will not check out any of the submodules unless we need
        # them for building, so it should be a very small disk space hit.
        # Consequently, we don't worry about deleting it unless we end up
        # having to build it.  The bext source directory is not one of the
        # cached directories, so a straight git clone is fine - no need to
        # worry about colliding with a previous clone.
        run: git clone https://github.com/BRL-CAD/bext.git

      - name: Get bext commit SHA
        id: bext-sha
        shell: powershell
        run: |
          cd bext
          echo "sha=$(git rev-parse HEAD)" >> $env:GITHUB_OUTPUT

      - name: Compute bext cache discriminator
        id: cachekey
        shell: bash
        run: |
          clver=""
          if command -v cl.exe &> /dev/null; then
            clver="$(cl.exe 2>&1 | head -n 1)"
          fi
          info="${{ steps.bext-sha.outputs.sha }}-$(uname -s)-$(uname -r)-$clver"
          echo "hash=$(echo -n "$info" | sha1sum | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Cache bext build outputs
        id: cache-bext
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}\bext_output
          key: windows-bext-${{ steps.cachekey.outputs.hash }}

      - name: Build bext (if cache miss)
        if: steps.cache-bext.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cmake -E make_directory bext_build
          cmake -S bext -B bext_build -DCMAKE_BUILD_TYPE=Release -DENABLE_ALL=ON -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}\bext_output
          cmake --build bext_build --config Release -j2
          # If we have had to build, the submodules are populated and the build
          # directory will have a lot in it.  We only need the build ouputs
          # (bext_output) after this point, so clean up to save space for the
          # main BRL-CAD build.
          cmake -E rm -rf bext
          cmake -E rm -rf bext_build

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: brlcad

      - name: Build Directory setup
        run: cmake -E make_directory ./build_winninja

      - name: Configure
        shell: powershell
        run: |
          cmake -S brlcad -B build_winninja -G Ninja -DCMAKE_C_COMPILER="cl.exe" -DCMAKE_CXX_COMPILER="cl.exe" -DBRLCAD_EXT_DIR=${{ github.workspace }}\bext_output -DCMAKE_BUILD_TYPE=Release -DBRLCAD_ENABLE_QT=ON

      - name: Build
        id: build_parallel
        shell: powershell
        run: |
          ninja
        working-directory: ${{ github.workspace }}/build_winninja
        continue-on-error: true

      - name: Build (serial for diagnostics)
        if: steps.build_parallel.outcome == 'failure'
        shell: powershell
        run: |
          ninja -j1 -v
        working-directory: ${{ github.workspace }}/build_winninja

      - name: Check
        shell: powershell
        run: |
          ninja check -v
        working-directory: ${{ github.workspace }}/build_winninja

      - name: Package
        shell: powershell
        run: |
          ninja package
        working-directory: ${{ github.workspace }}/build_winninja

  windows_std_tools:
    name: MSVC - Standard Tools
    needs: [windows]
    runs-on: windows-latest
    strategy:
      fail-fast: true
    if: github.event_name == 'push'
    steps:
      - name: Setup - CMake
        uses: lukka/get-cmake@latest

      - name: Clone bext
        # Note - this will not check out any of the submodules unless we need
        # them for building, so it should be a very small disk space hit.
        # Consequently, we don't worry about deleting it unless we end up
        # having to build it.  The bext source directory is not one of the
        # cached directories, so a straight git clone is fine - no need to
        # worry about colliding with a previous clone.
        #
        # In theory we could rely on the windows Ninja test for this, since we
        # depend on it, but we define each test to be potentially stand-alone
        # in case we end up removing the other windows test(s) for any reason.
        run: git clone https://github.com/BRL-CAD/bext.git

      - name: Get bext commit SHA
        id: bext-sha
        shell: pwsh
        run: |
          cd bext
          echo "sha=$(git rev-parse HEAD)" >> $env:GITHUB_OUTPUT

      - name: Compute bext cache discriminator
        id: cachekey
        shell: bash
        run: |
          clver=""
          if command -v cl.exe &> /dev/null; then
            clver="$(cl.exe 2>&1 | head -n 1)"
          fi
          info="${{ steps.bext-sha.outputs.sha }}-$(uname -s)-$(uname -r)-$clver"
          echo "hash=$(echo -n "$info" | sha1sum | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Cache bext build outputs
        id: cache-bext
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}\bext_output
          key: windows-bext-${{ steps.cachekey.outputs.hash }}

      - name: Build bext (if cache miss)
        # Note - most of windows_std_tools builds using cmd and avoids ninja,
        # but for the bext build if we need to do it) we want to match the
        # behavior of the ninja build so we have consistent inputs.
        if: steps.cache-bext.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cmake -E make_directory bext_build
          cmake -S bext -B bext_build -DCMAKE_BUILD_TYPE=Release -DENABLE_ALL=ON -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}\bext_output
          cmake --build bext_build --config Release -j2
          # If we have had to build, the submodules are populated and the build
          # directory will have a lot in it.  We only need the build ouputs
          # (bext_output) after this point, so clean up to save space for the
          # main BRL-CAD build.
          cmake -E rm -rf bext
          cmake -E rm -rf bext_build

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: brlcad

      - name: Build Directory setup
        run: |
          cmake -E make_directory ./build_winstd

      - name: Configure
        shell: cmd
        run: |
          call "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          cmake -S brlcad -B build_winstd -DBRLCAD_EXT_PARALLEL=1 -DBRLCAD_BUNDLED_LIBS=Bundled -DCMAKE_BUILD_TYPE=Release -DBRLCAD_EXT_DIR=%GITHUB_WORKSPACE%\bext_output -DBRLCAD_ENABLE_QT=ON

      - name: Build
        id: build_parallel
        shell: cmd
        run: |
          call "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          cmake --build build_winstd --config Release -j2
        continue-on-error: true

      - name: Build (serial for diagnostics)
        if: steps.build_parallel.outcome == 'failure'
        shell: cmd
        run: |
          cmake --build build_winstd --config Release mged

      - name: Check
        shell: cmd
        run: |
          call "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          cmake --build build_winstd --config Release --target check -j2

      - name: Package
        shell: cmd
        run: |
          call "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          cmake --build build_winstd --config Release --target package -j2

  osx:
    name: macOS Clang
    needs: [linux]
    runs-on: macos-14
    strategy:
      fail-fast: true
    steps:
      - name: Setup - CMake
        uses: lukka/get-cmake@latest

      - name: Install Xquartz
        run: |
          brew install xquartz --cask

      - name: Clone bext
        run: git clone https://github.com/BRL-CAD/bext.git

      - name: Get bext commit SHA
        id: bext-sha
        run: |
          cd bext
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Compute bext cache discriminator
        id: cachekey
        shell: bash
        run: |
          xcodever="$(xcodebuild -version | head -n 1 | awk '{print $2}')"
          clangver="$(clang --version | head -n 1)"
          info="${{ steps.bext-sha.outputs.sha }}-$(uname -s)-$(uname -r)-$xcodever-$clangver"
          echo "hash=$(echo -n "$info" | sha1sum | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Cache bext build outputs
        id: cache-bext
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/bext_output
          key: macos-bext-${{ steps.cachekey.outputs.hash }}

      - name: Build bext (if cache miss)
        if: steps.cache-bext.outputs.cache-hit != 'true'
        run: |
          cmake -E make_directory bext_build
          export CC=clang
          export CXX=clang++
          # Right now on OSX we need ENABLE_ALL, because Mac system Tcl/Tk won't work
          cmake -S bext -B bext_build -DENABLE_ALL=ON -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/bext_output -DCMAKE_BUILD_TYPE=Release
          cmake --build bext_build -j 2
          cmake -E rm -rf bext
          cmake -E rm -rf bext_build

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: brlcad

      - name: Build Directory setup
        run: |
          cmake -E make_directory build_osx
          cmake -E make_directory $HOME/.cache
          cmake -E make_directory $HOME/.cache/BRL-CAD

      - name: Configure
        run: |
          export PATH=$GITHUB_WORKSPACE:$PATH
          export CC=clang
          export CXX=clang++
          cmake -S brlcad -B build_osx -DCMAKE_BUILD_TYPE=Release -DBRLCAD_EXT_DIR=${{ github.workspace }}/bext_output -DBRLCAD_ENABLE_QT=ON

      - name: Build
        id: build_parallel
        run: |
          export PATH=$GITHUB_WORKSPACE:$PATH
          make -j2
        working-directory: ${{ github.workspace }}/build_osx
        continue-on-error: true

      - name: Build (serial for diagnostics)
        if: steps.build_parallel.outcome == 'failure'
        run: |
          make
        working-directory: ${{ github.workspace }}/build_osx

      - name: Check
        run: |
          export PATH=$GITHUB_WORKSPACE:$PATH
          make check
        working-directory: ${{ github.workspace }}/build_osx

      - name: Package
        run: |
          export PATH=$GITHUB_WORKSPACE:$PATH
          make package
        working-directory: ${{ github.workspace }}/build_osx
