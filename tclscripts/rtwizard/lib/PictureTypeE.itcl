#
# PictureTypeE.itcl
#
# This class defines the process necessary to build a BRL-CAD
# picture of Type "E". This is a ghost image with a full-color
# insert.
#

#
# Required packages
#
package require Itcl
package require Itk
package require Iwidgets 3.0

namespace eval RtWizard {
  
    package provide PictureTypeE 1.0

    #
    # Required packages
    #

    # None!

    #
    # The PictureTypeE class supports making a ghost view image overlayed
    # with a full-color insert.
    #
    ::itcl::class PictureTypeE {
	inherit ::RtWizard::PictureTypeBase
	public {
	    constructor {args} {
		PictureTypeBase::constructor $args
	    } {}

	    #
	    # Methods that impliment abstract base class methods.
	    # Unfortunately, I have to redeclare them here. 
	    #
	    method activate {}
	    method deactivate {}
	    method preview {}
	    method fullSize {}
	}

	private {
	    method makeImage {fb w h}

	    variable gp
	    variable fp
	}

    }

    #--------------------#
    #   Public Methods   #
    #--------------------#    
    #
    # activate - called when this picture type is selected.
    #
    itcl::body PictureTypeE::activate { } {
	#
	# Open a new steps menu
	#
	$::wizardInstance openSteps

	#
	# Update the introductory text
	#
	$::introInstance configure -greeting "$introText"

	#
	# Activate the pages that are necessary for this picture
	# type.
	#
	set gp [$::wizardInstance enable ghost]
	set fp [$::wizardInstance enable fullColor]
	[$gp component useMe] select
    }

    #
    # deactivate - called when this picture type is deselected.
    #
    itcl::body PictureTypeE::deactivate { } {
	#
	# Deactivate the pages.
	#
	$::wizardInstance disable ghost
	$::wizardInstance disable fullColor

	#
	# Close the current steps menu
	#
	$::wizardInstance closeSteps
    }

    #
    # preview - generates a 1/4 size preview image, limited to on-screen
    #
    itcl::body PictureTypeE::preview { } {
	#
	# get height and width
	#
	set w [$::fbp getWidth]
	set w2 [ expr $w / 2 ]

	set h [$::fbp getHeight]
	set h2 [ expr $h / 2 ]

	#	
	# get a framebuffer
	#
	set fb [$::fbp getFrameBuffer $w2 $h2 true]

	#
	# Run rt to generate the ghost image objects
	#
	makeImage $fb $w2 $h2
    }    
    
    #
    # fullSize - generates a fullSize picture.
    #
    itcl::body PictureTypeE::fullSize { } {
	#
	# get height and width
	#
	set w [$::fbp getWidth]
	set h [$::fbp getHeight]

	#	
	# get a framebuffer
	#
	set fb [$::fbp getFrameBuffer $w $h false]

	#
	# Run rt
	#
	makeImage $fb $w $h
    }

    #
    # makeImage
    #
    itcl::body PictureTypeE::makeImage {fb w h} {

	set tgi [file join / tmp [pid]_ghost.pix]
	set tfci [file join / tmp [pid]_fc.pix]
	set tmi [file join / tmp [pid]_merge.pix]
	set tbw [ file join / tmp [pid]_bw.bw ]
	set tmod [ file join / tmp [pid]_bwmod.bw ]
	set tbwpix [ file join / tmp [pid]_bwpix.pix]
	
	#
	# Get the background color
	#
	set bgHex [$fp getBackgroundColor]
	set bg [hexToRGB $bgHex]
	set bgl "=[lindex $bg 0]/[lindex $bg 1]/[lindex $bg 2]"

	#
	# Get the gamma
	#
	set gamma 12 ; #[$gp getIntensity]

	#
	# Run rt to generate the full-color version of the ghost image
	#
	rtCmd $gp $fb $w $h

	catch "exec fb-pix -F $fb -w $w -n $h > $tgi" junk
	
	#
	# Run rt to generate the insert
	#
	rtCmd $fp $fb $w $h
	catch "exec fb-pix -F $fb -w $w -n $h > $tfci" junk

	#
	# Convert to ghost image
	#
	catch "exec pix-bw $tgi > $tbw" junk

	catch "exec bwmod -a 4 -d259 -r$gamma -m255 < $tbw > $tmod" junk

	catch "exec bw-pix < $tmod > $tbwpix" junk

	catch "exec pixmatte -e $tfci $bgl $tbwpix $tfci > $tmi" junk

	#
	# Finally, put the image to the framebuffer
	#
	catch "exec pix-fb -F $fb -w $w -n $h $tmi" junk
    }

}; # end namespace











