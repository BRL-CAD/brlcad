# This file is a Tcl script to test out [incr Widgets] Spindate class.
# It is organized in the standard fashion for Tcl tests with the following
# notation for test case labels:
#
#   1.x - Construction/Destruction tests
#   2.x - Configuration option tests
#   3.x - Method tests
#
# Copyright (c) 1995 DSC Technologies Corporation
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# @(#) $Id$

package require tcltest
namespace import -force ::tcltest::*

package require -exact Iwidgets 2.2

if {[string compare test [info procs test]] == 1} {
    source defs
}

wm geometry . {}
raise .

set c 1
set o 1
set m 1

#
# Initial construction test
#
test Spindate-1.$c {Spindate construction} {
    iwidgets::Spindate .sd
    pack .sd -padx 10 -pady 10 -fill both -expand yes
    update 
} {}

incr c

#
# Option tests which are successful.
#
test Spindate-2.$o {configuration option} {
    llength [.sd configure]
} {32}

incr o

foreach test {
    {-arroworient horizontal horizontal}
    {-arroworient vertical vertical}
    {-background #d9d9d9 #d9d9d9}
    {-cursor gumby gumby}
    {-datemargin 3 3}
    {-daylabel Day: Day:}
    {-dayon false false}
    {-dayon true true}
    {-daywidth 4 4}
    {-labelmargin 4 4}
    {-labelpos n n}
    {-labelpos s s}
    {-labelpos e e}
    {-labelpos w w}
    {-monthformat integer integer}
    {-monthformat {J F M A M J J A S O N D} {J F M A M J J A S O N D}}
    {-monthformat string string}
    {-monthlabel Month: Month:}
    {-monthon false false}
    {-monthon true true}
    {-monthwidth 4 4}
    {-orient horizontal horizontal}
    {-orient vertical vertical}
    {-textbackground GhostWhite GhostWhite}
    {-yeardigits 2 2}
    {-yeardigits 4 4}
    {-yearlabel Year: Year:}
    {-yearon false false}
    {-yearon true true}
    {-yearwidth 4 4}} {
	set option [lindex $test 0]
	test Spindate-2.$o "configuration options, $option" {
	    .sd configure $option [lindex $test 1]
	    lindex [.sd configure $option] 4
	} [lindex $test 2]
	update 
	incr o
}

#
# Option tests which fail and produce errors.
#
foreach test {
  {-yeardigits bogus {bad yeardigits option "bogus", should be 2 or 4}}
  {-monthformat bogus {bad monthformat option "bogus", should be "integer", "string" or a list}}} {
	set option [lindex $test 0]
        test Spindate-2.$o "configuration options, $option" {
	    list [catch {.sd configure $option [lindex $test 1]} msg] $msg
	} [list 1 [lindex $test 2]]
	incr o
}

#
# Method tests which are successful.
#
foreach test {
    {{.sd get month} {Jan}}
    {{.sd get day} {1}}
    {{.sd get year} {1995}}
    {{.sd get} {Jan 1 1995}}
    {{.sd delete month 0} {}}
    {{.sd delete day 0} {}}
    {{.sd delete year 0 end} {}}
    {{.sd insert month 0 2} {}}
    {{.sd insert day 0 2} {}}
    {{.sd insert year 0 96} {}}
    {{.sd clear} {}}} {
	set method [lindex [lindex $test 0] 1]
	test Spindate-3.$m "object methods, $method" {
	    list [catch {eval [lindex $test 0]} msg] $msg
	} [list 0 [lindex $test 1]]
	update 
	incr m
}

foreach test {
    {{.sd get bogus} {bad get argument "bogus": should be month, day or year}}
    {{.sd insert bogus 0 bogus} {bad insert argument "bogus": should be month, day or year}}
    {{.sd delete bogus 0} {bad delete argument "bogus": should be month, day or year}}} {
	set method [lindex [lindex $test 0] 1]
	test ScrolledListBox-3.$m "object methods, $method" {
	    list [catch {eval [lindex $test 0]} msg] $msg
	} [list 1 [lindex $test 1]]
	incr m
}

#
# Conclusion of constrcution/destruction tests
#
test Spindate-1.$c {Spindate destruction} {
    destroy .sd
    update 
} {}

incr c

test Spindate-1.$c {Spindate construction} {
    iwidgets::spindate .sd -monthformat string
    pack .sd -padx 10 -pady 10 -fill both -expand yes
    update 
} {}

incr c

test Spindate-1.$c {Spindate destruction} {
    destroy .sd
    update 
} {}

incr c

test Spindate-1.$c {Spindate destruction} {
    iwidgets::spindate .sd
    pack .sd
    destroy .sd
    update 
} {}


::tcltest::cleanupTests
exit
