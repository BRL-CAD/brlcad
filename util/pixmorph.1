.TH PIXMORPH 1 BRL-CAD
.SH NAME
pixmorph \-
morph two pix(5) images
.SH SYNOPSIS
.B pixmorph
.RB [ \-w\ width ]
.RB [ \-n\ height ]
picA.pix picB.pix linesfile warpfrac dissolvefrac > out.pix
.SH DESCRIPTION
.I pixmorph
performs feature-based image metamorphosis between "picA.pix" and "picB.pix".
The feature correspondences
are specified in the file "linesfile", which can be created
using a utility such as
.I morphedit.tcl
(see
.I morphedit(1)).

.br
The output image is computed in the following fashion.
First, for each pixel in the output image, we choose a set
.I A
of pixels
(and associated weights) from "picA.pix" and another set
.I B
of pixels
from "picB.pix" (how these sets and weights
are chosen will be described momentarily).
The pixel values from
.I A
are then averaged (using the associated weights)
to determine the contribution
.I cA
from the original image; the contribution
.I cB
is computed similarly.  Then, the values
.I cA
and
.I cB
are interpolated by the value
.I dissolvefrac
to compute the final value of the output pixel.

Now, the contribution
.I cA
from the original image is intended to be the value from
.I picA.pix
that gets "warped to" the location in question.
It is this computation (more specifically, the computation of
.I A
and associated weights)
that is the heart of the morphing algorithm,
and is described briefly here.

First, the linesfile is processed.  The linesfile
is of the form
.br
 a b p n
 lineseg1_initial lineseg1_final
 lineseg2_initial lineseg2_final
   .
   .
   .
 linesegn_initial linesegn_final
.br
where
.I n
equals the number of line segments, and
.I a, b,
and
.I p
are constants that alter the nature of the morph.
A line segment is represented as a list of four real numbers (and is
interpreted as a directed line segment.)
For example,
.br
 0.1 2.0 0.2 2
 0.714844 0.560547 0.988281 0.277344 0.347656 0.646484 0.654297 0.896484
 0.341797 0.611328 0.757812 0.265625 0.628906 0.519531 0.925781 0.763672
.br
is a valid lines file.
Typically, the pairs
.I linesegi_initial linesegi_final
have been placed by the user in the lines file to match up
particular features of
.I picA.pix
and
.I picB.pix
(the feature at
.I linesegi_initial
in
.I picA.pix
corresponds to the feature at
.I linesegi_final
in
.I picB.pix.)
For instance,
.I lineseg1_initial
might be a line segment running down the length of the nose of a person
displayed in
.I picA.pix;
then
.I lineseg1_final
would be a line segment running down the length of the nose of the person
featured in
.I picB.pix.
See
.I morphedit(1)
for more information about creating a lines file.

Now, for each line segment pair
.I (s,t),
we perform the following procedure:
We interpolate between
.I s
and
.I t
by factor
.I warpfrac
to yield the interpolated line segment
.I s'.
From the change in position, scale, and orientation of a line segment from
its initial position
.I s
to its interpolated counterpart
.I s'
we may deduce a linear transformation in the image space.
More specifically, if the line segment
.I s
must undergo
translation, stretching, and rotation
to yield
.I s',
we compute a linear transformation
.I T
of the image space that
performs the same translation, stretching, and rotation.
(So
.I T
applied to
.I s
yields
.I s'.)
The inverse
.I T*
of this transformation maps
.I s'
to
.I s;
for instance,
.I T*
will take an endpoint of
.I s'
to the corresponding endpoint of
.I s,
and will preseve the relationship of every other point
to the line segment.
We apply this inverse
.I T*
to the coordinates
.I (x,y)
to find an appropriate pixel in the original image.
Along with this, we compute a weight based on the length of the line segment
.I s
along with its distance from
.I (x,y).
This weight is equal to
.br
       ( (length ** p) / (a + dist) ) ** b
.br
(where
.I **
denotes exponentiation,
.I length
is the length of
.I s,
.I dist
is the distance from
.I s
to
.I (x,y), and
.I a, b, p
are constants chosen by the user and stored in the lines file.)

The set
.I A
of pixels is then collected by performing these computations for each
line segment, and the resulting contribution
.I cA
is then computed by averaging over
.I A
with the appropriate weights.

.br
In practice,
.I a
= 0.1,
.I b
= 2.0, and
.I p
= 0.2 seems to work well.

.br
In general, the user will wish to set
.I warpfrac
=
.I dissolvefrac.
Typically, a morph animation will be produced by computing a sequence
of images using
.I pixmorph,
each with slightly greater
.I warpfrac
(and
.I dissolvefrac)
(see the example.)
.br
For a clearer and more thorough explanation, see
.br
 T. Beier and S. Neely.
 Feature-Based Image Metamorphosis.
 "SIGGRAPH 1992 Computer Graphics Proceedings (volume 26 number 2)"
 (Chicago, July 26-31, 1992). pp 35-42.
.br
which presents the algorithm used by
.I pixmorph.
.PP
.SH OPTIONS
.TP
.BI \-w " WIDTH"
Tells
.I pixmorph
that the input images have width WIDTH.
.PP
.TP
.BI \-n " HEIGHT"
Tells
.I pixmorph
that the input images have height HEIGHT.
.ft R
.SH EXAMPLES
.ft I
      pixmorph face1.pix face2.pix lf 0.0 0.0 > frame0.pix
      pixmorph face1.pix face2.pix lf 0.2 0.2 > frame1.pix
      pixmorph face1.pix face2.pix lf 0.4 0.4 > frame2.pix
      pixmorph face1.pix face2.pix lf 0.6 0.6 > frame3.pix
      pixmorph face1.pix face2.pix lf 0.8 0.8 > frame4.pix
      pixmorph face1.pix face2.pix lf 1.0 1.0 > frame5.pix

.br
.ft R
Note that the example above will result in
.I frame0.pix
=
.I face1.pix
and
.I frame5.pix
=
.I face2.pix.

.br
.ft I
      pixmorph face1.pix face2.pix lf 0.5 0.0 > out.pix

.br
.ft R
Note that in this example,
.I dissolvefrac
= 0.
This will warp
.I face1.pix
and
.I face2.pix
by the appropriate amount, but will ignore the contributions of
.I face2.pix
at the cross-dissolve stage.
So the final image
.I out.pix
will consist entirely of values from
.I face1.pix
warped 50% according to the linesfile
.I lf.

.br
.ft I
      pixmorph face1.pix face2.pix lf 0.0 0.5 > out.pix

.br
.ft R
In this example,
.I warpfrac
= 0.
This will perform a simple 50% cross-dissolve between
.I face1.pix
and
.I face2.pix.
.SH "SEE ALSO"
brlcad(1), morphedit(1), pix(5)
.SH AUTHOR
Glenn Durfee
.SH SOURCE
SECAD/VLD Computing Consortium, Bldg 247
.br
The U. S. Army Research Laboratory
.br
Aberdeen Proving Ground, Maryland  21005
.SH "BUG REPORTS"
Reports of bugs or problems should be submitted via electronic
mail to <CAD@ARL.MIL>.

