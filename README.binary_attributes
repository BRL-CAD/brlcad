branch/attr-extension-mods
==========================

To turn on the use of binary attributes define:

  USE_BINARY_ATTRIBUTES

E.g., prior to running CMake:

  export CFLAGS=-DUSE_BINARY_ATTRIBUTES
  export CXXFLAGS=-DUSE_BINARY_ATTRIBUTES

Files affected:

  ./include/bu/parse.h
  ./include/bu/avs.h
  ./src/librt/db5_io.c
  ./src/librt/attributes.c

Features to be implemented and other considerations:

  + add a binary attribute using similar syntax as a string attribute
  + a binary attribute should have an optional description field
  + implement auto update of an object's ctime (creation time) and
    mtime (last modification)
  + mtime and ctime should be 64-bit integers (based on Unix time and
    epoch) (int64_t; see src/libbu/y2038/time64_config.h)
  + binary attributes should be able to be entered from or output to a
    file

A db admin tool:

  ./src/util/db-admin-tool.cpp

On-disk format of a binary attribute [following the (char*)NULL
(char*)NULL end of the normal attributes]:

After more deliberation I believe we ought to create a separate object
structure section for binary attributes.  Following is the existing
Table 1. in the V5 database format manual:

The following describes the current V5 db:

  BRL_CAD_g_format_V5.xml

The following describes the proposed V6 db with the binary attributes:

  BRL_CAD_g_format_V6.xml
 

Test plan:

1. Select a complex TGM in the db directory as a test subject.
2. Create a script to:

   + copy the TGM to a new file (TGM2)
   + add multiple binary attributes to TGM2
   + use the admin-db tool to check TGM2
   + delete the added binary attributes from TGM2
   + run cmp on TGM and TGM2 to see they are the same

The following is from the TODO file:

ATTRIBUTES
----------

* attr command option to output to a file

* attr command change to only output non-standard attributes

* attr command change to have an optional object argument and to work
  with multiple objects.  make output format scriptable.

* implement an attribute versioning system.  can hang attribute
  version off of _GLOBAL (ideally) or per-object so application codes
  (including our own tools) know whether they're compatible or whether
  the attributes must be upgraded.

* implement an "attr upgrade" subcommand that allows for forwards AND
  backwards conversion of attributes.  the command will need two
  function pointers per version that describes how to upgrade and
  downgrade for that version transition.  this will allow new files to
  be downgraded for use on older versions and obviously lets new files
  be upgraded to the latest conventions.

* implement namespacing for attributes as a means to group attributes
  together.  examples: cad:color, cad:region_id, muves:component.
  similar to svn properties, the namespace is predominantly (perhaps
  entirely) a naming convention, but allows us to document and assert
  requirements/conventions over a given prefix (e.g., 'cad:'), and
  provides 3rd party applications with a sandbox to work with.

* expose the list of internally recognized attributes via the man page
  documentation and some internal method (e.g., an 'attr standards'
  subcommand).

* clean up default attributes to be consistent and upgrade old
  attributes to their new names.  includes likes of region, region_id,
  material_id, air, los, rgb, oshader, and inherit.  see
  doc/docbook/system/man5/en/attributes.xml for more detailed listing.

* implement an option to "attr upgrade" for reading upgrade/downgrade
  plugins/instructions from an external file for 3rd party use.

* prevent nirt from outputting a trailing space after values when
  there are no attributes to be displayed.  the problem is in the nirt
  format strings where they use " %s" for displaying any attributes.
  need to left-pad a space conditionally, perhaps by supporting %*s
  and sizeof(var).

* add additional support for user-specified sorting for the attr
  command when new attribute attributes are added (e.g., creation
  date)

* binary attributes, see binary-incompatible section for details.
