# This file is a Tcl script to test the code in the file tkTextTag.c.
# This file is organized in the standard fashion for Tcl tests.
#
# Copyright (c) 1994 The Regents of the University of California.
# Copyright (c) 1994-1996 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
#
# RCS: @(#) $Id$

package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands

catch {destroy .t}
testConstraint courier12 [expr {[catch {
				text .t -font {Courier 12} -width 20 -height 10
				}] == 0}]

pack append . .t {top expand fill}
update
.t debug on
wm geometry . {}
set bigFont {Helvetica 24}
  
# The statements below reset the main window;  it's needed if the window
# manager is mwm, to make mwm forget about a previous minimum size setting.

wm withdraw .
wm minsize . 1 1
wm positionfrom . user
wm deiconify .

entry .t.e
.t.e insert 0 "Text"

.t insert 1.0 "Line 1
abcdefghijklm
12345
Line 4
bOy GIrl .#@? x_yz
!@#$%
Line 7"


set i 1
foreach test {
    {-background #012345 #012345 non-existent
	    {unknown color name "non-existent"}}
    {-bgstipple gray50 gray50 badStipple
	    {bitmap "badStipple" not defined}}
    {-borderwidth 2 2 46q
	    {bad screen distance "46q"}}
    {-fgstipple gray25 gray25 bogus
	    {bitmap "bogus" not defined}}
    {-font fixed fixed {}
	    {font "" doesn't exist}}
    {-foreground #001122 #001122 {silly color}
	    {unknown color name "silly color"}}
    {-justify left left middle
	    {bad justification "middle": must be left, right, or center}}
    {-lmargin1 10 10 bad
	    {bad screen distance "bad"}}
    {-lmargin2 10 10 bad
	    {bad screen distance "bad"}}
    {-offset 2 2 100xyz
	    {bad screen distance "100xyz"}}
    {-overstrike on on stupid
	    {expected boolean value but got "stupid"}}
    {-relief raised raised stupid
	    {bad relief type "stupid": must be flat, groove, raised, ridge, solid, or sunken}}
    {-rmargin 10 10 bad
	    {bad screen distance "bad"}}
    {-spacing1 10 10 bad
	    {bad screen distance "bad"}}
    {-spacing2 10 10 bad
	    {bad screen distance "bad"}}
    {-spacing3 10 10 bad
	    {bad screen distance "bad"}}
    {-tabs {10 20 30} {10 20 30} {10 fork}
	    {bad tab alignment "fork": must be left, right, center, or numeric}}
    {-underline no no stupid
	    {expected boolean value but got "stupid"}}
} {
    set name [lindex $test 0]
    test textTag-1.$i {tag configuration options} courier12 {
	.t tag configure x $name [lindex $test 1]
	.t tag cget x $name
    } [lindex $test 2]
    incr i
    if {[lindex $test 3] != ""} {
	test textTag-1.$i {configuration options} courier12 {
	    list [catch {.t tag configure x $name [lindex $test 3]} msg] $msg
	} [list 1 [lindex $test 4]]
    }
    .t tag configure x $name [lindex [.t tag configure x $name] 3]
    incr i
}
test textTag-2.1 {TkTextTagCmd - "add" option} courier12 {
    list [catch {.t tag} msg] $msg
} {1 {wrong # args: should be ".t tag option ?arg arg ...?"}}
test textTag-2.2 {TkTextTagCmd - "add" option} courier12 {
    list [catch {.t tag gorp} msg] $msg
} {1 {bad tag option "gorp": must be add, bind, cget, configure, delete, lower, names, nextrange, raise, ranges, or remove}}
test textTag-2.3 {TkTextTagCmd - "add" option} courier12 {
    list [catch {.t tag add foo} msg] $msg
} {1 {wrong # args: should be ".t tag add tagName index1 ?index2 index1 index2 ...?"}}
test textTag-2.4 {TkTextTagCmd - "add" option} courier12 {
    list [catch {.t tag add x gorp} msg] $msg
} {1 {bad text index "gorp"}}
test textTag-2.5 {TkTextTagCmd - "add" option} courier12 {
    list [catch {.t tag add x 1.2 gorp} msg] $msg
} {1 {bad text index "gorp"}}
test textTag-2.6 {TkTextTagCmd - "add" option} courier12 {
    .t tag add sel 3.2 3.4
    .t tag add sel 3.2 3.0
    .t tag ranges sel
} {3.2 3.4}
test textTag-2.7 {TkTextTagCmd - "add" option} courier12 {
    .t tag add x 1.0 1.end
    .t tag ranges x
} {1.0 1.6}
test textTag-2.8 {TkTextTagCmd - "add" option} courier12 {
    .t tag remove x 1.0 end
    .t tag add x 1.2
    .t tag ranges x
} {1.2 1.3}
test textTag-2.9 {TkTextTagCmd - "add" option} courier12 {
    .t.e select from 0
    .t.e select to 4
    .t tag add sel 3.2 3.4
    selection get
} 34
test textTag-2.11 {TkTextTagCmd - "add" option} courier12 {
    .t.e select from 0
    .t.e select to 4
    .t configure -exportselection 0
    .t tag add sel 3.2 3.4
    selection get
} Text
test textTag-2.12 {TkTextTagCmd - "add" option} courier12 {
    .t tag remove sel 1.0 end
    .t tag add sel 1.1 1.5 2.4 3.1 4.2 4.4
    .t tag ranges sel
} {1.1 1.5 2.4 3.1 4.2 4.4}
test textTag-2.13 {TkTextTagCmd - "add" option} courier12 {
    .t tag remove sel 1.0 end
    .t tag add sel 1.1 1.5 2.4
    .t tag ranges sel
} {1.1 1.5 2.4 2.5}

catch {.t tag delete x}
test textTag-3.1 {TkTextTagCmd - "bind" option} courier12 {
    list [catch {.t tag bind} msg] $msg
} {1 {wrong # args: should be ".t tag bind tagName ?sequence? ?command?"}}
test textTag-3.2 {TkTextTagCmd - "bind" option} courier12 {
    list [catch {.t tag bind 1 2 3 4} msg] $msg
} {1 {wrong # args: should be ".t tag bind tagName ?sequence? ?command?"}}
test textTag-3.3 {TkTextTagCmd - "bind" option} courier12 {
    .t tag bind x <Enter> script1
    .t tag bind x <Enter>
} script1
test textTag-3.4 {TkTextTagCmd - "bind" option} courier12 {
    list [catch {.t tag bind x <Gorp> script2} msg] $msg
} {1 {bad event type or keysym "Gorp"}}
test textTag-3.5 {TkTextTagCmd - "bind" option} courier12 {
    .t tag delete x
    .t tag bind x <Enter> script1
    list [catch {.t tag bind x <FocusIn> script2} msg] $msg [.t tag bind x]
} {1 {requested illegal events; only key, button, motion, enter, leave, and virtual events may be used} <Enter>}
test textTag-3.6 {TkTextTagCmd - "bind" option} courier12 {
    .t tag delete x
    .t tag bind x <Enter> script1
    .t tag bind x <Leave> script2
    .t tag bind x a xyzzy
    list [lsort [.t tag bind x]] [.t tag bind x <Enter>] [.t tag bind x a]
} {{<Enter> <Leave> a} script1 xyzzy}
test textTag-3.7 {TkTextTagCmd - "bind" option} courier12 {
    .t tag delete x
    .t tag bind x <Enter> script1
    .t tag bind x <Enter> +script2
    .t tag bind x <Enter>
} {script1
script2}
test textTag-3.7 {TkTextTagCmd - "bind" option} courier12 {
    .t tag delete x
    list [catch {.t tag bind x <Enter>} msg] $msg
} {0 {}}
test textTag-3.8 {TkTextTagCmd - "bind" option} courier12 {
    .t tag delete x
    list [catch {.t tag bind x <} msg] $msg
} {1 {no event type or button # or keysym}}

test textTag-4.1 {TkTextTagCmd - "cget" option} courier12 {
    list [catch {.t tag cget a} msg] $msg
} {1 {wrong # args: should be ".t tag cget tagName option"}}
test textTag-4.2 {TkTextTagCmd - "cget" option} courier12 {
    list [catch {.t tag cget a b c} msg] $msg
} {1 {wrong # args: should be ".t tag cget tagName option"}}
test textTag-4.3 {TkTextTagCmd - "cget" option} courier12 {
    .t tag delete foo
    list [catch {.t tag cget foo bar} msg] $msg
} {1 {tag "foo" isn't defined in text widget}}
test textTag-4.4 {TkTextTagCmd - "cget" option} courier12 {
    list [catch {.t tag cget sel bogus} msg] $msg
} {1 {unknown option "bogus"}}
test textTag-4.5 {TkTextTagCmd - "cget" option} courier12 {
    .t tag delete x
    .t tag configure x -background red
    list [catch {.t tag cget x -background} msg] $msg
} {0 red}

test textTag-5.1 {TkTextTagCmd - "configure" option} courier12 {
    list [catch {.t tag configure} msg] $msg
} {1 {wrong # args: should be ".t tag configure tagName ?option? ?value? ?option value ...?"}}
test textTag-5.2 {TkTextTagCmd - "configure" option} courier12 {
    list [catch {.t tag configure x -foo} msg] $msg
} {1 {unknown option "-foo"}}
test textTag-5.3 {TkTextTagCmd - "configure" option} courier12 {
    list [catch {.t tag configure x -background red -underline} msg] $msg
} {1 {value for "-underline" missing}}
test textTag-5.4 {TkTextTagCmd - "configure" option} courier12 {
    .t tag delete x
    .t tag configure x -underline yes
    .t tag configure x -underline
} {-underline {} {} {} yes}
test textTag-5.5 {TkTextTagCmd - "configure" option} courier12 {
    .t tag delete x
    .t tag configure x -overstrike on
    .t tag cget x -overstrike
} {on}
test textTag-5.6 {TkTextTagCmd - "configure" option} courier12 {
    list [catch {.t tag configure x -overstrike foo} msg] $msg
} {1 {expected boolean value but got "foo"}}
test textTag-5.7 {TkTextTagCmd - "configure" option} courier12 {
    .t tag delete x
    list [catch {.t tag configure x -underline stupid} msg] $msg
} {1 {expected boolean value but got "stupid"}}
test textTag-5.8 {TkTextTagCmd - "configure" option} courier12 {
    .t tag delete x
    .t tag configure x -justify left
    .t tag configure x -justify
} {-justify {} {} {} left}
test textTag-5.9 {TkTextTagCmd - "configure" option} courier12 {
    .t tag delete x
    list [catch {.t tag configure x -justify bogus} msg] $msg
} {1 {bad justification "bogus": must be left, right, or center}}
test textTag-5.10 {TkTextTagCmd - "configure" option} courier12 {
    .t tag delete x
    list [catch {.t tag configure x -justify fill} msg] $msg
} {1 {bad justification "fill": must be left, right, or center}}
test textTag-5.11 {TkTextTagCmd - "configure" option} courier12 {
    .t tag delete x
    .t tag configure x -offset 2
    .t tag configure x -offset
} {-offset {} {} {} 2}
test textTag-5.12 {TkTextTagCmd - "configure" option} courier12 {
    .t tag delete x
    list [catch {.t tag configure x -offset 1.0q} msg] $msg
} {1 {bad screen distance "1.0q"}}
test textTag-5.13 {TkTextTagCmd - "configure" option} courier12 {
    .t tag delete x
    .t tag configure x -lmargin1 2 -lmargin2 4 -rmargin 5
    list [.t tag configure x -lmargin1] [.t tag configure x -lmargin2] \
	    [.t tag configure x -rmargin]
} {{-lmargin1 {} {} {} 2} {-lmargin2 {} {} {} 4} {-rmargin {} {} {} 5}}
test textTag-5.14 {TkTextTagCmd - "configure" option} courier12 {
    .t tag delete x
    list [catch {.t tag configure x -lmargin1 2.0x} msg] $msg
} {1 {bad screen distance "2.0x"}}
test textTag-5.15 {TkTextTagCmd - "configure" option} courier12 {
    .t tag delete x
    list [catch {.t tag configure x -lmargin2 gorp} msg] $msg
} {1 {bad screen distance "gorp"}}
test textTag-5.16 {TkTextTagCmd - "configure" option} courier12 {
    .t tag delete x
    list [catch {.t tag configure x -rmargin 140.1.1} msg] $msg
} {1 {bad screen distance "140.1.1"}}
.t tag delete x
test textTag-5.17 {TkTextTagCmd - "configure" option} courier12 {
    .t tag delete x
    .t tag configure x -spacing1 2 -spacing2 4 -spacing3 6
    list [.t tag configure x -spacing1] [.t tag configure x -spacing2] \
	    [.t tag configure x -spacing3]
} {{-spacing1 {} {} {} 2} {-spacing2 {} {} {} 4} {-spacing3 {} {} {} 6}}
test textTag-5.18 {TkTextTagCmd - "configure" option} courier12 {
    .t tag delete x
    list [catch {.t tag configure x -spacing1 2.0x} msg] $msg
} {1 {bad screen distance "2.0x"}}
test textTag-5.19 {TkTextTagCmd - "configure" option} courier12 {
    .t tag delete x
    list [catch {.t tag configure x -spacing1 lousy} msg] $msg
} {1 {bad screen distance "lousy"}}
test textTag-5.20 {TkTextTagCmd - "configure" option} courier12 {
    .t tag delete x
    list [catch {.t tag configure x -spacing1 4.2.3} msg] $msg
} {1 {bad screen distance "4.2.3"}}
test textTag-5.21 {TkTextTagCmd - "configure" option} courier12 {
    .t configure -selectborderwidth 2 -selectforeground blue \
	    -selectbackground black
    .t tag configure sel -borderwidth 4 -foreground green -background yellow
    set x {}
    foreach i {-selectborderwidth -selectforeground -selectbackground} {
	lappend x [lindex [.t configure $i] 4]
    }
    set x
} {4 green yellow}
test textTag-5.22 {TkTextTagCmd - "configure" option} courier12 {
    .t configure -selectborderwidth 20
    .t tag configure sel -borderwidth {}
    .t cget -selectborderwidth
} {}

test textTag-6.1 {TkTextTagCmd - "delete" option} courier12 {
    list [catch {.t tag delete} msg] $msg
} {1 {wrong # args: should be ".t tag delete tagName tagName ..."}}
test textTag-6.2 {TkTextTagCmd - "delete" option} courier12 {
    list [catch {.t tag delete zork} msg] $msg
} {0 {}}
test textTag-6.3 {TkTextTagCmd - "delete" option} courier12 {
    .t tag delete x
    .t tag config x -background black
    .t tag config y -foreground white
    .t tag config z -background black
    .t tag delete y z
    lsort [.t tag names]
} {sel x}
test textTag-6.4 {TkTextTagCmd - "delete" option} courier12 {
    .t tag config x -background black
    .t tag config y -foreground white
    .t tag config z -background black
    eval .t tag delete [.t tag names]
    .t tag names
} {sel}
test textTag-6.5 {TkTextTagCmd - "delete" option} courier12 {
    .t tag bind x <Enter> foo
    .t tag delete x
    .t tag configure x -background black
    .t tag bind x
} {}

proc tagsetup {} {
    .t tag delete x y z a b c d
    .t tag remove sel 1.0 end
    foreach i {a b c d} {
	.t tag configure $i -background black
    }
}
test textTag-7.1 {TkTextTagCmd - "lower" option} courier12 {
    list [catch {.t tag lower} msg] $msg
} {1 {wrong # args: should be ".t tag lower tagName ?belowThis?"}}
test textTag-7.2 {TkTextTagCmd - "lower" option} courier12 {
    list [catch {.t tag lower foo} msg] $msg
} {1 {tag "foo" isn't defined in text widget}}
test textTag-7.3 {TkTextTagCmd - "lower" option} courier12 {
    list [catch {.t tag lower sel bar} msg] $msg
} {1 {tag "bar" isn't defined in text widget}}
test textTag-7.4 {TkTextTagCmd - "lower" option} courier12 {
    tagsetup
    .t tag lower c
    .t tag names
} {c sel a b d}
test textTag-7.5 {TkTextTagCmd - "lower" option} courier12 {
    tagsetup
    .t tag lower d b
    .t tag names
} {sel a d b c}
test textTag-7.6 {TkTextTagCmd - "lower" option} courier12 {
    tagsetup
    .t tag lower a c
    .t tag names
} {sel b a c d}

test textTag-8.1 {TkTextTagCmd - "names" option} courier12 {
    list [catch {.t tag names a b} msg] $msg
} {1 {wrong # args: should be ".t tag names ?index?"}}
test textTag-8.2 {TkTextTagCmd - "names" option} courier12 {
    tagsetup
    .t tag names
} {sel a b c d}
test textTag-8.3 {TkTextTagCmd - "names" option} courier12 {
    tagsetup
    .t tag add "a b" 2.1 2.6
    .t tag add c 2.4 2.7
    .t tag names 2.5
} {c {a b}}

.t tag delete x y z a b c d {a b}
.t tag add x 2.3 2.5
.t tag add x 2.9 3.1
.t tag add x 7.2
test textTag-9.1 {TkTextTagCmd - "nextrange" option} courier12 {
    list [catch {.t tag nextrange x} msg] $msg
} {1 {wrong # args: should be ".t tag nextrange tagName index1 ?index2?"}}
test textTag-9.2 {TkTextTagCmd - "nextrange" option} courier12 {
    list [catch {.t tag nextrange x 1 2 3} msg] $msg
} {1 {wrong # args: should be ".t tag nextrange tagName index1 ?index2?"}}
test textTag-9.3 {TkTextTagCmd - "nextrange" option} courier12 {
    list [catch {.t tag nextrange foo 1.0} msg] $msg
} {0 {}}
test textTag-9.4 {TkTextTagCmd - "nextrange" option} courier12 {
    list [catch {.t tag nextrange x foo} msg] $msg
} {1 {bad text index "foo"}}
test textTag-9.5 {TkTextTagCmd - "nextrange" option} courier12 {
    list [catch {.t tag nextrange x 1.0 bar} msg] $msg
} {1 {bad text index "bar"}}
test textTag-9.6 {TkTextTagCmd - "nextrange" option} courier12 {
    .t tag nextrange x 1.0
} {2.3 2.5}
test textTag-9.7 {TkTextTagCmd - "nextrange" option} courier12 {
    .t tag nextrange x 2.2
} {2.3 2.5}
test textTag-9.8 {TkTextTagCmd - "nextrange" option} courier12 {
    .t tag nextrange x 2.3
} {2.3 2.5}
test textTag-9.9 {TkTextTagCmd - "nextrange" option} courier12 {
    .t tag nextrange x 2.4
} {2.9 3.1}
test textTag-9.10 {TkTextTagCmd - "nextrange" option} courier12 {
    .t tag nextrange x 2.4 2.9
} {}
test textTag-9.11 {TkTextTagCmd - "nextrange" option} courier12 {
    .t tag nextrange x 2.4 2.10
} {2.9 3.1}
test textTag-9.12 {TkTextTagCmd - "nextrange" option} courier12 {
    .t tag nextrange x 2.4 2.11
} {2.9 3.1}
test textTag-9.13 {TkTextTagCmd - "nextrange" option} courier12 {
    .t tag nextrange x 7.0
} {7.2 7.3}
test textTag-9.14 {TkTextTagCmd - "nextrange" option} courier12 {
    .t tag nextrange x 7.3
} {}

test textTag-10.1 {TkTextTagCmd - "prevrange" option} courier12 {
    list [catch {.t tag prevrange x} msg] $msg
} {1 {wrong # args: should be ".t tag prevrange tagName index1 ?index2?"}}
test textTag-10.2 {TkTextTagCmd - "prevrange" option} courier12 {
    list [catch {.t tag prevrange x 1 2 3} msg] $msg
} {1 {wrong # args: should be ".t tag prevrange tagName index1 ?index2?"}}
test textTag-10.3 {TkTextTagCmd - "prevrange" option} courier12 {
    list [catch {.t tag prevrange foo end} msg] $msg
} {0 {}}
test textTag-10.4 {TkTextTagCmd - "prevrange" option} courier12 {
    list [catch {.t tag prevrange x foo} msg] $msg
} {1 {bad text index "foo"}}
test textTag-10.5 {TkTextTagCmd - "prevrange" option} courier12 {
    list [catch {.t tag prevrange x end bar} msg] $msg
} {1 {bad text index "bar"}}
test textTag-10.6 {TkTextTagCmd - "prevrange" option} courier12 {
    .t tag prevrange x end
} {7.2 7.3}
test textTag-10.7 {TkTextTagCmd - "prevrange" option} courier12 {
    .t tag prevrange x 2.4
} {2.3 2.5}
test textTag-10.8 {TkTextTagCmd - "prevrange" option} courier12 {
    .t tag prevrange x 2.5
} {2.3 2.5}
test textTag-10.9 {TkTextTagCmd - "prevrange" option} courier12 {
    .t tag prevrange x 2.9
} {2.3 2.5}
test textTag-10.10 {TkTextTagCmd - "prevrange" option} courier12 {
    .t tag prevrange x 2.9 2.6
} {}
test textTag-10.11 {TkTextTagCmd - "prevrange" option} courier12 {
    .t tag prevrange x 2.9 2.5
} {}
test textTag-10.12 {TkTextTagCmd - "prevrange" option} courier12 {
    .t tag prevrange x 2.9 2.3
} {2.3 2.5}
test textTag-10.13 {TkTextTagCmd - "prevrange" option} courier12 {
    .t tag prevrange x 7.0
} {2.9 3.1}
test textTag-10.14 {TkTextTagCmd - "prevrange" option} courier12 {
    .t tag prevrange x 2.3
} {}

test textTag-11.1 {TkTextTagCmd - "raise" option} courier12 {
    list [catch {.t tag raise} msg] $msg
} {1 {wrong # args: should be ".t tag raise tagName ?aboveThis?"}}
test textTag-11.2 {TkTextTagCmd - "raise" option} courier12 {
    list [catch {.t tag raise foo} msg] $msg
} {1 {tag "foo" isn't defined in text widget}}
test textTag-11.3 {TkTextTagCmd - "raise" option} courier12 {
    list [catch {.t tag raise sel bar} msg] $msg
} {1 {tag "bar" isn't defined in text widget}}
test textTag-11.4 {TkTextTagCmd - "raise" option} courier12 {
    tagsetup
    .t tag raise c
    .t tag names
} {sel a b d c}
test textTag-11.5 {TkTextTagCmd - "raise" option} courier12 {
    tagsetup
    .t tag raise d b
    .t tag names
} {sel a b d c}
test textTag-11.6 {TkTextTagCmd - "raise" option} courier12 {
    tagsetup
    .t tag raise a c
    .t tag names
} {sel b c a d}

test textTag-12.1 {TkTextTagCmd - "ranges" option} courier12 {
    list [catch {.t tag ranges} msg] $msg
} {1 {wrong # args: should be ".t tag ranges tagName"}}
test textTag-12.2 {TkTextTagCmd - "ranges" option} courier12 {
    .t tag delete x
    .t tag ranges x
} {}
test textTag-12.3 {TkTextTagCmd - "ranges" option} courier12 {
    .t tag delete x
    .t tag add x 2.2
    .t tag add x 2.7 4.15
    .t tag add x 5.2 5.5
    .t tag ranges x
} {2.2 2.3 2.7 4.6 5.2 5.5}
test textTag-12.4 {TkTextTagCmd - "ranges" option} courier12 {
    .t tag delete x
    .t tag add x 1.0 3.0
    .t tag add x 4.0 end
    .t tag ranges x
} {1.0 3.0 4.0 8.0}

test textTag-13.1 {TkTextTagCmd - "remove" option} courier12 {
    list [catch {.t tag remove} msg] $msg
} {1 {wrong # args: should be ".t tag remove tagName index1 ?index2 index1 index2 ...?"}}
test textTag-13.2 {TkTextTagCmd - "remove" option} courier12 {
    .t tag delete x
    .t tag add x 2.2 2.11
    .t tag remove x 2.3 2.7
    .t tag ranges x
} {2.2 2.3 2.7 2.11}
test textTag-13.3 {TkTextTagCmd - "remove" option} courier12 {
    .t configure -exportselection 1
    .t tag remove sel 1.0 end
    .t tag add sel 2.4 3.3
    .t.e select to 4
    .t tag remove sel 2.7 3.1
    selection get
} Text

.t tag delete x a b c d
test textTag-14.1 {SortTags} courier12 {
    foreach i {a b c d} {
	.t tag add $i 2.0 2.2
    }
    .t tag names 2.1
} {a b c d}
.t tag delete a b c d
test textTag-14.2 {SortTags} courier12 {
    foreach i {a b c d} {
	.t tag configure $i -background black
    }
    foreach i {d c b a} {
	.t tag add $i 2.0 2.2
    }
    .t tag names 2.1
} {a b c d}
.t tag delete x a b c d
test textTag-14.3 {SortTags} courier12 {
    for {set i 0} {$i < 30} {incr i} {
	.t tag add x$i 2.0 2.2
    }
    .t tag names 2.1
} {x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29}
test textTag-14.4 {SortTags} courier12 {
    for {set i 0} {$i < 30} {incr i} {
	.t tag configure x$i -background black
    }
    for {set i 29} {$i >= 0} {incr i -1} {
	.t tag add x$i 2.0 2.2
    }
    .t tag names 2.1
} {x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29}

foreach tag [.t tag names] {
    catch {.t tag delete $tag}
}
set c [.t bbox 2.1]
set x1 [expr [lindex $c 0] + [lindex $c 2]/2]
set y1 [expr [lindex $c 1] + [lindex $c 3]/2]
set c [.t bbox 3.2]
set x2 [expr [lindex $c 0] + [lindex $c 2]/2]
set y2 [expr [lindex $c 1] + [lindex $c 3]/2]
set c [.t bbox 4.3]
set x3 [expr [lindex $c 0] + [lindex $c 2]/2]
set y3 [expr [lindex $c 1] + [lindex $c 3]/2]

test textTag-15.1 {TkTextBindProc} courier12 {
    bind .t <ButtonRelease> {lappend x up}
    .t tag bind x <ButtonRelease> {lappend x x-up}
    .t tag bind y <ButtonRelease> {lappend x y-up}
    set x {}
    .t tag add x 2.0 2.4
    .t tag add y 4.3
    event gen .t <Button> -x $x1 -y $y1
    event gen .t <Motion> -x $x1 -y $y1
    event gen .t <ButtonRelease> -x $x1 -y $y1
    event gen .t <Button> -x $x1 -y $y1
    event gen .t <Motion> -x $x2 -y $y2
    event gen .t <ButtonRelease> -x $x2 -y $y2
    event gen .t <Button> -x $x2 -y $y2
    event gen .t <Motion> -x $x3 -y $y3
    event gen .t <ButtonRelease> -x $x3 -y $y3
    bind .t <ButtonRelease> {}
    set x
} {x-up up up y-up up}
test textTag-15.2 {TkTextBindProc} courier12 {
    catch {.t tag delete x}
    catch {.t tag delete y}
    .t tag bind x <Enter> {lappend x x-enter}
    .t tag bind x <ButtonPress> {lappend x x-down}
    .t tag bind x <ButtonRelease> {lappend x x-up}
    .t tag bind x <Leave> {lappend x x-leave}
    .t tag bind y <Enter> {lappend x y-enter}
    .t tag bind y <ButtonPress> {lappend x y-down}
    .t tag bind y <ButtonRelease> {lappend x y-up}
    .t tag bind y <Leave> {lappend x y-leave}
    event gen .t <Motion> -x 0 -y 0
    set x {}
    .t tag add x 2.0 2.4
    .t tag add y 4.3
    event gen .t <Motion> -x $x1 -y $y1
    lappend x |
    event gen .t <Button> -x $x1 -y $y1
    lappend x |
    event gen .t <Motion> -x $x3 -y $y3 -state 0x100
    lappend x |
    event gen .t <ButtonRelease> -x $x3 -y $y3
    set x
} {x-enter | x-down | | x-up x-leave y-enter}
test textTag-15.3 {TkTextBindProc} courier12 {
    catch {.t tag delete x}
    catch {.t tag delete y}
    .t tag bind x <Enter> {lappend x x-enter}
    .t tag bind x <Any-ButtonPress-1> {lappend x x-down}
    .t tag bind x <Any-ButtonRelease-1> {lappend x x-up}
    .t tag bind x <Leave> {lappend x x-leave}
    .t tag bind y <Enter> {lappend x y-enter}
    .t tag bind y <Any-ButtonPress-1> {lappend x y-down}
    .t tag bind y <Any-ButtonRelease-1> {lappend x y-up}
    .t tag bind y <Leave> {lappend x y-leave}
    event gen .t <Motion> -x 0 -y 0
    set x {}
    .t tag add x 2.0 2.4
    .t tag add y 4.3
    event gen .t <Motion> -x $x1 -y $y1
    lappend x |
    event gen .t <Button-1> -x $x1 -y $y1
    lappend x |
    event gen .t <Button-2> -x $x1 -y $y1 -state 0x100
    lappend x |
    event gen .t <Motion> -x $x3 -y $y3  -state 0x300
    lappend x |
    event gen .t <ButtonRelease-1> -x $x3 -y $y3 -state 0x300
    lappend x |
    event gen .t <ButtonRelease-2> -x $x3 -y $y3 -state 0x200
    set x
} {x-enter | x-down | | | x-up | x-leave y-enter}

foreach tag [.t tag names] {
    catch {.t tag delete $tag}
}
.t tag configure big -font $bigFont
test textTag-16.1 {TkTextPickCurrent procedure} courier12 {
    event gen .t <ButtonRelease-1> -state 0x100 -x $x1 -y $y1
    set x [.t index current]
    event gen .t <Motion> -x $x2 -y $y2
    lappend x [.t index current]
    event gen .t <Button-1> -x $x2 -y $y2
    lappend x [.t index current]
    event gen .t <Motion> -x $x3 -y $y3 -state 0x100
    lappend x [.t index current]
    event gen .t <Button-3> -state 0x100 -x $x3 -y $y3
    lappend x [.t index current]
    event gen .t <ButtonRelease-3> -state 0x300 -x $x3 -y $y3
    lappend x [.t index current]
    event gen .t <ButtonRelease-1> -state 0x100 -x $x3 -y $y3
    lappend x [.t index current]
} {2.1 3.2 3.2 3.2 3.2 3.2 4.3}
test textTag-16.2 {TkTextPickCurrent procedure} courier12 {
    event gen .t <ButtonRelease-1> -state 0x100 -x $x1 -y $y1
    event gen .t <Motion> -x $x2 -y $y2
    set x [.t index current]
    .t tag add big 3.0
    update
    lappend x [.t index current]
} {3.2 3.1}
.t tag remove big 1.0 end
foreach i {a b c d} {
    .t tag bind $i <Enter> "lappend x enter-$i"
    .t tag bind $i <Leave> "lappend x leave-$i"
}
test textTag-16.3 {TkTextPickCurrent procedure} courier12 {
    foreach i {a b c d} {
	.t tag remove $i 1.0 end
    }
    .t tag lower b
    .t tag lower a
    set x {}
    event gen .t <Motion> -x $x1 -y $y1
    .t tag add a 2.1 3.3
    .t tag add b 2.1
    .t tag add c 3.2
    update
    lappend x |
    event gen .t <Motion> -x $x2 -y $y2
    lappend x |
    event gen .t <Motion> -x $x3 -y $y3
    set x
} {enter-a enter-b | leave-b enter-c | leave-a leave-c}
test textTag-16.4 {TkTextPickCurrent procedure} courier12 {
    foreach i {a b c d} {
	.t tag remove $i 1.0 end
    }
    .t tag lower b
    .t tag lower a
    set x {}
    event gen .t <Motion> -x $x1 -y $y1
    .t tag add a 2.1 3.3
    .t tag add b 2.1
    .t tag add c 2.1
    update
    lappend x |
    .t tag lower c
    event gen .t <Motion> -x $x2 -y $y2
    set x
} {enter-a enter-b enter-c | leave-c leave-b}
foreach i {a b c d} {
    .t tag delete $i
}
test textTag-16.5 {TkTextPickCurrent procedure} courier12 {
    foreach i {a b c d} {
	.t tag remove $i 1.0 end
    }
    event gen .t <Motion> -x $x1 -y $y1
    .t tag bind a <Enter> {.t tag add big 3.0 3.2}
    .t tag add a 3.2
    event gen .t <Motion> -x $x2 -y $y2
    .t index current
} {3.2}
test textTag-16.6 {TkTextPickCurrent procedure} courier12 {
    foreach i {a b c d} {
	.t tag remove $i 1.0 end
    }
    event gen .t <Motion> -x $x1 -y $y1
    .t tag bind a <Enter> {.t tag add big 3.0 3.2}
    .t tag add a 3.2
    event gen .t <Motion> -x $x2 -y $y2
    update
    .t index current
} {3.1}
test textTag-16.7 {TkTextPickCurrent procedure} courier12 {
    foreach i {a b c d} {
	.t tag remove $i 1.0 end
    }
    event gen .t <Motion> -x $x1 -y $y1
    .t tag bind a <Leave> {.t tag add big 3.0 3.2}
    .t tag add a 2.1
    event gen .t <Motion> -x $x2 -y $y2
    .t index current
} {3.1}

catch {destroy .t}

# cleanup
::tcltest::cleanupTests
return













