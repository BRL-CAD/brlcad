PROPOSAL

		The following is a proposal for a set of guidelines

The BRL-CAD Concurrent Versions System Policy and Guidelines



OVERVIEW

    There are several development guidelines which all developers are
    expected to observe:

    1. All code development is to be done on CVS branches, not the
       trunk.

    2. Branches are not merged into the trunk until the code has been
       well tested.

    3. CVS tags follow a consistant naming convention.

    4. Merges to the trunk must be timed so that they cooperate with
       scheduled releases.


INTRODUCTION

    Since the BRL-CAD developers potentially have specific independant
    development projects, it's imperative that the check-ins which one
    developer commits does not interfere with the work of the others.
    Also, it's very important that the main BRL-CAD trunk be a stable
    code base so that users can download and use it successfully at
    any time.

    For these reasons, most code development should be done on
    branches.  Individual branches may be periodically synced with the
    main trunk over time.  

    We do make exceptions to this rule, however, when making one or
    two-line bug fixes.  It seems overkill to make a branch in order
    to commit a trivial bug fix.

	If you feel you *must* work off of the trunk for simplicity, all
	commits should be extensively tested by hand across all supported
	platforms before being committed to the tree.

	In addition to maintaining a stable tree, branches are also
	useful/used to track patches after a release and to test
	experimental changes.

    Finally, as BRL-CAD release schedules are set, developers will
    need to merge development branches, as appropriate back into the
    main trunk.  Appropriate testing, of course, needs to happen prior
    to commits for those as well.  The rest of this document explains
    in detail how branches and CVS tags are to be managed.



HOW TO CHECK OUT THE MAIN TRUNK


    FROM CAD:

    cvs -d /c/CVS checkout brlcad


    FROM ELSEWHERE:

    export CVS_RSH=ssh 
    cvs -z3 -dusername@cad.arl.army.mil:/c/CVS checkout brlcad

    (replace "username" with you cad account name, of course)



HOW TO CHECK OUT A BRANCH

    cvs checkout -r <keyword>-<revision>-branch brlcad



TAG NAMING CONVENTIONS

    <keyword>-<revision>-<date>-<comment>

    <keyword> ::= { ansi, jra, sean, ppc, ibm, ... }

	    The <keyword> is normally something short and concise.  For
	    release tags, it is "rel".  Other branch keywords may indicate
	    function, persons, etc.

    <revision> ::= <major>[-<minor>[-<patch>]]  (e.g., 6-0-2 and 5-2)

		The <revision> naming convention is fairly standard and common
	    practice:

		<major> is the major revision number and changes very
				infrequently.  Major releases contain significant
				architectural changes and are not necessarily
				backwards compatible with existing code or data.  They
				may require data and/or code to be converted in order
				to upgrade.

				Major releases usually go through an alpha release
				where glaring problems are resolved and features are
				polished.  A lengthy beta period usually follows where
				no new features are added.  Subsequent beta releases
				may be made until the code base is deemed stable.

		<minor> is the minor revision number a usually changes on a
				fairly regular basis.  As new features are added, the
				minor revision number changes to reflect those
				additions.  Minor releases may or may not be preceeded
				by alpha and/or beta releases, depending on the extent
				of changes being made.

		<patch> is the patch revision number and is used to make bug
				fixes on an as-needed basis.  These changes are not
				usually as extensively tested as minor and major
				releases, but they should always be backwards
				compatible.

	<date> := YYYYMMDD (e.g., 20021231)
		
		When creating tags, the date a tag is made is noted.  The
		format of the date is YYYYMMDD and should correspond to tag
		creation dates.  Subsequent tags that are based off of dated
		tags should use the original date.

	<comment>
		
		For branches the comment is "branch", for patches the comment
		is "patch".  For releases, it is left blank.  For other
		miscellaneous tags, the comment is up to the person tagging.


    Note that hyphens (-) are used, not underscores.  Periods (.) are
    never used because they upset CVS's branch naming.  The revision
    should match the match the most relevant release tag that the
    branch is based off of. 



BRANCH TAG NAMING SCHEME

    Branches are symbolic tags that are used to anchor a branch as a
    specific tree revision.  We'll use the following format for branch
    tags:

    <keyword>-<revision>-branch


NON-BRANCH TAG NAMING SCHEME

    We use non-branch tags for three things:
        1) marking a release
        2) merging branches
        3) miscellaneous tags (e.g., to remember a specific stopping point)


    FORMAT FOR MAKING A RELEASE:

        rel-<revision>-<date>

        <revision> ::= major-minor[-<patch>]  (e.g., 6-0 and 6-0-2a)

        <date> ::= <year><month><day>   (e.g., 19991206)


    FORMAT FOR MAKING A PATCH RELEASE:

        rel-<revision>-<date>-patch


    FORMAT FOR MERGES:

        On the branch, BEFORE THE MERGE, use the following tag:

            <keyword>-<revision>-<date>

        On the main trunk, AFTER THE MERGE, use the following tag:

            <keyword>-<revision>-<date>-merge


    FORMAT FOR MISCELLANEOUS TAGS:
    
        <keyword>-<revision>-<date>-<comment>



HOW TO TAG A RELEASE

	0) Merge in any branches and hanging updates that need to be committed.

	1) Test the release on multiple architectures.  Run the benchmarks
       for speed and consistency comparisons.  Run the regression
       suite.  Manually test, fix, and retest, by hand as necessary.

	2) Tag the release:

		cvs tag rel-<revision>-<date>
	


HOW TO PATCH A RELEASE

	0) Create a patch branch off of the release tag to work with:

	    cvs rtag -b -r rel-<revision>-<date> rel-<revision>-<date>-patch
		cvs checkout -b rel-<revision>-<date>-patch

	1) Make source modifications and patches as needed.  Test, fix,
       and retest as needed.

	2) Commit changes to the patch branch:

	    cvs update -dP
	    cvs commit

	3) Commit changes to the main trunk manually. Patch branches are
       never merged back into the main trunk as it is not possible or
       desireable to merge the trunk into the patch branch first.

	   If the patch branch contains undesireable code (e.g., temp bug
	   fixes) or code not appropriate for the main trunk, it must be
	   merged by hand.

	   Otherwise, the patch branch may be merged back into the main
	   trunk via:
	   
	    cvs update -A
		[ test extensively ]
		cvs commit



HOW TO MAKE A BRANCH

    CASE 1: You have no checked out trees.

        If you want to use the main trunk as the anchor for your branch:

            cvs rtag -b <keyword>-<revision>-branch
            cvs checkout -b <keyword>-<revision>-branch

        If you want to use some other tag as the anchor for your branch:

            cvs rtag -b -r <tag> <keyword>-<revision>-branch
            cvs checkout -b <keyword>-<revision>-branch

    CASE 2: You have a checked out revision, and you want to tag it and start
    using it as a branch:

        cd <root-of-your-checked-out-tree>
        cvs tag -b <keyword>-<revision>-branch
        cvs update -r <keyword>-<revision>-branch


    This makes the <keyword>-<revision>-branch tag sticky.  You can verify
    this by using 'cvs status', for example, do this:

        cvs status Makefile

    or

        cvs status -v Makefile



HOW TO MERGE THE TRUNK INTO YOUR BRANCH

    Before you merge your code into the trunk you should first merge
    the latest trunk code into your branch.  After merged code has been
    tested on your branch, merging into the trunk should be simple.

    0) Be sure all the changes on your branch are checked in.

    1) Tag your branch with a 'freeze' tag:

        cvs tag <keyword>-<revision>-<date>-freeze

    2) Merge from the trunk:

        cvs update -d -j HEAD

    3) Resolve any conflicts from the merge.

    4) Recompile and build your branch.  Test it.

    5) Check in your changes from the merge.

    6) Tag your branch with a merge tag:

        cvs tag <keyword>-<revision>-<date>
    


HOW TO MERGE YOUR BRANCH TO THE MAIN TRUNK

    0) Be sure your <keyword>-<revision>-<date>-merge tag (on the branch) is up
       to date (i.e., in case you changed some files from between the time you
       merged the trunk onto the branch until you merged the branch onto the
       trunk).

       You can make the tag with:

        cvs tag <keyword>-<revision>-<date>

    1) Revert your working tree to the main trunk:

        cvs update -A

       [Alternatively, you can just check out a new copy of the main
       trunk.]

    2) Merge in the changes from your branch:

        cvs update -j <keyword>-<revision>-branch

    3) Test your merged tree

    4) Check in your merged tree to the main branch;

        cvs commit -m 'Merged <keyword>-<revision>'

    5) Tag your merge so we can find it again:

        cvs tag <keyword>-<revision>-<date>-merge


    Say you keep hacking on your branch after the merge to test a few extra 
    things and you want to merge again.  You get the main trunk checked
    out, as in step (1), then you merge only those changes between your
    last merge and the most recent revision in your branch:

        cvs update -j <keyword>-<revision>-<date>
                   -j <keyword>-<revision>-branch

	If the branch being checked in an extensive set of changes,
	testing (step 3) is essential.  It is also a good idea to warn
	other developers of what you are planning to do.  You should
	indicate what parts of the system will be affected and coordinate
	in detail with other developers as appropriate.
	


USEFUL ADVICE

    0) To avoid having to specify the repository in each command, you
       can set your CVSROOT environment variable to the location of
       the repository:

	   FROM CAD:

	      export CVSROOT=/c/CVS

	   FROM ELSEWHERE:

	      export CVSROOT=username@cad.arl.army.mil:/c/CVS

    1) It is useful to have a ~/.cvsrc file with the following:

	    $ cat ~/.cvsrc
        update -d -P
        checktout -P

	   The -P switch tells CVS to prune empty directories.  The -d
	   switch tells CVS to add new directories that may have been
	   created in the repository since the last update.

	2) Frequent updates are a good thing.  Perform them often to
       minimize conflicts.

	3) Once a branch is merged back into the trunk, it is usually a
       good idea to consider the branch dead.  Create a new branch off
       of the merge tag to start again.



REFERENCES

    This CVS policy was derived off of other projects such as the
    XFree86 DRI project, Zope, FreeBSD, and AT&T's SML/NJ among
    others.    

XFree86 DRI
http://dri.sourceforge.net/doc/cvspolicy.txt

Zope 
http://dev.zope.org/CVS/ZopeReleasePolicy

FreeBSD
http://www.linuxsecurity.com/articles/vendors_products_article-3004.html

AT&T
http://cm.bell-labs.com/cm/cs/what/smlnj/DEV/policy.html




