/*           C S G _ S C A N N E R . P E R P L E X
 * BRL-CAD
 *
 * Copyright (c) 2013 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */

/* perplex input file */
#include "csg.h"


/* condition states - no idea what this enum does but I modified it according
to what I used below */
enum {INITIAL, code};

%%
<> => code { continue; }

integer = [1-9][0-9]*;

lb = "(";
rb = ")";
lsb = "[";  // left square bracket
rsb = "]";  // right square bracket

lcurly = "{";
eq = "=";

optional_ws = [ \t]*;

group_begin = "group() {";
txt = [a-z]+;
group_end = "}";



<code>  {
(optional_ws)(group_begin) {
	YYSETCONDITION(code);
    return GROUP_BEGIN;
    }

(optional_ws)(txt) {
	  return TXT;
    }

(optional_ws)(group_end) {
     YYSETCONDITION(code);
     return GROUP_END;
	  }

(optional_ws)(integer) {
	   YYSETCONDITION(code);
		 return INTEGER;
    }

(optional_ws)(lb) {
		YYSETCONDITION(code);
		return LB;
		}

(optional_ws)(rb) {
		YYSETCONDITION(code);
		return RB;
		}

(optional_ws)(lsb) {
		YYSETCONDITION(code);
		return LSB;
		}

(optional_ws)(rsb) {
		YYSETCONDITION(code);
		return RSB;
		}

(optional_ws)(eq) {
		YYSETCONDITION(code);
		return EQ;
		}

(optional_ws)(lcurly) {
		YYSETCONDITION(code);
		return LCURLY;
		}

[^] { continue; }
}
