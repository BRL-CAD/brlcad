/*           C S G _ S C A N N E R . P E R P L E X
 * BRL-CAD
 *
 * Copyright (c) 2013 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */

/* perplex input file */
#include "csg.h"

/* Temporarily suppress some warnings, to make for easier development */
#if defined(__GNUC__) && (__GNUC__ == 4 && __GNUC_MINOR__ >= 3) && !defined(__clang__)
#  pragma GCC diagnostic ignored "-Wunused-variable"
#  pragma GCC diagnostic ignored "-Wunused-parameter"
#  pragma GCC diagnostic ignored "-Wunused-function"
#endif
#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wunused-variable"
#  pragma clang diagnostic ignored "-Wunused-parameter"
#  pragma clang diagnostic ignored "-Wunused-function"
#endif

/* condition states - no idea what this enum does but I modified it according
to what I used below */
enum {INITIAL, code, group, group_in};

%%
<> => code { continue; }

/* matching group() { , functions inside group() and the end of group() */

optional_ws = [ \t]*;

group_begin = "group() {";
group_content = [a-z]+ "("*")";
group_end = "}";

/* returning the tokens found, not sure if correct or not */
<code>  {
(optional_ws)(group_begin) {
    return GROUP_BEGIN;
  }
}

<group> {
(optional_ws)(group_content) {
     YYSETCONDITION(code);
     return GROUP_CONTENT;
   }
}
<group_in> {
  (optional_ws)(group_end) {
     YYSETCONDITION(group);
     return GROUP_END;
}
}
