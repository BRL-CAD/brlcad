set(mime_h_file "@MIME_H_FILE@")
set(mime_c_file "@MIME_C_FILE@")

file(READ @BRLCAD_SOURCE_DIR@/@INCLUDE_DIR@/bu/mime.types MIME_TYPES)
file(READ @BRLCAD_SOURCE_DIR@/@INCLUDE_DIR@/bu/mime_cad.types CAD_TYPES)
file(WRITE ${mime_h_file} "/* Mime type mappings automatically generated from mime.types\n * and mime_cad.types.\n * Do not edit these files directly - apply updates to include/bu source files. */\n\n")
file(APPEND ${mime_h_file} "#ifndef BU_MIME_H\n")
file(APPEND ${mime_h_file} "#define BU_MIME_H\n")
file(APPEND ${mime_h_file} "#include \"common.h\"\n")
file(APPEND ${mime_h_file} "#include \"bu/defines.h\"\n")
file(APPEND ${mime_h_file} "__BEGIN_DECLS\n")

file(WRITE ${mime_c_file} "/* Functions for mapping file extensions to mime type. Automatically\n * generated from mime.types and mime_cad.types.\n * Do not edit these files directly - apply updates to include/bu source files. */\n\n")
file(APPEND ${mime_c_file} "#include \"common.h\"\n")
file(APPEND ${mime_c_file} "#include \"bu/mime.h\"\n")
file(APPEND ${mime_c_file} "#include \"bu/file.h\"\n")
file(APPEND ${mime_c_file} "#include \"bu/str.h\"\n")

set(MIME_TYPES "${MIME_TYPES}\n${CAD_TYPES}")
string(REGEX REPLACE "\r?\n" ";" TYPES "${MIME_TYPES}")

set(ACTIVE_TYPES)
foreach(line ${TYPES})
  if(NOT ${line} MATCHES "[#]")
    set(elements)
    string(REPLACE " " ";" linescrub "${line}")
    string(REPLACE "\t" ";" linescrub "${linescrub}")
    foreach(e ${linescrub})
      set(elements ${elements} ${e})
    endforeach(e ${linescrub})
    list(GET elements 0 mtype)
    string(REGEX REPLACE "/.+" "" mgrp "${mtype}")
    string(REPLACE "-" "_DASH_" mgrp "${mgrp}")
    set(ACTIVE_TYPES ${ACTIVE_TYPES} ${mgrp})
  endif(NOT ${line} MATCHES "[#]")
endforeach(line ${TYPES})
list(REMOVE_DUPLICATES ACTIVE_TYPES)
list(SORT ACTIVE_TYPES)

foreach(line ${TYPES})
  if(NOT ${line} MATCHES "[#]")
    set(elements)
    string(REPLACE " " ";" linescrub "${line}")
    string(REPLACE "\t" ";" linescrub "${linescrub}")
    foreach(e ${linescrub})
      set(elements ${elements} ${e})
    endforeach(e ${linescrub})
    list(GET elements 0 mtype)
    list(REMOVE_AT elements 0)
    string(REGEX REPLACE "/.+" "" mime_group "${mtype}")
    string(REPLACE "-" "_DASH_" mime_group "${mime_group}")
    set(mime_type "${mtype}")
    string(TOUPPER "${mime_type}" mime_type)
    string(REPLACE "/" "_" mime_type "${mime_type}")
    string(REPLACE "." "_" mime_type "${mime_type}")
    string(REPLACE "+" "_PLUS_" mime_type "${mime_type}")
    string(REPLACE "-" "_DASH_" mime_type "${mime_type}")
    set(${mime_group}_types ${${mime_group}_types} ${mime_type})
    foreach(e ${elements})
      set(${mime_type}_extensions ${${mime_type}_extensions} ${e})
    endforeach(e ${elements})
  endif(NOT ${line} MATCHES "[#]")
endforeach(line ${TYPES})

# HEADER with typedefs

set(mcstr "typedef enum {")
foreach(context ${ACTIVE_TYPES})
  string(TOUPPER "${context}" c)
  set(mcstr "${mcstr}\n    MIME_${c},")
endforeach(context ${ACTIVE_TYPES})
set(mcstr "${mcstr}\n    MIME_UNKNOWN")
set(mcstr "${mcstr}\n} mime_context_t;\n\n")
file(APPEND ${mime_h_file} "${mcstr}")

foreach(c ${ACTIVE_TYPES})
  set(enum_str "typedef enum {")
  list(SORT ${c}_types)
  string(TOUPPER "${c}" c_u)
  # Default first enum for all types is an auto type
  set(enum_str "${enum_str}\n    MIME_${c_u}_AUTO,")
  foreach(type ${${c}_types})
    set(enum_str "${enum_str}\n    MIME_${type},")
  endforeach(type ${${c}_types})
  set(enum_str "${enum_str}\n    MIME_${c_u}_UNKNOWN")
  set(enum_str "${enum_str}\n} mime_${c}_t;\n\n")
  file(APPEND ${mime_h_file} "${enum_str}")
endforeach(c ${ACTIVE_TYPES})
file(APPEND ${mime_h_file} "__END_DECLS\n")
file(APPEND ${mime_h_file} "#endif /*BU_MIME_H*/\n")

# C mapping functions
foreach(c ${ACTIVE_TYPES})
  set(enum_str "HIDDEN int\nbu_file_mime_${c}(const char *ext)\n{")
  list(SORT ${c}_types)
  foreach(type ${${c}_types})
    foreach(ext ${${type}_extensions})
      set(enum_str "${enum_str}\n    if(BU_STR_EQUIV(ext, \"${ext}\")) return ((int)MIME_${type});\n")
    endforeach(ext ${${type}_extensions})
  endforeach(type ${${c}_types})
  set(enum_str "${enum_str}\n    return -1;\n}\n")
  file(APPEND ${mime_c_file} "${enum_str}")
endforeach(c ${ACTIVE_TYPES})

set(mcstr "\nint bu_file_mime(const char *ext, mime_context_t context)\n{")
set(mcstr "${mcstr}\n    switch (context) {\n")
foreach(context ${ACTIVE_TYPES})
  string(TOUPPER "${context}" c)
  set(mcstr "${mcstr}        case MIME_${c}:\n")
  set(mcstr "${mcstr}             return bu_file_mime_${context}(ext);\n")
  set(mcstr "${mcstr}             break;\n")
endforeach(context ${ACTIVE_TYPES})
set(mcstr "${mcstr}        default:\n")
set(mcstr "${mcstr}             return -1;\n")
set(mcstr "${mcstr}             break;\n")
set(mcstr "${mcstr}    }\n")
set(mcstr "${mcstr}    return -1;\n")
set(mcstr "${mcstr}}\n")
file(APPEND ${mime_c_file} "${mcstr}")


# Local Variables:
# tab-width: 8
# mode: cmake
# indent-tabs-mode: t
# End:
# ex: shiftwidth=2 tabstop=8

