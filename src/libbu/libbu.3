.TH LIBBU 3 BRL-CAD
.\"                        L I B B U . 3
.\" BRL-CAD
.\"
.\" Copyright (c) 2004-2011 United States Government as represented by
.\" the U.S. Army Research Laboratory.
.\"
.\" Redistribution and use in source (Docbook format) and 'compiled'
.\" forms (PDF, PostScript, HTML, RTF, etc), with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code (Docbook format) must retain the
.\" above copyright notice, this list of conditions and the following
.\" disclaimer.
.\"
.\" 2. Redistributions in compiled form (transformed to other DTDs,
.\" converted to PDF, PostScript, HTML, RTF, and other formats) must
.\" reproduce the above copyright notice, this list of conditions and
.\" the following disclaimer in the documentation and/or other
.\" materials provided with the distribution.
.\"
.\" 3. The name of the author may not be used to endorse or promote
.\" products derived from this documentation without specific prior
.\" written permission.
.\"
.\" THIS DOCUMENTATION IS PROVIDED BY THE AUTHOR AS IS'' AND ANY
.\" EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
.\" OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
.\" BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
.\" LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
.\" USE OF THIS DOCUMENTATION, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\".\".\"
.SH NAME
libbu \- The BRL-CAD Utility Library
.SH SYNOPSIS
.nf
\fB#include "common.h"
\fB#include "<stdio.h>"
\fB#include "bu.h"
.sp
WARNING - WARNING - WARNING - WARNING - WARNING

This file seems to be out of date with the sources.
Consult the headers for up-to-date information.
Use the below interface documentation at your own discretion.

WARNING - WARNING - WARNING - WARNING - WARNING
.sp
.SH DESCRIPTION
.I libbu
contains all of the basic "computer-science" integer utility subroutines
for The BRL-CAD Package;
the two letters "BU" stand for "BRL-CAD" and "Utility".
Numerical (floating-point math) routines are found in the separate library
.IR libbn .
All subroutines in
.I libbu
are designed to be "parallel-safe" (sometimes called "mp-safe"),
to greatly ease code development for multi-processor systems.
.PP
The header file
.I bu.h
contains several "packages" which are implemented entirely by
macros and have no corresponding source code.
This includes the portable interface for declaring function prototypes
.I BU_EXTERN
and
.IR BU_ARGS ,
the portable interface for declaring FORTRAN-callable C routines
.IR BU_FORTRAN ,
the object constructor macros
.I BU_GETSTRUCT
and
.IR BU_GETUNION ,
the magic-number checking macros
.IR BU_CKMAG ,
the entire doubly-linked list package (formerly found in h/rtlist.h)
.IR BU_LIST_xxx() .
.PP
In addition to the capabilities implemented as macros, there are
additional "packages" which have both macro and subroutine interfaces:
.PP
The arbitrary-length bit-vector routines
.IR bu_bitv_xxx() .
.PP
The standardized parallel-safe error logging and abort routines
.I bu_log()
and
.IR bu_bomb() .
.PP
A portable re-entrant implementation of the
.IR getopt (3)
library routine
.IR bu_getopt (3).
.PP
A set of data histogramming routines
.IR bu_hist_xxx() .
.PP
A set of portable vendor-independent routines for parallel processing
that include
.I bu_avail_cpus()
to determine how many CPUs are available on the current system,
.I bu_parallel()
to initiate a specified number of parallel \fIthreads\fR of execution,
and
.IR bu_semaphore_init() ,
.IR bu_semaphore_acquire() ,
and
.I bu_semaphore_release()
for portable handling of \fIsemaphores\fR
to protect critical sections of code.
.PP
The
.I bu_malloc()
family of parallel-safe
routines provide an interface to the system memory allocator
which include standardized error checking, optional memory-use logging, and
optional run-time pointer and memory corruption testing.
.PP
The
.I bu_open_mapped_file()
routines provide a standardized interface for acquiring the entire contents
of an existing file mapped into the current address space,
using the virtual-memory capabilities of the operating-system (such as
.IR mmap (2))
where available, or if all else fails,
allocating sufficient dynamic memory and reading the entire file.
.PP
The
.I bu_structparse
data structure and associated routines provide a convenient way of
describing a C data structure, and reading and writing it
in both human-readable ASCII and efficient binary forms.
.PP
The
.I bu_ptbl
"pointer table" data structure provides a convenient
mechanism for managing a collection of pointers to objects,
where the size of the array is not known in advance and may change with time.
It is very convenient to be able to write code that can say
"remember this object", and then later on iterate through the collection
of remembered objects.
When combined with the concept of placing "magic numbers" in the first
.B long
of each data structure, the pointers to the objects become
automatically typed.
.PP
The
.I bu_vls
structure provides support for variable length strings,
freeing the programmer from concerns about having
.B char
arrays large enough to hold strings.
A complete set of string routines are provided,
including
.IR bu_vls_gets() ,
.IR bu_vls_strdup() ,
.IR bu_vls_strcat() ,
.IR bu_vls_from_argv() ,
.IR bu_vls_fwrite() ,
and many others.
.PP
The red-black package of balanced binary tree operations
that provides all the basic dynamic set operations
(e.g., insertion, deletion, search, minimum, maximum,
predecessor, and successor)
and order-statistic operations
(i.e., select and rank)
with optimal
--
that is,
.IR "O(" "log " "n)"
--
performance
while sorting on multiple keys.
.PP
Finally, a set of routines exist for taking text descriptions of
distance units and converting them to millimeters and back,
including
.IR bu_units_conversion() .
.SH WARNING
.I libbu
is designed to run in parallel on multiprocessor machines.
On some such machines
system calls must be semaphore protected.  For this reason,
.I libbu
provides:
.sp
.nf
.I bu_log()
.I bu_malloc() bu_free() bu_calloc() bu_realloc()
.I bu_strdup()
.fi
.PP
The function
.I bu_log()
is essentially a semaphore-protected version of
.I printf()
except that it uses the standard error (stderr) instead of the standard
output (stdout).
.PP
Dynamic memory handling in applications using
.I libbu
should use
the functions provided by
.I libbu
instead of the usual system runtime library
routines.  The
.I libbu
versions do not return to the caller unless they succeed,
thus sparing the programmer from constantly having to check
for NULL return code.
If a
.I libbu
routine fails with an unrecoverable error, it will call
.I bu_bomb
with their last argument (str) as the parameter.  The string parameter
usually indicates the purpose of the memory being allocated.
.PP
The function
.I bu_strdup()
calls bu_malloc() instead of malloc() to acquire memory.
Thus it should be used in place of strdup() in programs linking with
.I libbu.
.SH "EXIT CODE"
All truly fatal errors detected by the library use
.I bu_bomb
to exit with a status of 12.
.SH "SEE ALSO"
brlcad(1B), librt(1B), libbn(1B), redblack(3B).
.SH DIAGNOSTICS
``bu_malloc: malloc failure'',
if
.I libbu
is unable to allocate memory with
.IR malloc .
.SH COPYRIGHT
Copyright (c) 2004-2011 United States Government as represented by
U.S. Army Research Laboratory.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this file; see the file named COPYING for more
information.

.SH "BUG REPORTS"
Reports of bugs or problems should be submitted via electronic
mail to <devs@brlcad.org>, or via the provided "cadbug.sh" script.
