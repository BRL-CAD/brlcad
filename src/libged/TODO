These are new command ideas for LIBGED.
Keep them sorted alphabetically.
They are not all vetted.
Be specific.

---

* 'about' command: display version, contents of various doc files,
  customizable brlcad.msg file.  could also report summary information
  about the currently displayed geometry (possibly as a 'stats'
  command alternatively).  this would include the number of objects,
  types of objects, triangle counts, surface counts, extents, classes
  of geometry representation types used, and potentially more.
  options to disable version or object info.  consider merging with
  'summary' command.  provide option for writing results out to a
  file.

* 'align' command: taking a from 3d pt and a to 3d pt target.
  moves/rotates the source object into alignment.

* 'audit' command: determine if the model is valid, provide option(s)
  to fix any errors encountered.  this could be a refactoring or
  calling of g_lint and/or other tools.

* 'array' command: to create a shallow copy of geometry in a
  rectangular or polar pattern.  similar to clone, perhaps mergeable
  with clone as an option.  takes #rows+dist and #cols+dist, or
  centerpt+#items and angle <360 to fill, angle between items, rotate
  each item boolean.

* 'batch' command: apply a given command template to all lines in a
  given input text file.  could be very similar to exec but instead of
  inspecting the current .g, it walks lines in file(s).  this would
  let you do things like:

  # same as mvall -f file.txt
  batch file.txt -exec "mvall {*}"

  # create an alternate hierarchy based on some mapping file
  batch -m line file.txt -exec "g {line}"

  # for all lines in 3 files, kill first symbol, rename second to it
  batch A.txt B.txt C.txt -exec "kill {1}" -exec "mv {2} {1}"

  # keep all objects in an edcodes file with region ID > 1000
  batch A.txt -field 2 -ne 1000 -exec "keep subset.g {5}"

  # for all regions, if they are listed in file.txt, add them to a
  # parent assembly and set a specified material ID
  search . -name "*.r" -exec batch -m line file.txt -field 1 -eq {} -exec "g {1} {}" -exec "mater {} {3}" ;

  # run awk, get 4th column, run sed to change name from r123 to 123.r,
  batch file.txt -awk '{print $4}' -sed 's/^r(.*)/\1\.r/g' -exec "mv {1} {$}"

  # outside of MGED, the above would have been similar to:
  cat file.txt | awk '{print $4}' | sed 's/^r(.*)/r\1 \1\.r/g' | xargs mged test.g mv

  The command becomes more of a stream processor on the input file, as
  if piped on the shell line.  To embed awk, sed, cut, see qse:
	  http://code.google.com/p/qse/

  Batch needs some syntax like $*, $1, $2, or {*}, {1}, {2}, etc., to
  represent file columns (in a poor man's awk fashion) and search
  simply using "{}" as the object name replacement marker (unless we
  specify a -m {marker_name}).  Using the same positional markers will
  help keep the interface consistent for the user, but it will require
  forethought on how batch interfacts with the search and repeat
  commands.

* 'cal' command: geometry calculator for scalar values, points,
  vectors, and maybe matrices.  units aware with options for
  converting between units, angles, with support for std funcs like
  sin, cos, log, abs.  also supporting view values, points on a line,
  normals, distances, ... powerful calculator for those places where
  the user needs some value we don't display for them (like needing to
  calculate a distance between two nirt rays, or something that always
  prints mm, or a command that print radians instead of degrees).

* 'memory' command: reports memory and disk usage statistics.  for
  out-of-core memory (disk), report amount of available disk space,
  cache object / scratch space, and geometry file size.  for in-core
  memory, report virtual memory allocation size, % resident, total
  memory available, swap size, page faults, swap writes, etc.
  Obviously need a lot of libbu infrastructure for many of these
  features.

* 'compile' command: evaluate and cache results of geometry
  computations for improved performance.  this could be a variety of
  cache-worthy actions such as wireframes at given levels of detail,
  raytrace prep results, default tessellations, simple geometry
  validation (see 'audit' command), or shape analysis (surface area,
  volume, moments of inertia, etc).

* 'image' command: import/export an image.  similar to 'text' command,
  need option to crop, position, scale, and orient the image.  should
  default to a view-oriented "underlay" but permanently stored in the
  .g file as a proper image object (top-level TODO entry).

* 'layer' command: to create, select, delete, list enable/disable
  on/off, lock/unlock, and set other properties (e.g., color, style).
  need subcommand(s) to move geometry to/from layers, perhaps
  implemented as combs with a special flag like regions.

* 'menu' command: to load/unload menu descriptions from a file
  (e.g. file.mnu) where we bind text, icons, images, descriptions, and
  key bindings to actions.  would serve as a place to move
  existing menu-related commands (e.g., press command becomes
  subcommand) and allow for interface customization.

* 'offset' command: given an input 3D volume, constructs an interior
  or exterior surface.  this can be used to expand or hollow out an
  object.  probably implementable as 1) get brep tree, 2) evaluate
  brep, 3) expand/shrink per offset, 4) optionally apply boolean.

  # expand and hollow a sphere
  make sph sph
  offset sph 1.0 sph.bigger
  comb hollow_sph.c u sph.bigger - sph

  # hollow an object
  offset piston -5.0 piston.interior
  comb hollow_piston u piston - piston.interior

  # hollow object, perform edit
  offset piston -1.0 piston.interior piston.old
  # piston is now "u piston.old - piston.interior"

* 'redo' command: redoes the previous undone command(s).  Basically
  move forward in an undo chain.  See undo below.

* 'reduce' command: to perform model reduction.  should perform
  automatic simplification of geometry to reduce complexity by
  (potentially) orders of magnitude.  this is level of detail for
  non-viewing purposes, for export.  possibly automatable by replacing
  leave-node geometry with bounding box (arb8s), but collapsing and
  combining up the hierarchy to a prescribed tree depth.  however, it
  model includes BoTs/NURBS, more advanced spatial logic will be
  needed.  should/could also detect any unused/unreferenced geometry
  objects with options to select on a specific type (prims, combs,
  regions, all), perhaps as a purge or unused subcommand.

# 'render' command: to perform different kinds of rendering.  this may
  simply be a renaming of rtwizard, but the intent would be to make
  sure rt, rtedge, and rtwizard are encapsulated under one simplified
  command.  options for quick preview and full-detail rendering,
  without or with shaders, in color or B&W.

* 'repeat' command: perform an action multiple times.  this is similar
  to the search -exec option but instead of being limited to object
  substitutions, it lets you run the same action with any
  substitution.  it's basically a for loop construct over one command.

  # create a bunch of spheres
  repeat 1 2 3 -exec make sph sph.{}

  # create 9 objects
  repeat -m obj sph arb8 tor -exec "repeat -m cnt 1 2 3 -exec \"make {obj} {obj}.{cnt}\""

  # create 3 separate tessellations of an object
  repeat 0.1 0.01 0.001 -exec "tol abs {}" -exec "facetize sph.bot sph"

  Need to make sure that the repeat, search, and batch commands all
  have consistent/compatible marker syntax.  Also need to consider
  arguments or objects with '-' at the beginning of the name and how
  argv processing will be handled.

* 'select' command: creates a selection set based on specified
  sampling parameters or object lists.  Should also provide a basic
  command-line mechanism for implementing band selection based on
  current view, volume-based selections, and object highlighting.
  Would encapsulate or replace the unpublished 'sphgroup' command.
  Some examples:

  # select objects within a given distance from a 3d point
  select -point 12.3 23.1 31.2 -dist 100.0

  # select two objects,  create/return a temporary reference name
  select foo bar

* 'text' command: imports a text file (as geometry).  have options to
  specify the spacing between lines, first line, #lines,
  underline/overline each line, convert to all upper/lower, position.
  probably best to create either a 'plot' or 'annotation' object
  (described in top-level TODO).  need some convention for symbols,
  degree, +-tol, null diam, etc.

* 'time' command: reports the current date and time, a user timer,
  file creation time, last modification time, #writes, and accumulated
  editing time.  the user timer is a generic stopwatch for scripting
  use.  The rest requires the timestamping architecture and a runtime
  clock to track accumulation between writes.  basically, every time
  an object is written or the file is explicitly "saved", we'd write
  out time information.

* 'transact' command: describes a transaction as a series of commands
  to be run in succession which must all succeed for any to apply.
  this can be viewed as a meta-command or basic user script which can
  have parameterized arguments (providing a basic macro system).

  # basic export transaction, stateful (bleh, but familiar)
  transact begin dump_geometry
  make {sph} {sph}
  facetize {sph}.bot {sph}
  bot_dump {sph}.{dxf} {sph}.bot
  transact end dump_geometry
  transact run dump_geometry
  transact run dump_geometry sph=tor dxf=obj
  transact rm dump_geometry
  transact ls

  # non-stateful transaction
  transact run -exec "make {sph} {sph}" -exec "facetize {sph}.bot {sph}" -exec "bot_dump {sph}.{dxf} {sph}.bot"

* 'undo' command: undo the previous command or previous N commands.
  Should be stored as a chain or tree of events so you can cycle
  forwards or backwards vim/emacs style.  See redo command above.

* composable API, so you can pass results down similar to this
  database transaction, but less verbose:

  records = db::select(
              "products",
              db::intersection(
                db::intersection(
                  db::compare(
                    db::field("category"),
                    db::equal,
                    db::string("book")),
                  db::compare(
                    db::field("desc"),
                    db::like,
                    db::string("%algorithms%"))),
                db::compare(
                  db::field("stock"),
                  db::greater_than_or_equal,
                  db::integer(1))));

  which amounts to the following in SQL syntax:

    SELECT * FROM products
    WHERE category = 'book' AND desc LIKE '%algorithms%' AND stock >= 1;

