#include <cstdio>
#include <fstream>
#include <iostream>
#include <regex>
#include <string>

int main(int argc, const char **argv)
{
    int verbose = @EXTPROJ_VERBOSE@;
    std::smatch m;
    std::string build_path("@CMAKE_BINARY_DIR@");
    std::string install_path = std::string("@CMAKE_INSTALL_PREFIX@");

    // Because the input path might be anything, we need to quote it for
    // processing - see https://stackoverflow.com/a/40195721
    std::regex schars { R"([-[\]{}()*+?.,\^$|#\s])" };
    std::string bp_sanetized = std::regex_replace(build_path, schars, R"(\$&)");
    std::regex build_path_regex(bp_sanetized);

    if (argc < 1) {
	std::cerr << "Error: no file specified for processing.\n";
	return -1;
    }

    for (int i = 1; i < argc; i++) {
	std::string cline;
	std::string nfile_contents;
	std::ifstream fs;
	fs.open(argv[i]);
	if (!fs.is_open()) {
	    std::cerr << "Error: file " << argv[i] << " could not be opened.\n";
	    return -1;
	} else {
	    std::cerr << "-- Patching " << argv[i] << "\n";
	}

	while (std::getline(fs, cline)) {
	    std::string nline = std::regex_replace(cline, build_path_regex, install_path);
	    nfile_contents.append(nline);
	    nfile_contents.append("\n");
	    if (nline != cline && verbose > 1) {
	    	std::cerr << "   Changed line: " << cline << " -> " << nline << "\n";
	    }
	}

	fs.close();

	std::ofstream ofs(argv[i], std::ios::trunc);
	ofs << nfile_contents;
	ofs.close();
    }
}

// Local Variables:
// tab-width: 8
// mode: C++
// c-basic-offset: 4
// indent-tabs-mode: t
// c-file-style: "stroustrup"
// End:
// ex: shiftwidth=4 tabstop=8

