/*
 * itclIntDecls.h --
 *
 *	This file contains the declarations for all unsupported
 *	functions that are exported by the Tcl library.  These
 *	interfaces are not guaranteed to remain the same between
 *	versions.  Use at your own risk.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 */

#ifndef _ITCLINTDECLS
#define _ITCLINTDECLS

/*
 * WARNING: This file is automatically generated by the tools/genStubs.tcl
 * script.  Any modifications to the function declarations below should be made
 * in the itcl/generic/tclInt.decls script.
 */

/* !BEGIN!: Do not edit below this line. */

/*
 * Exported function declarations:
 */

#ifndef Itcl_IsClassNamespace_TCL_DECLARED
#define Itcl_IsClassNamespace_TCL_DECLARED
/* 0 */
TCL_EXTERN(int)		Itcl_IsClassNamespace _ANSI_ARGS_((
				Tcl_Namespace * namesp));
#endif
#ifndef Itcl_IsClass_TCL_DECLARED
#define Itcl_IsClass_TCL_DECLARED
/* 1 */
TCL_EXTERN(int)		Itcl_IsClass _ANSI_ARGS_((Tcl_Command cmd));
#endif
#ifndef Itcl_FindClass_TCL_DECLARED
#define Itcl_FindClass_TCL_DECLARED
/* 2 */
TCL_EXTERN(ItclClass*)	Itcl_FindClass _ANSI_ARGS_((Tcl_Interp* interp, 
				CONST char* path, int autoload));
#endif
#ifndef Itcl_FindObject_TCL_DECLARED
#define Itcl_FindObject_TCL_DECLARED
/* 3 */
TCL_EXTERN(int)		Itcl_FindObject _ANSI_ARGS_((Tcl_Interp * interp, 
				CONST char * name, ItclObject ** roPtr));
#endif
#ifndef Itcl_IsObject_TCL_DECLARED
#define Itcl_IsObject_TCL_DECLARED
/* 4 */
TCL_EXTERN(int)		Itcl_IsObject _ANSI_ARGS_((Tcl_Command cmd));
#endif
#ifndef Itcl_ObjectIsa_TCL_DECLARED
#define Itcl_ObjectIsa_TCL_DECLARED
/* 5 */
TCL_EXTERN(int)		Itcl_ObjectIsa _ANSI_ARGS_((ItclObject * contextObj, 
				ItclClass * cdefn));
#endif
#ifndef Itcl_Protection_TCL_DECLARED
#define Itcl_Protection_TCL_DECLARED
/* 6 */
TCL_EXTERN(int)		Itcl_Protection _ANSI_ARGS_((Tcl_Interp * interp, 
				int newLevel));
#endif
#ifndef Itcl_ProtectionStr_TCL_DECLARED
#define Itcl_ProtectionStr_TCL_DECLARED
/* 7 */
TCL_EXTERN(char*)	Itcl_ProtectionStr _ANSI_ARGS_((int pLevel));
#endif
#ifndef Itcl_CanAccess_TCL_DECLARED
#define Itcl_CanAccess_TCL_DECLARED
/* 8 */
TCL_EXTERN(int)		Itcl_CanAccess _ANSI_ARGS_((ItclMember* memberPtr, 
				Tcl_Namespace* fromNsPtr));
#endif
#ifndef Itcl_CanAccessFunc_TCL_DECLARED
#define Itcl_CanAccessFunc_TCL_DECLARED
/* 9 */
TCL_EXTERN(int)		Itcl_CanAccessFunc _ANSI_ARGS_((
				ItclMemberFunc* mfunc, 
				Tcl_Namespace* fromNsPtr));
#endif
#ifndef Itcl_GetTrueNamespace_TCL_DECLARED
#define Itcl_GetTrueNamespace_TCL_DECLARED
/* 10 */
TCL_EXTERN(Tcl_Namespace*) Itcl_GetTrueNamespace _ANSI_ARGS_((
				Tcl_Interp * interp, ItclObjectInfo * info));
#endif
#ifndef Itcl_ParseNamespPath_TCL_DECLARED
#define Itcl_ParseNamespPath_TCL_DECLARED
/* 11 */
TCL_EXTERN(void)	Itcl_ParseNamespPath _ANSI_ARGS_((CONST char * name, 
				Tcl_DString * buffer, char ** head, 
				char ** tail));
#endif
#ifndef Itcl_DecodeScopedCommand_TCL_DECLARED
#define Itcl_DecodeScopedCommand_TCL_DECLARED
/* 12 */
TCL_EXTERN(int)		Itcl_DecodeScopedCommand _ANSI_ARGS_((
				Tcl_Interp * interp, CONST char * name, 
				Tcl_Namespace ** rNsPtr, char ** rCmdPtr));
#endif
#ifndef Itcl_EvalArgs_TCL_DECLARED
#define Itcl_EvalArgs_TCL_DECLARED
/* 13 */
TCL_EXTERN(int)		Itcl_EvalArgs _ANSI_ARGS_((Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_CreateArgs_TCL_DECLARED
#define Itcl_CreateArgs_TCL_DECLARED
/* 14 */
TCL_EXTERN(Tcl_Obj*)	Itcl_CreateArgs _ANSI_ARGS_((Tcl_Interp * interp, 
				CONST char * string, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_PushContext_TCL_DECLARED
#define Itcl_PushContext_TCL_DECLARED
/* 15 */
TCL_EXTERN(int)		Itcl_PushContext _ANSI_ARGS_((Tcl_Interp * interp, 
				ItclMember * member, 
				ItclClass * contextClass, 
				ItclObject * contextObj, 
				ItclContext * contextPtr));
#endif
#ifndef Itcl_PopContext_TCL_DECLARED
#define Itcl_PopContext_TCL_DECLARED
/* 16 */
TCL_EXTERN(void)	Itcl_PopContext _ANSI_ARGS_((Tcl_Interp * interp, 
				ItclContext * contextPtr));
#endif
#ifndef Itcl_GetContext_TCL_DECLARED
#define Itcl_GetContext_TCL_DECLARED
/* 17 */
TCL_EXTERN(int)		Itcl_GetContext _ANSI_ARGS_((Tcl_Interp * interp, 
				ItclClass ** cdefnPtr, 
				ItclObject ** odefnPtr));
#endif
#ifndef Itcl_InitHierIter_TCL_DECLARED
#define Itcl_InitHierIter_TCL_DECLARED
/* 18 */
TCL_EXTERN(void)	Itcl_InitHierIter _ANSI_ARGS_((ItclHierIter * iter, 
				ItclClass * cdefn));
#endif
#ifndef Itcl_DeleteHierIter_TCL_DECLARED
#define Itcl_DeleteHierIter_TCL_DECLARED
/* 19 */
TCL_EXTERN(void)	Itcl_DeleteHierIter _ANSI_ARGS_((ItclHierIter * iter));
#endif
#ifndef Itcl_AdvanceHierIter_TCL_DECLARED
#define Itcl_AdvanceHierIter_TCL_DECLARED
/* 20 */
TCL_EXTERN(ItclClass*)	Itcl_AdvanceHierIter _ANSI_ARGS_((
				ItclHierIter * iter));
#endif
#ifndef Itcl_FindClassesCmd_TCL_DECLARED
#define Itcl_FindClassesCmd_TCL_DECLARED
/* 21 */
TCL_EXTERN(int)		Itcl_FindClassesCmd _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_FindObjectsCmd_TCL_DECLARED
#define Itcl_FindObjectsCmd_TCL_DECLARED
/* 22 */
TCL_EXTERN(int)		Itcl_FindObjectsCmd _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_ProtectionCmd_TCL_DECLARED
#define Itcl_ProtectionCmd_TCL_DECLARED
/* 23 */
TCL_EXTERN(int)		Itcl_ProtectionCmd _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_DelClassCmd_TCL_DECLARED
#define Itcl_DelClassCmd_TCL_DECLARED
/* 24 */
TCL_EXTERN(int)		Itcl_DelClassCmd _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_DelObjectCmd_TCL_DECLARED
#define Itcl_DelObjectCmd_TCL_DECLARED
/* 25 */
TCL_EXTERN(int)		Itcl_DelObjectCmd _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_ScopeCmd_TCL_DECLARED
#define Itcl_ScopeCmd_TCL_DECLARED
/* 26 */
TCL_EXTERN(int)		Itcl_ScopeCmd _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_CodeCmd_TCL_DECLARED
#define Itcl_CodeCmd_TCL_DECLARED
/* 27 */
TCL_EXTERN(int)		Itcl_CodeCmd _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_StubCreateCmd_TCL_DECLARED
#define Itcl_StubCreateCmd_TCL_DECLARED
/* 28 */
TCL_EXTERN(int)		Itcl_StubCreateCmd _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_StubExistsCmd_TCL_DECLARED
#define Itcl_StubExistsCmd_TCL_DECLARED
/* 29 */
TCL_EXTERN(int)		Itcl_StubExistsCmd _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_IsStub_TCL_DECLARED
#define Itcl_IsStub_TCL_DECLARED
/* 30 */
TCL_EXTERN(int)		Itcl_IsStub _ANSI_ARGS_((Tcl_Command cmd));
#endif
#ifndef Itcl_CreateClass_TCL_DECLARED
#define Itcl_CreateClass_TCL_DECLARED
/* 31 */
TCL_EXTERN(int)		Itcl_CreateClass _ANSI_ARGS_((Tcl_Interp* interp, 
				CONST char* path, ItclObjectInfo * info, 
				ItclClass ** rPtr));
#endif
#ifndef Itcl_DeleteClass_TCL_DECLARED
#define Itcl_DeleteClass_TCL_DECLARED
/* 32 */
TCL_EXTERN(int)		Itcl_DeleteClass _ANSI_ARGS_((Tcl_Interp * interp, 
				ItclClass * cdefnPtr));
#endif
#ifndef Itcl_FindClassNamespace_TCL_DECLARED
#define Itcl_FindClassNamespace_TCL_DECLARED
/* 33 */
TCL_EXTERN(Tcl_Namespace*) Itcl_FindClassNamespace _ANSI_ARGS_((
				Tcl_Interp* interp, CONST char* path));
#endif
#ifndef Itcl_HandleClass_TCL_DECLARED
#define Itcl_HandleClass_TCL_DECLARED
/* 34 */
TCL_EXTERN(int)		Itcl_HandleClass _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_ClassCmdResolver_TCL_DECLARED
#define Itcl_ClassCmdResolver_TCL_DECLARED
/* 35 */
TCL_EXTERN(int)		Itcl_ClassCmdResolver _ANSI_ARGS_((
				Tcl_Interp * interp, CONST char* name, 
				Tcl_Namespace * context, int flags, 
				Tcl_Command * rPtr));
#endif
#ifndef Itcl_ClassVarResolver_TCL_DECLARED
#define Itcl_ClassVarResolver_TCL_DECLARED
/* 36 */
TCL_EXTERN(int)		Itcl_ClassVarResolver _ANSI_ARGS_((
				Tcl_Interp * interp, CONST char* name, 
				Tcl_Namespace * context, int flags, 
				Tcl_Var * rPtr));
#endif
#ifndef Itcl_ClassCompiledVarResolver_TCL_DECLARED
#define Itcl_ClassCompiledVarResolver_TCL_DECLARED
/* 37 */
TCL_EXTERN(int)		Itcl_ClassCompiledVarResolver _ANSI_ARGS_((
				Tcl_Interp * interp, CONST char* name, 
				int length, Tcl_Namespace * context, 
				Tcl_ResolvedVarInfo ** rPtr));
#endif
#ifndef Itcl_BuildVirtualTables_TCL_DECLARED
#define Itcl_BuildVirtualTables_TCL_DECLARED
/* 38 */
TCL_EXTERN(void)	Itcl_BuildVirtualTables _ANSI_ARGS_((
				ItclClass* cdefnPtr));
#endif
#ifndef Itcl_CreateVarDefn_TCL_DECLARED
#define Itcl_CreateVarDefn_TCL_DECLARED
/* 39 */
TCL_EXTERN(int)		Itcl_CreateVarDefn _ANSI_ARGS_((Tcl_Interp * interp, 
				ItclClass* cdefn, char* name, char* init, 
				char* config, ItclVarDefn** vdefnPtr));
#endif
#ifndef Itcl_DeleteVarDefn_TCL_DECLARED
#define Itcl_DeleteVarDefn_TCL_DECLARED
/* 40 */
TCL_EXTERN(void)	Itcl_DeleteVarDefn _ANSI_ARGS_((ItclVarDefn * vdefn));
#endif
#ifndef Itcl_GetCommonVar_TCL_DECLARED
#define Itcl_GetCommonVar_TCL_DECLARED
/* 41 */
TCL_EXTERN(CONST char*)	 Itcl_GetCommonVar _ANSI_ARGS_((Tcl_Interp * interp, 
				CONST char * name, ItclClass * contextClass));
#endif
#ifndef Itcl_CreateMember_TCL_DECLARED
#define Itcl_CreateMember_TCL_DECLARED
/* 42 */
TCL_EXTERN(ItclMember*)	 Itcl_CreateMember _ANSI_ARGS_((Tcl_Interp* interp, 
				ItclClass * cdefn, CONST char* name));
#endif
#ifndef Itcl_DeleteMember_TCL_DECLARED
#define Itcl_DeleteMember_TCL_DECLARED
/* 43 */
TCL_EXTERN(void)	Itcl_DeleteMember _ANSI_ARGS_((ItclMember * memPtr));
#endif
#ifndef Itcl_CreateObject_TCL_DECLARED
#define Itcl_CreateObject_TCL_DECLARED
/* 44 */
TCL_EXTERN(int)		Itcl_CreateObject _ANSI_ARGS_((Tcl_Interp * interp, 
				CONST char* name, ItclClass * cdefn, 
				int objc, Tcl_Obj *CONST objv[], 
				ItclObject ** roPtr));
#endif
#ifndef Itcl_DeleteObject_TCL_DECLARED
#define Itcl_DeleteObject_TCL_DECLARED
/* 45 */
TCL_EXTERN(int)		Itcl_DeleteObject _ANSI_ARGS_((Tcl_Interp * interp, 
				ItclObject * contextObj));
#endif
#ifndef Itcl_DestructObject_TCL_DECLARED
#define Itcl_DestructObject_TCL_DECLARED
/* 46 */
TCL_EXTERN(int)		Itcl_DestructObject _ANSI_ARGS_((Tcl_Interp * interp, 
				ItclObject * contextObj, int flags));
#endif
#ifndef Itcl_HandleInstance_TCL_DECLARED
#define Itcl_HandleInstance_TCL_DECLARED
/* 47 */
TCL_EXTERN(int)		Itcl_HandleInstance _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_GetInstanceVar_TCL_DECLARED
#define Itcl_GetInstanceVar_TCL_DECLARED
/* 48 */
TCL_EXTERN(CONST char*)	 Itcl_GetInstanceVar _ANSI_ARGS_((
				Tcl_Interp * interp, CONST char * name, 
				ItclObject * contextObj, 
				ItclClass * contextClass));
#endif
#ifndef Itcl_ScopedVarResolver_TCL_DECLARED
#define Itcl_ScopedVarResolver_TCL_DECLARED
/* 49 */
TCL_EXTERN(int)		Itcl_ScopedVarResolver _ANSI_ARGS_((
				Tcl_Interp * interp, CONST char * name, 
				Tcl_Namespace * contextNs, int flags, 
				Tcl_Var * rPtr));
#endif
#ifndef Itcl_BodyCmd_TCL_DECLARED
#define Itcl_BodyCmd_TCL_DECLARED
/* 50 */
TCL_EXTERN(int)		Itcl_BodyCmd _ANSI_ARGS_((ClientData dummy, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_ConfigBodyCmd_TCL_DECLARED
#define Itcl_ConfigBodyCmd_TCL_DECLARED
/* 51 */
TCL_EXTERN(int)		Itcl_ConfigBodyCmd _ANSI_ARGS_((ClientData dummy, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_CreateMethod_TCL_DECLARED
#define Itcl_CreateMethod_TCL_DECLARED
/* 52 */
TCL_EXTERN(int)		Itcl_CreateMethod _ANSI_ARGS_((Tcl_Interp* interp, 
				ItclClass * cdefn, CONST char* name, 
				CONST char* arglist, CONST char* body));
#endif
#ifndef Itcl_CreateProc_TCL_DECLARED
#define Itcl_CreateProc_TCL_DECLARED
/* 53 */
TCL_EXTERN(int)		Itcl_CreateProc _ANSI_ARGS_((Tcl_Interp* interp, 
				ItclClass * cdefn, CONST char* name, 
				CONST char* arglist, CONST char* body));
#endif
#ifndef Itcl_CreateMemberFunc_TCL_DECLARED
#define Itcl_CreateMemberFunc_TCL_DECLARED
/* 54 */
TCL_EXTERN(int)		Itcl_CreateMemberFunc _ANSI_ARGS_((
				Tcl_Interp* interp, ItclClass * cdefn, 
				CONST char* name, CONST char* arglist, 
				CONST char* body, ItclMemberFunc** mfuncPtr));
#endif
#ifndef Itcl_ChangeMemberFunc_TCL_DECLARED
#define Itcl_ChangeMemberFunc_TCL_DECLARED
/* 55 */
TCL_EXTERN(int)		Itcl_ChangeMemberFunc _ANSI_ARGS_((
				Tcl_Interp* interp, ItclMemberFunc* mfunc, 
				CONST char* arglist, CONST char* body));
#endif
#ifndef Itcl_DeleteMemberFunc_TCL_DECLARED
#define Itcl_DeleteMemberFunc_TCL_DECLARED
/* 56 */
TCL_EXTERN(void)	Itcl_DeleteMemberFunc _ANSI_ARGS_((CONST char* cdata));
#endif
#ifndef Itcl_CreateMemberCode_TCL_DECLARED
#define Itcl_CreateMemberCode_TCL_DECLARED
/* 57 */
TCL_EXTERN(int)		Itcl_CreateMemberCode _ANSI_ARGS_((
				Tcl_Interp* interp, ItclClass * cdefn, 
				CONST char* arglist, CONST char* body, 
				ItclMemberCode** mcodePtr));
#endif
#ifndef Itcl_DeleteMemberCode_TCL_DECLARED
#define Itcl_DeleteMemberCode_TCL_DECLARED
/* 58 */
TCL_EXTERN(void)	Itcl_DeleteMemberCode _ANSI_ARGS_((CONST char* cdata));
#endif
#ifndef Itcl_GetMemberCode_TCL_DECLARED
#define Itcl_GetMemberCode_TCL_DECLARED
/* 59 */
TCL_EXTERN(int)		Itcl_GetMemberCode _ANSI_ARGS_((Tcl_Interp* interp, 
				ItclMember* member));
#endif
/* Slot 60 is reserved */
#ifndef Itcl_EvalMemberCode_TCL_DECLARED
#define Itcl_EvalMemberCode_TCL_DECLARED
/* 61 */
TCL_EXTERN(int)		Itcl_EvalMemberCode _ANSI_ARGS_((Tcl_Interp * interp, 
				ItclMemberFunc * mfunc, ItclMember * member, 
				ItclObject * contextObj, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_CreateArgList_TCL_DECLARED
#define Itcl_CreateArgList_TCL_DECLARED
/* 62 */
TCL_EXTERN(int)		Itcl_CreateArgList _ANSI_ARGS_((Tcl_Interp* interp, 
				CONST char* decl, int* argcPtr, 
				CompiledLocal** argPtr));
#endif
#ifndef Itcl_CreateArg_TCL_DECLARED
#define Itcl_CreateArg_TCL_DECLARED
/* 63 */
TCL_EXTERN(CompiledLocal*) Itcl_CreateArg _ANSI_ARGS_((CONST char* name, 
				CONST char* init));
#endif
#ifndef Itcl_DeleteArgList_TCL_DECLARED
#define Itcl_DeleteArgList_TCL_DECLARED
/* 64 */
TCL_EXTERN(void)	Itcl_DeleteArgList _ANSI_ARGS_((
				CompiledLocal * arglist));
#endif
#ifndef Itcl_ArgList_TCL_DECLARED
#define Itcl_ArgList_TCL_DECLARED
/* 65 */
TCL_EXTERN(Tcl_Obj*)	Itcl_ArgList _ANSI_ARGS_((int argc, 
				CompiledLocal* arglist));
#endif
#ifndef Itcl_EquivArgLists_TCL_DECLARED
#define Itcl_EquivArgLists_TCL_DECLARED
/* 66 */
TCL_EXTERN(int)		Itcl_EquivArgLists _ANSI_ARGS_((CompiledLocal* arg1, 
				int arg1c, CompiledLocal* arg2, int arg2c));
#endif
#ifndef Itcl_GetMemberFuncUsage_TCL_DECLARED
#define Itcl_GetMemberFuncUsage_TCL_DECLARED
/* 67 */
TCL_EXTERN(void)	Itcl_GetMemberFuncUsage _ANSI_ARGS_((
				ItclMemberFunc * mfunc, 
				ItclObject * contextObj, Tcl_Obj * objPtr));
#endif
#ifndef Itcl_ExecMethod_TCL_DECLARED
#define Itcl_ExecMethod_TCL_DECLARED
/* 68 */
TCL_EXTERN(int)		Itcl_ExecMethod _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_ExecProc_TCL_DECLARED
#define Itcl_ExecProc_TCL_DECLARED
/* 69 */
TCL_EXTERN(int)		Itcl_ExecProc _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_AssignArgs_TCL_DECLARED
#define Itcl_AssignArgs_TCL_DECLARED
/* 70 */
TCL_EXTERN(int)		Itcl_AssignArgs _ANSI_ARGS_((Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[], 
				ItclMemberFunc * mfunc));
#endif
#ifndef Itcl_ConstructBase_TCL_DECLARED
#define Itcl_ConstructBase_TCL_DECLARED
/* 71 */
TCL_EXTERN(int)		Itcl_ConstructBase _ANSI_ARGS_((Tcl_Interp * interp, 
				ItclObject * contextObj, 
				ItclClass * contextClass));
#endif
#ifndef Itcl_InvokeMethodIfExists_TCL_DECLARED
#define Itcl_InvokeMethodIfExists_TCL_DECLARED
/* 72 */
TCL_EXTERN(int)		Itcl_InvokeMethodIfExists _ANSI_ARGS_((
				Tcl_Interp * interp, CONST char * name, 
				ItclClass * contextClass, 
				ItclObject * contextObj, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
/* Slot 73 is reserved */
#ifndef Itcl_ReportFuncErrors_TCL_DECLARED
#define Itcl_ReportFuncErrors_TCL_DECLARED
/* 74 */
TCL_EXTERN(int)		Itcl_ReportFuncErrors _ANSI_ARGS_((
				Tcl_Interp* interp, ItclMemberFunc * mfunc, 
				ItclObject * contextObj, int result));
#endif
#ifndef Itcl_ParseInit_TCL_DECLARED
#define Itcl_ParseInit_TCL_DECLARED
/* 75 */
TCL_EXTERN(int)		Itcl_ParseInit _ANSI_ARGS_((Tcl_Interp * interp, 
				ItclObjectInfo * info));
#endif
#ifndef Itcl_ClassCmd_TCL_DECLARED
#define Itcl_ClassCmd_TCL_DECLARED
/* 76 */
TCL_EXTERN(int)		Itcl_ClassCmd _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_ClassInheritCmd_TCL_DECLARED
#define Itcl_ClassInheritCmd_TCL_DECLARED
/* 77 */
TCL_EXTERN(int)		Itcl_ClassInheritCmd _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_ClassProtectionCmd_TCL_DECLARED
#define Itcl_ClassProtectionCmd_TCL_DECLARED
/* 78 */
TCL_EXTERN(int)		Itcl_ClassProtectionCmd _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_ClassConstructorCmd_TCL_DECLARED
#define Itcl_ClassConstructorCmd_TCL_DECLARED
/* 79 */
TCL_EXTERN(int)		Itcl_ClassConstructorCmd _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_ClassDestructorCmd_TCL_DECLARED
#define Itcl_ClassDestructorCmd_TCL_DECLARED
/* 80 */
TCL_EXTERN(int)		Itcl_ClassDestructorCmd _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_ClassMethodCmd_TCL_DECLARED
#define Itcl_ClassMethodCmd_TCL_DECLARED
/* 81 */
TCL_EXTERN(int)		Itcl_ClassMethodCmd _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_ClassProcCmd_TCL_DECLARED
#define Itcl_ClassProcCmd_TCL_DECLARED
/* 82 */
TCL_EXTERN(int)		Itcl_ClassProcCmd _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_ClassVariableCmd_TCL_DECLARED
#define Itcl_ClassVariableCmd_TCL_DECLARED
/* 83 */
TCL_EXTERN(int)		Itcl_ClassVariableCmd _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_ClassCommonCmd_TCL_DECLARED
#define Itcl_ClassCommonCmd_TCL_DECLARED
/* 84 */
TCL_EXTERN(int)		Itcl_ClassCommonCmd _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_ParseVarResolver_TCL_DECLARED
#define Itcl_ParseVarResolver_TCL_DECLARED
/* 85 */
TCL_EXTERN(int)		Itcl_ParseVarResolver _ANSI_ARGS_((
				Tcl_Interp * interp, CONST char* name, 
				Tcl_Namespace * contextNs, int flags, 
				Tcl_Var* rPtr));
#endif
#ifndef Itcl_BiInit_TCL_DECLARED
#define Itcl_BiInit_TCL_DECLARED
/* 86 */
TCL_EXTERN(int)		Itcl_BiInit _ANSI_ARGS_((Tcl_Interp * interp));
#endif
#ifndef Itcl_InstallBiMethods_TCL_DECLARED
#define Itcl_InstallBiMethods_TCL_DECLARED
/* 87 */
TCL_EXTERN(int)		Itcl_InstallBiMethods _ANSI_ARGS_((
				Tcl_Interp * interp, ItclClass * cdefn));
#endif
#ifndef Itcl_BiIsaCmd_TCL_DECLARED
#define Itcl_BiIsaCmd_TCL_DECLARED
/* 88 */
TCL_EXTERN(int)		Itcl_BiIsaCmd _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_BiConfigureCmd_TCL_DECLARED
#define Itcl_BiConfigureCmd_TCL_DECLARED
/* 89 */
TCL_EXTERN(int)		Itcl_BiConfigureCmd _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_BiCgetCmd_TCL_DECLARED
#define Itcl_BiCgetCmd_TCL_DECLARED
/* 90 */
TCL_EXTERN(int)		Itcl_BiCgetCmd _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_BiChainCmd_TCL_DECLARED
#define Itcl_BiChainCmd_TCL_DECLARED
/* 91 */
TCL_EXTERN(int)		Itcl_BiChainCmd _ANSI_ARGS_((ClientData dummy, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_BiInfoClassCmd_TCL_DECLARED
#define Itcl_BiInfoClassCmd_TCL_DECLARED
/* 92 */
TCL_EXTERN(int)		Itcl_BiInfoClassCmd _ANSI_ARGS_((ClientData dummy, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_BiInfoInheritCmd_TCL_DECLARED
#define Itcl_BiInfoInheritCmd_TCL_DECLARED
/* 93 */
TCL_EXTERN(int)		Itcl_BiInfoInheritCmd _ANSI_ARGS_((ClientData dummy, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_BiInfoHeritageCmd_TCL_DECLARED
#define Itcl_BiInfoHeritageCmd_TCL_DECLARED
/* 94 */
TCL_EXTERN(int)		Itcl_BiInfoHeritageCmd _ANSI_ARGS_((ClientData dummy, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_BiInfoFunctionCmd_TCL_DECLARED
#define Itcl_BiInfoFunctionCmd_TCL_DECLARED
/* 95 */
TCL_EXTERN(int)		Itcl_BiInfoFunctionCmd _ANSI_ARGS_((ClientData dummy, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_BiInfoVariableCmd_TCL_DECLARED
#define Itcl_BiInfoVariableCmd_TCL_DECLARED
/* 96 */
TCL_EXTERN(int)		Itcl_BiInfoVariableCmd _ANSI_ARGS_((ClientData dummy, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_BiInfoBodyCmd_TCL_DECLARED
#define Itcl_BiInfoBodyCmd_TCL_DECLARED
/* 97 */
TCL_EXTERN(int)		Itcl_BiInfoBodyCmd _ANSI_ARGS_((ClientData dummy, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_BiInfoArgsCmd_TCL_DECLARED
#define Itcl_BiInfoArgsCmd_TCL_DECLARED
/* 98 */
TCL_EXTERN(int)		Itcl_BiInfoArgsCmd _ANSI_ARGS_((ClientData dummy, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_DefaultInfoCmd_TCL_DECLARED
#define Itcl_DefaultInfoCmd_TCL_DECLARED
/* 99 */
TCL_EXTERN(int)		Itcl_DefaultInfoCmd _ANSI_ARGS_((ClientData dummy, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_EnsembleInit_TCL_DECLARED
#define Itcl_EnsembleInit_TCL_DECLARED
/* 100 */
TCL_EXTERN(int)		Itcl_EnsembleInit _ANSI_ARGS_((Tcl_Interp * interp));
#endif
#ifndef Itcl_CreateEnsemble_TCL_DECLARED
#define Itcl_CreateEnsemble_TCL_DECLARED
/* 101 */
TCL_EXTERN(int)		Itcl_CreateEnsemble _ANSI_ARGS_((Tcl_Interp * interp, 
				CONST char* ensName));
#endif
#ifndef Itcl_AddEnsemblePart_TCL_DECLARED
#define Itcl_AddEnsemblePart_TCL_DECLARED
/* 102 */
TCL_EXTERN(int)		Itcl_AddEnsemblePart _ANSI_ARGS_((
				Tcl_Interp * interp, CONST char* ensName, 
				CONST char* partName, CONST char* usageInfo, 
				Tcl_ObjCmdProc * objProc, 
				ClientData clientData, 
				Tcl_CmdDeleteProc * deleteProc));
#endif
#ifndef Itcl_GetEnsemblePart_TCL_DECLARED
#define Itcl_GetEnsemblePart_TCL_DECLARED
/* 103 */
TCL_EXTERN(int)		Itcl_GetEnsemblePart _ANSI_ARGS_((
				Tcl_Interp * interp, CONST char * ensName, 
				CONST char * partName, Tcl_CmdInfo * infoPtr));
#endif
#ifndef Itcl_IsEnsemble_TCL_DECLARED
#define Itcl_IsEnsemble_TCL_DECLARED
/* 104 */
TCL_EXTERN(int)		Itcl_IsEnsemble _ANSI_ARGS_((Tcl_CmdInfo* infoPtr));
#endif
#ifndef Itcl_GetEnsembleUsage_TCL_DECLARED
#define Itcl_GetEnsembleUsage_TCL_DECLARED
/* 105 */
TCL_EXTERN(int)		Itcl_GetEnsembleUsage _ANSI_ARGS_((
				Tcl_Interp * interp, CONST char * ensName, 
				Tcl_Obj * objPtr));
#endif
#ifndef Itcl_GetEnsembleUsageForObj_TCL_DECLARED
#define Itcl_GetEnsembleUsageForObj_TCL_DECLARED
/* 106 */
TCL_EXTERN(int)		Itcl_GetEnsembleUsageForObj _ANSI_ARGS_((
				Tcl_Interp * interp, Tcl_Obj * ensObjPtr, 
				Tcl_Obj * objPtr));
#endif
#ifndef Itcl_EnsembleCmd_TCL_DECLARED
#define Itcl_EnsembleCmd_TCL_DECLARED
/* 107 */
TCL_EXTERN(int)		Itcl_EnsembleCmd _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_EnsPartCmd_TCL_DECLARED
#define Itcl_EnsPartCmd_TCL_DECLARED
/* 108 */
TCL_EXTERN(int)		Itcl_EnsPartCmd _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_EnsembleErrorCmd_TCL_DECLARED
#define Itcl_EnsembleErrorCmd_TCL_DECLARED
/* 109 */
TCL_EXTERN(int)		Itcl_EnsembleErrorCmd _ANSI_ARGS_((
				ClientData clientData, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
/* Slot 110 is reserved */
/* Slot 111 is reserved */
#ifndef _Tcl_GetCallFrame_TCL_DECLARED
#define _Tcl_GetCallFrame_TCL_DECLARED
/* 112 */
TCL_EXTERN(Itcl_CallFrame*) _Tcl_GetCallFrame _ANSI_ARGS_((
				Tcl_Interp * interp, int level));
#endif
#ifndef _Tcl_ActivateCallFrame_TCL_DECLARED
#define _Tcl_ActivateCallFrame_TCL_DECLARED
/* 113 */
TCL_EXTERN(Itcl_CallFrame*) _Tcl_ActivateCallFrame _ANSI_ARGS_((
				Tcl_Interp * interp, 
				Itcl_CallFrame * framePtr));
#endif
#ifndef _TclNewVar_TCL_DECLARED
#define _TclNewVar_TCL_DECLARED
/* 114 */
TCL_EXTERN(Var*)	_TclNewVar _ANSI_ARGS_((void));
#endif
#ifndef Itcl_Assert_TCL_DECLARED
#define Itcl_Assert_TCL_DECLARED
/* 115 */
TCL_EXTERN(void)	Itcl_Assert _ANSI_ARGS_((CONST char * testExpr, 
				CONST char * fileName, int lineNum));
#endif
#ifndef Itcl_IsObjectCmd_TCL_DECLARED
#define Itcl_IsObjectCmd_TCL_DECLARED
/* 116 */
TCL_EXTERN(int)		Itcl_IsObjectCmd _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itcl_IsClassCmd_TCL_DECLARED
#define Itcl_IsClassCmd_TCL_DECLARED
/* 117 */
TCL_EXTERN(int)		Itcl_IsClassCmd _ANSI_ARGS_((ClientData clientData, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif

typedef struct ItclIntStubs {
    int magic;
    struct ItclIntStubHooks *hooks;

    int (*itcl_IsClassNamespace) _ANSI_ARGS_((Tcl_Namespace * namesp)); /* 0 */
    int (*itcl_IsClass) _ANSI_ARGS_((Tcl_Command cmd)); /* 1 */
    ItclClass* (*itcl_FindClass) _ANSI_ARGS_((Tcl_Interp* interp, CONST char* path, int autoload)); /* 2 */
    int (*itcl_FindObject) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * name, ItclObject ** roPtr)); /* 3 */
    int (*itcl_IsObject) _ANSI_ARGS_((Tcl_Command cmd)); /* 4 */
    int (*itcl_ObjectIsa) _ANSI_ARGS_((ItclObject * contextObj, ItclClass * cdefn)); /* 5 */
    int (*itcl_Protection) _ANSI_ARGS_((Tcl_Interp * interp, int newLevel)); /* 6 */
    char* (*itcl_ProtectionStr) _ANSI_ARGS_((int pLevel)); /* 7 */
    int (*itcl_CanAccess) _ANSI_ARGS_((ItclMember* memberPtr, Tcl_Namespace* fromNsPtr)); /* 8 */
    int (*itcl_CanAccessFunc) _ANSI_ARGS_((ItclMemberFunc* mfunc, Tcl_Namespace* fromNsPtr)); /* 9 */
    Tcl_Namespace* (*itcl_GetTrueNamespace) _ANSI_ARGS_((Tcl_Interp * interp, ItclObjectInfo * info)); /* 10 */
    void (*itcl_ParseNamespPath) _ANSI_ARGS_((CONST char * name, Tcl_DString * buffer, char ** head, char ** tail)); /* 11 */
    int (*itcl_DecodeScopedCommand) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * name, Tcl_Namespace ** rNsPtr, char ** rCmdPtr)); /* 12 */
    int (*itcl_EvalArgs) _ANSI_ARGS_((Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 13 */
    Tcl_Obj* (*itcl_CreateArgs) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * string, int objc, Tcl_Obj *CONST objv[])); /* 14 */
    int (*itcl_PushContext) _ANSI_ARGS_((Tcl_Interp * interp, ItclMember * member, ItclClass * contextClass, ItclObject * contextObj, ItclContext * contextPtr)); /* 15 */
    void (*itcl_PopContext) _ANSI_ARGS_((Tcl_Interp * interp, ItclContext * contextPtr)); /* 16 */
    int (*itcl_GetContext) _ANSI_ARGS_((Tcl_Interp * interp, ItclClass ** cdefnPtr, ItclObject ** odefnPtr)); /* 17 */
    void (*itcl_InitHierIter) _ANSI_ARGS_((ItclHierIter * iter, ItclClass * cdefn)); /* 18 */
    void (*itcl_DeleteHierIter) _ANSI_ARGS_((ItclHierIter * iter)); /* 19 */
    ItclClass* (*itcl_AdvanceHierIter) _ANSI_ARGS_((ItclHierIter * iter)); /* 20 */
    int (*itcl_FindClassesCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 21 */
    int (*itcl_FindObjectsCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 22 */
    int (*itcl_ProtectionCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 23 */
    int (*itcl_DelClassCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 24 */
    int (*itcl_DelObjectCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 25 */
    int (*itcl_ScopeCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 26 */
    int (*itcl_CodeCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 27 */
    int (*itcl_StubCreateCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 28 */
    int (*itcl_StubExistsCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 29 */
    int (*itcl_IsStub) _ANSI_ARGS_((Tcl_Command cmd)); /* 30 */
    int (*itcl_CreateClass) _ANSI_ARGS_((Tcl_Interp* interp, CONST char* path, ItclObjectInfo * info, ItclClass ** rPtr)); /* 31 */
    int (*itcl_DeleteClass) _ANSI_ARGS_((Tcl_Interp * interp, ItclClass * cdefnPtr)); /* 32 */
    Tcl_Namespace* (*itcl_FindClassNamespace) _ANSI_ARGS_((Tcl_Interp* interp, CONST char* path)); /* 33 */
    int (*itcl_HandleClass) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 34 */
    int (*itcl_ClassCmdResolver) _ANSI_ARGS_((Tcl_Interp * interp, CONST char* name, Tcl_Namespace * context, int flags, Tcl_Command * rPtr)); /* 35 */
    int (*itcl_ClassVarResolver) _ANSI_ARGS_((Tcl_Interp * interp, CONST char* name, Tcl_Namespace * context, int flags, Tcl_Var * rPtr)); /* 36 */
    int (*itcl_ClassCompiledVarResolver) _ANSI_ARGS_((Tcl_Interp * interp, CONST char* name, int length, Tcl_Namespace * context, Tcl_ResolvedVarInfo ** rPtr)); /* 37 */
    void (*itcl_BuildVirtualTables) _ANSI_ARGS_((ItclClass* cdefnPtr)); /* 38 */
    int (*itcl_CreateVarDefn) _ANSI_ARGS_((Tcl_Interp * interp, ItclClass* cdefn, char* name, char* init, char* config, ItclVarDefn** vdefnPtr)); /* 39 */
    void (*itcl_DeleteVarDefn) _ANSI_ARGS_((ItclVarDefn * vdefn)); /* 40 */
    CONST char* (*itcl_GetCommonVar) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * name, ItclClass * contextClass)); /* 41 */
    ItclMember* (*itcl_CreateMember) _ANSI_ARGS_((Tcl_Interp* interp, ItclClass * cdefn, CONST char* name)); /* 42 */
    void (*itcl_DeleteMember) _ANSI_ARGS_((ItclMember * memPtr)); /* 43 */
    int (*itcl_CreateObject) _ANSI_ARGS_((Tcl_Interp * interp, CONST char* name, ItclClass * cdefn, int objc, Tcl_Obj *CONST objv[], ItclObject ** roPtr)); /* 44 */
    int (*itcl_DeleteObject) _ANSI_ARGS_((Tcl_Interp * interp, ItclObject * contextObj)); /* 45 */
    int (*itcl_DestructObject) _ANSI_ARGS_((Tcl_Interp * interp, ItclObject * contextObj, int flags)); /* 46 */
    int (*itcl_HandleInstance) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 47 */
    CONST char* (*itcl_GetInstanceVar) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * name, ItclObject * contextObj, ItclClass * contextClass)); /* 48 */
    int (*itcl_ScopedVarResolver) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * name, Tcl_Namespace * contextNs, int flags, Tcl_Var * rPtr)); /* 49 */
    int (*itcl_BodyCmd) _ANSI_ARGS_((ClientData dummy, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 50 */
    int (*itcl_ConfigBodyCmd) _ANSI_ARGS_((ClientData dummy, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 51 */
    int (*itcl_CreateMethod) _ANSI_ARGS_((Tcl_Interp* interp, ItclClass * cdefn, CONST char* name, CONST char* arglist, CONST char* body)); /* 52 */
    int (*itcl_CreateProc) _ANSI_ARGS_((Tcl_Interp* interp, ItclClass * cdefn, CONST char* name, CONST char* arglist, CONST char* body)); /* 53 */
    int (*itcl_CreateMemberFunc) _ANSI_ARGS_((Tcl_Interp* interp, ItclClass * cdefn, CONST char* name, CONST char* arglist, CONST char* body, ItclMemberFunc** mfuncPtr)); /* 54 */
    int (*itcl_ChangeMemberFunc) _ANSI_ARGS_((Tcl_Interp* interp, ItclMemberFunc* mfunc, CONST char* arglist, CONST char* body)); /* 55 */
    void (*itcl_DeleteMemberFunc) _ANSI_ARGS_((CONST char* cdata)); /* 56 */
    int (*itcl_CreateMemberCode) _ANSI_ARGS_((Tcl_Interp* interp, ItclClass * cdefn, CONST char* arglist, CONST char* body, ItclMemberCode** mcodePtr)); /* 57 */
    void (*itcl_DeleteMemberCode) _ANSI_ARGS_((CONST char* cdata)); /* 58 */
    int (*itcl_GetMemberCode) _ANSI_ARGS_((Tcl_Interp* interp, ItclMember* member)); /* 59 */
    void *reserved60;
    int (*itcl_EvalMemberCode) _ANSI_ARGS_((Tcl_Interp * interp, ItclMemberFunc * mfunc, ItclMember * member, ItclObject * contextObj, int objc, Tcl_Obj *CONST objv[])); /* 61 */
    int (*itcl_CreateArgList) _ANSI_ARGS_((Tcl_Interp* interp, CONST char* decl, int* argcPtr, CompiledLocal** argPtr)); /* 62 */
    CompiledLocal* (*itcl_CreateArg) _ANSI_ARGS_((CONST char* name, CONST char* init)); /* 63 */
    void (*itcl_DeleteArgList) _ANSI_ARGS_((CompiledLocal * arglist)); /* 64 */
    Tcl_Obj* (*itcl_ArgList) _ANSI_ARGS_((int argc, CompiledLocal* arglist)); /* 65 */
    int (*itcl_EquivArgLists) _ANSI_ARGS_((CompiledLocal* arg1, int arg1c, CompiledLocal* arg2, int arg2c)); /* 66 */
    void (*itcl_GetMemberFuncUsage) _ANSI_ARGS_((ItclMemberFunc * mfunc, ItclObject * contextObj, Tcl_Obj * objPtr)); /* 67 */
    int (*itcl_ExecMethod) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 68 */
    int (*itcl_ExecProc) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 69 */
    int (*itcl_AssignArgs) _ANSI_ARGS_((Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[], ItclMemberFunc * mfunc)); /* 70 */
    int (*itcl_ConstructBase) _ANSI_ARGS_((Tcl_Interp * interp, ItclObject * contextObj, ItclClass * contextClass)); /* 71 */
    int (*itcl_InvokeMethodIfExists) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * name, ItclClass * contextClass, ItclObject * contextObj, int objc, Tcl_Obj *CONST objv[])); /* 72 */
    void *reserved73;
    int (*itcl_ReportFuncErrors) _ANSI_ARGS_((Tcl_Interp* interp, ItclMemberFunc * mfunc, ItclObject * contextObj, int result)); /* 74 */
    int (*itcl_ParseInit) _ANSI_ARGS_((Tcl_Interp * interp, ItclObjectInfo * info)); /* 75 */
    int (*itcl_ClassCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 76 */
    int (*itcl_ClassInheritCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 77 */
    int (*itcl_ClassProtectionCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 78 */
    int (*itcl_ClassConstructorCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 79 */
    int (*itcl_ClassDestructorCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 80 */
    int (*itcl_ClassMethodCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 81 */
    int (*itcl_ClassProcCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 82 */
    int (*itcl_ClassVariableCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 83 */
    int (*itcl_ClassCommonCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 84 */
    int (*itcl_ParseVarResolver) _ANSI_ARGS_((Tcl_Interp * interp, CONST char* name, Tcl_Namespace * contextNs, int flags, Tcl_Var* rPtr)); /* 85 */
    int (*itcl_BiInit) _ANSI_ARGS_((Tcl_Interp * interp)); /* 86 */
    int (*itcl_InstallBiMethods) _ANSI_ARGS_((Tcl_Interp * interp, ItclClass * cdefn)); /* 87 */
    int (*itcl_BiIsaCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 88 */
    int (*itcl_BiConfigureCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 89 */
    int (*itcl_BiCgetCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 90 */
    int (*itcl_BiChainCmd) _ANSI_ARGS_((ClientData dummy, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 91 */
    int (*itcl_BiInfoClassCmd) _ANSI_ARGS_((ClientData dummy, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 92 */
    int (*itcl_BiInfoInheritCmd) _ANSI_ARGS_((ClientData dummy, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 93 */
    int (*itcl_BiInfoHeritageCmd) _ANSI_ARGS_((ClientData dummy, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 94 */
    int (*itcl_BiInfoFunctionCmd) _ANSI_ARGS_((ClientData dummy, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 95 */
    int (*itcl_BiInfoVariableCmd) _ANSI_ARGS_((ClientData dummy, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 96 */
    int (*itcl_BiInfoBodyCmd) _ANSI_ARGS_((ClientData dummy, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 97 */
    int (*itcl_BiInfoArgsCmd) _ANSI_ARGS_((ClientData dummy, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 98 */
    int (*itcl_DefaultInfoCmd) _ANSI_ARGS_((ClientData dummy, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 99 */
    int (*itcl_EnsembleInit) _ANSI_ARGS_((Tcl_Interp * interp)); /* 100 */
    int (*itcl_CreateEnsemble) _ANSI_ARGS_((Tcl_Interp * interp, CONST char* ensName)); /* 101 */
    int (*itcl_AddEnsemblePart) _ANSI_ARGS_((Tcl_Interp * interp, CONST char* ensName, CONST char* partName, CONST char* usageInfo, Tcl_ObjCmdProc * objProc, ClientData clientData, Tcl_CmdDeleteProc * deleteProc)); /* 102 */
    int (*itcl_GetEnsemblePart) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * ensName, CONST char * partName, Tcl_CmdInfo * infoPtr)); /* 103 */
    int (*itcl_IsEnsemble) _ANSI_ARGS_((Tcl_CmdInfo* infoPtr)); /* 104 */
    int (*itcl_GetEnsembleUsage) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * ensName, Tcl_Obj * objPtr)); /* 105 */
    int (*itcl_GetEnsembleUsageForObj) _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Obj * ensObjPtr, Tcl_Obj * objPtr)); /* 106 */
    int (*itcl_EnsembleCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 107 */
    int (*itcl_EnsPartCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 108 */
    int (*itcl_EnsembleErrorCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 109 */
    void *reserved110;
    void *reserved111;
    Itcl_CallFrame* (*_Tcl_GetCallFrame) _ANSI_ARGS_((Tcl_Interp * interp, int level)); /* 112 */
    Itcl_CallFrame* (*_Tcl_ActivateCallFrame) _ANSI_ARGS_((Tcl_Interp * interp, Itcl_CallFrame * framePtr)); /* 113 */
    Var* (*_TclNewVar) _ANSI_ARGS_((void)); /* 114 */
    void (*itcl_Assert) _ANSI_ARGS_((CONST char * testExpr, CONST char * fileName, int lineNum)); /* 115 */
    int (*itcl_IsObjectCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 116 */
    int (*itcl_IsClassCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 117 */
} ItclIntStubs;

TCL_EXTERNC ItclIntStubs *itclIntStubsPtr;

#if defined(USE_ITCL_STUBS) && !defined(USE_ITCL_STUB_PROCS)

/*
 * Inline function declarations:
 */

#ifndef Itcl_IsClassNamespace
#define Itcl_IsClassNamespace \
	(itclIntStubsPtr->itcl_IsClassNamespace) /* 0 */
#endif
#ifndef Itcl_IsClass
#define Itcl_IsClass \
	(itclIntStubsPtr->itcl_IsClass) /* 1 */
#endif
#ifndef Itcl_FindClass
#define Itcl_FindClass \
	(itclIntStubsPtr->itcl_FindClass) /* 2 */
#endif
#ifndef Itcl_FindObject
#define Itcl_FindObject \
	(itclIntStubsPtr->itcl_FindObject) /* 3 */
#endif
#ifndef Itcl_IsObject
#define Itcl_IsObject \
	(itclIntStubsPtr->itcl_IsObject) /* 4 */
#endif
#ifndef Itcl_ObjectIsa
#define Itcl_ObjectIsa \
	(itclIntStubsPtr->itcl_ObjectIsa) /* 5 */
#endif
#ifndef Itcl_Protection
#define Itcl_Protection \
	(itclIntStubsPtr->itcl_Protection) /* 6 */
#endif
#ifndef Itcl_ProtectionStr
#define Itcl_ProtectionStr \
	(itclIntStubsPtr->itcl_ProtectionStr) /* 7 */
#endif
#ifndef Itcl_CanAccess
#define Itcl_CanAccess \
	(itclIntStubsPtr->itcl_CanAccess) /* 8 */
#endif
#ifndef Itcl_CanAccessFunc
#define Itcl_CanAccessFunc \
	(itclIntStubsPtr->itcl_CanAccessFunc) /* 9 */
#endif
#ifndef Itcl_GetTrueNamespace
#define Itcl_GetTrueNamespace \
	(itclIntStubsPtr->itcl_GetTrueNamespace) /* 10 */
#endif
#ifndef Itcl_ParseNamespPath
#define Itcl_ParseNamespPath \
	(itclIntStubsPtr->itcl_ParseNamespPath) /* 11 */
#endif
#ifndef Itcl_DecodeScopedCommand
#define Itcl_DecodeScopedCommand \
	(itclIntStubsPtr->itcl_DecodeScopedCommand) /* 12 */
#endif
#ifndef Itcl_EvalArgs
#define Itcl_EvalArgs \
	(itclIntStubsPtr->itcl_EvalArgs) /* 13 */
#endif
#ifndef Itcl_CreateArgs
#define Itcl_CreateArgs \
	(itclIntStubsPtr->itcl_CreateArgs) /* 14 */
#endif
#ifndef Itcl_PushContext
#define Itcl_PushContext \
	(itclIntStubsPtr->itcl_PushContext) /* 15 */
#endif
#ifndef Itcl_PopContext
#define Itcl_PopContext \
	(itclIntStubsPtr->itcl_PopContext) /* 16 */
#endif
#ifndef Itcl_GetContext
#define Itcl_GetContext \
	(itclIntStubsPtr->itcl_GetContext) /* 17 */
#endif
#ifndef Itcl_InitHierIter
#define Itcl_InitHierIter \
	(itclIntStubsPtr->itcl_InitHierIter) /* 18 */
#endif
#ifndef Itcl_DeleteHierIter
#define Itcl_DeleteHierIter \
	(itclIntStubsPtr->itcl_DeleteHierIter) /* 19 */
#endif
#ifndef Itcl_AdvanceHierIter
#define Itcl_AdvanceHierIter \
	(itclIntStubsPtr->itcl_AdvanceHierIter) /* 20 */
#endif
#ifndef Itcl_FindClassesCmd
#define Itcl_FindClassesCmd \
	(itclIntStubsPtr->itcl_FindClassesCmd) /* 21 */
#endif
#ifndef Itcl_FindObjectsCmd
#define Itcl_FindObjectsCmd \
	(itclIntStubsPtr->itcl_FindObjectsCmd) /* 22 */
#endif
#ifndef Itcl_ProtectionCmd
#define Itcl_ProtectionCmd \
	(itclIntStubsPtr->itcl_ProtectionCmd) /* 23 */
#endif
#ifndef Itcl_DelClassCmd
#define Itcl_DelClassCmd \
	(itclIntStubsPtr->itcl_DelClassCmd) /* 24 */
#endif
#ifndef Itcl_DelObjectCmd
#define Itcl_DelObjectCmd \
	(itclIntStubsPtr->itcl_DelObjectCmd) /* 25 */
#endif
#ifndef Itcl_ScopeCmd
#define Itcl_ScopeCmd \
	(itclIntStubsPtr->itcl_ScopeCmd) /* 26 */
#endif
#ifndef Itcl_CodeCmd
#define Itcl_CodeCmd \
	(itclIntStubsPtr->itcl_CodeCmd) /* 27 */
#endif
#ifndef Itcl_StubCreateCmd
#define Itcl_StubCreateCmd \
	(itclIntStubsPtr->itcl_StubCreateCmd) /* 28 */
#endif
#ifndef Itcl_StubExistsCmd
#define Itcl_StubExistsCmd \
	(itclIntStubsPtr->itcl_StubExistsCmd) /* 29 */
#endif
#ifndef Itcl_IsStub
#define Itcl_IsStub \
	(itclIntStubsPtr->itcl_IsStub) /* 30 */
#endif
#ifndef Itcl_CreateClass
#define Itcl_CreateClass \
	(itclIntStubsPtr->itcl_CreateClass) /* 31 */
#endif
#ifndef Itcl_DeleteClass
#define Itcl_DeleteClass \
	(itclIntStubsPtr->itcl_DeleteClass) /* 32 */
#endif
#ifndef Itcl_FindClassNamespace
#define Itcl_FindClassNamespace \
	(itclIntStubsPtr->itcl_FindClassNamespace) /* 33 */
#endif
#ifndef Itcl_HandleClass
#define Itcl_HandleClass \
	(itclIntStubsPtr->itcl_HandleClass) /* 34 */
#endif
#ifndef Itcl_ClassCmdResolver
#define Itcl_ClassCmdResolver \
	(itclIntStubsPtr->itcl_ClassCmdResolver) /* 35 */
#endif
#ifndef Itcl_ClassVarResolver
#define Itcl_ClassVarResolver \
	(itclIntStubsPtr->itcl_ClassVarResolver) /* 36 */
#endif
#ifndef Itcl_ClassCompiledVarResolver
#define Itcl_ClassCompiledVarResolver \
	(itclIntStubsPtr->itcl_ClassCompiledVarResolver) /* 37 */
#endif
#ifndef Itcl_BuildVirtualTables
#define Itcl_BuildVirtualTables \
	(itclIntStubsPtr->itcl_BuildVirtualTables) /* 38 */
#endif
#ifndef Itcl_CreateVarDefn
#define Itcl_CreateVarDefn \
	(itclIntStubsPtr->itcl_CreateVarDefn) /* 39 */
#endif
#ifndef Itcl_DeleteVarDefn
#define Itcl_DeleteVarDefn \
	(itclIntStubsPtr->itcl_DeleteVarDefn) /* 40 */
#endif
#ifndef Itcl_GetCommonVar
#define Itcl_GetCommonVar \
	(itclIntStubsPtr->itcl_GetCommonVar) /* 41 */
#endif
#ifndef Itcl_CreateMember
#define Itcl_CreateMember \
	(itclIntStubsPtr->itcl_CreateMember) /* 42 */
#endif
#ifndef Itcl_DeleteMember
#define Itcl_DeleteMember \
	(itclIntStubsPtr->itcl_DeleteMember) /* 43 */
#endif
#ifndef Itcl_CreateObject
#define Itcl_CreateObject \
	(itclIntStubsPtr->itcl_CreateObject) /* 44 */
#endif
#ifndef Itcl_DeleteObject
#define Itcl_DeleteObject \
	(itclIntStubsPtr->itcl_DeleteObject) /* 45 */
#endif
#ifndef Itcl_DestructObject
#define Itcl_DestructObject \
	(itclIntStubsPtr->itcl_DestructObject) /* 46 */
#endif
#ifndef Itcl_HandleInstance
#define Itcl_HandleInstance \
	(itclIntStubsPtr->itcl_HandleInstance) /* 47 */
#endif
#ifndef Itcl_GetInstanceVar
#define Itcl_GetInstanceVar \
	(itclIntStubsPtr->itcl_GetInstanceVar) /* 48 */
#endif
#ifndef Itcl_ScopedVarResolver
#define Itcl_ScopedVarResolver \
	(itclIntStubsPtr->itcl_ScopedVarResolver) /* 49 */
#endif
#ifndef Itcl_BodyCmd
#define Itcl_BodyCmd \
	(itclIntStubsPtr->itcl_BodyCmd) /* 50 */
#endif
#ifndef Itcl_ConfigBodyCmd
#define Itcl_ConfigBodyCmd \
	(itclIntStubsPtr->itcl_ConfigBodyCmd) /* 51 */
#endif
#ifndef Itcl_CreateMethod
#define Itcl_CreateMethod \
	(itclIntStubsPtr->itcl_CreateMethod) /* 52 */
#endif
#ifndef Itcl_CreateProc
#define Itcl_CreateProc \
	(itclIntStubsPtr->itcl_CreateProc) /* 53 */
#endif
#ifndef Itcl_CreateMemberFunc
#define Itcl_CreateMemberFunc \
	(itclIntStubsPtr->itcl_CreateMemberFunc) /* 54 */
#endif
#ifndef Itcl_ChangeMemberFunc
#define Itcl_ChangeMemberFunc \
	(itclIntStubsPtr->itcl_ChangeMemberFunc) /* 55 */
#endif
#ifndef Itcl_DeleteMemberFunc
#define Itcl_DeleteMemberFunc \
	(itclIntStubsPtr->itcl_DeleteMemberFunc) /* 56 */
#endif
#ifndef Itcl_CreateMemberCode
#define Itcl_CreateMemberCode \
	(itclIntStubsPtr->itcl_CreateMemberCode) /* 57 */
#endif
#ifndef Itcl_DeleteMemberCode
#define Itcl_DeleteMemberCode \
	(itclIntStubsPtr->itcl_DeleteMemberCode) /* 58 */
#endif
#ifndef Itcl_GetMemberCode
#define Itcl_GetMemberCode \
	(itclIntStubsPtr->itcl_GetMemberCode) /* 59 */
#endif
/* Slot 60 is reserved */
#ifndef Itcl_EvalMemberCode
#define Itcl_EvalMemberCode \
	(itclIntStubsPtr->itcl_EvalMemberCode) /* 61 */
#endif
#ifndef Itcl_CreateArgList
#define Itcl_CreateArgList \
	(itclIntStubsPtr->itcl_CreateArgList) /* 62 */
#endif
#ifndef Itcl_CreateArg
#define Itcl_CreateArg \
	(itclIntStubsPtr->itcl_CreateArg) /* 63 */
#endif
#ifndef Itcl_DeleteArgList
#define Itcl_DeleteArgList \
	(itclIntStubsPtr->itcl_DeleteArgList) /* 64 */
#endif
#ifndef Itcl_ArgList
#define Itcl_ArgList \
	(itclIntStubsPtr->itcl_ArgList) /* 65 */
#endif
#ifndef Itcl_EquivArgLists
#define Itcl_EquivArgLists \
	(itclIntStubsPtr->itcl_EquivArgLists) /* 66 */
#endif
#ifndef Itcl_GetMemberFuncUsage
#define Itcl_GetMemberFuncUsage \
	(itclIntStubsPtr->itcl_GetMemberFuncUsage) /* 67 */
#endif
#ifndef Itcl_ExecMethod
#define Itcl_ExecMethod \
	(itclIntStubsPtr->itcl_ExecMethod) /* 68 */
#endif
#ifndef Itcl_ExecProc
#define Itcl_ExecProc \
	(itclIntStubsPtr->itcl_ExecProc) /* 69 */
#endif
#ifndef Itcl_AssignArgs
#define Itcl_AssignArgs \
	(itclIntStubsPtr->itcl_AssignArgs) /* 70 */
#endif
#ifndef Itcl_ConstructBase
#define Itcl_ConstructBase \
	(itclIntStubsPtr->itcl_ConstructBase) /* 71 */
#endif
#ifndef Itcl_InvokeMethodIfExists
#define Itcl_InvokeMethodIfExists \
	(itclIntStubsPtr->itcl_InvokeMethodIfExists) /* 72 */
#endif
/* Slot 73 is reserved */
#ifndef Itcl_ReportFuncErrors
#define Itcl_ReportFuncErrors \
	(itclIntStubsPtr->itcl_ReportFuncErrors) /* 74 */
#endif
#ifndef Itcl_ParseInit
#define Itcl_ParseInit \
	(itclIntStubsPtr->itcl_ParseInit) /* 75 */
#endif
#ifndef Itcl_ClassCmd
#define Itcl_ClassCmd \
	(itclIntStubsPtr->itcl_ClassCmd) /* 76 */
#endif
#ifndef Itcl_ClassInheritCmd
#define Itcl_ClassInheritCmd \
	(itclIntStubsPtr->itcl_ClassInheritCmd) /* 77 */
#endif
#ifndef Itcl_ClassProtectionCmd
#define Itcl_ClassProtectionCmd \
	(itclIntStubsPtr->itcl_ClassProtectionCmd) /* 78 */
#endif
#ifndef Itcl_ClassConstructorCmd
#define Itcl_ClassConstructorCmd \
	(itclIntStubsPtr->itcl_ClassConstructorCmd) /* 79 */
#endif
#ifndef Itcl_ClassDestructorCmd
#define Itcl_ClassDestructorCmd \
	(itclIntStubsPtr->itcl_ClassDestructorCmd) /* 80 */
#endif
#ifndef Itcl_ClassMethodCmd
#define Itcl_ClassMethodCmd \
	(itclIntStubsPtr->itcl_ClassMethodCmd) /* 81 */
#endif
#ifndef Itcl_ClassProcCmd
#define Itcl_ClassProcCmd \
	(itclIntStubsPtr->itcl_ClassProcCmd) /* 82 */
#endif
#ifndef Itcl_ClassVariableCmd
#define Itcl_ClassVariableCmd \
	(itclIntStubsPtr->itcl_ClassVariableCmd) /* 83 */
#endif
#ifndef Itcl_ClassCommonCmd
#define Itcl_ClassCommonCmd \
	(itclIntStubsPtr->itcl_ClassCommonCmd) /* 84 */
#endif
#ifndef Itcl_ParseVarResolver
#define Itcl_ParseVarResolver \
	(itclIntStubsPtr->itcl_ParseVarResolver) /* 85 */
#endif
#ifndef Itcl_BiInit
#define Itcl_BiInit \
	(itclIntStubsPtr->itcl_BiInit) /* 86 */
#endif
#ifndef Itcl_InstallBiMethods
#define Itcl_InstallBiMethods \
	(itclIntStubsPtr->itcl_InstallBiMethods) /* 87 */
#endif
#ifndef Itcl_BiIsaCmd
#define Itcl_BiIsaCmd \
	(itclIntStubsPtr->itcl_BiIsaCmd) /* 88 */
#endif
#ifndef Itcl_BiConfigureCmd
#define Itcl_BiConfigureCmd \
	(itclIntStubsPtr->itcl_BiConfigureCmd) /* 89 */
#endif
#ifndef Itcl_BiCgetCmd
#define Itcl_BiCgetCmd \
	(itclIntStubsPtr->itcl_BiCgetCmd) /* 90 */
#endif
#ifndef Itcl_BiChainCmd
#define Itcl_BiChainCmd \
	(itclIntStubsPtr->itcl_BiChainCmd) /* 91 */
#endif
#ifndef Itcl_BiInfoClassCmd
#define Itcl_BiInfoClassCmd \
	(itclIntStubsPtr->itcl_BiInfoClassCmd) /* 92 */
#endif
#ifndef Itcl_BiInfoInheritCmd
#define Itcl_BiInfoInheritCmd \
	(itclIntStubsPtr->itcl_BiInfoInheritCmd) /* 93 */
#endif
#ifndef Itcl_BiInfoHeritageCmd
#define Itcl_BiInfoHeritageCmd \
	(itclIntStubsPtr->itcl_BiInfoHeritageCmd) /* 94 */
#endif
#ifndef Itcl_BiInfoFunctionCmd
#define Itcl_BiInfoFunctionCmd \
	(itclIntStubsPtr->itcl_BiInfoFunctionCmd) /* 95 */
#endif
#ifndef Itcl_BiInfoVariableCmd
#define Itcl_BiInfoVariableCmd \
	(itclIntStubsPtr->itcl_BiInfoVariableCmd) /* 96 */
#endif
#ifndef Itcl_BiInfoBodyCmd
#define Itcl_BiInfoBodyCmd \
	(itclIntStubsPtr->itcl_BiInfoBodyCmd) /* 97 */
#endif
#ifndef Itcl_BiInfoArgsCmd
#define Itcl_BiInfoArgsCmd \
	(itclIntStubsPtr->itcl_BiInfoArgsCmd) /* 98 */
#endif
#ifndef Itcl_DefaultInfoCmd
#define Itcl_DefaultInfoCmd \
	(itclIntStubsPtr->itcl_DefaultInfoCmd) /* 99 */
#endif
#ifndef Itcl_EnsembleInit
#define Itcl_EnsembleInit \
	(itclIntStubsPtr->itcl_EnsembleInit) /* 100 */
#endif
#ifndef Itcl_CreateEnsemble
#define Itcl_CreateEnsemble \
	(itclIntStubsPtr->itcl_CreateEnsemble) /* 101 */
#endif
#ifndef Itcl_AddEnsemblePart
#define Itcl_AddEnsemblePart \
	(itclIntStubsPtr->itcl_AddEnsemblePart) /* 102 */
#endif
#ifndef Itcl_GetEnsemblePart
#define Itcl_GetEnsemblePart \
	(itclIntStubsPtr->itcl_GetEnsemblePart) /* 103 */
#endif
#ifndef Itcl_IsEnsemble
#define Itcl_IsEnsemble \
	(itclIntStubsPtr->itcl_IsEnsemble) /* 104 */
#endif
#ifndef Itcl_GetEnsembleUsage
#define Itcl_GetEnsembleUsage \
	(itclIntStubsPtr->itcl_GetEnsembleUsage) /* 105 */
#endif
#ifndef Itcl_GetEnsembleUsageForObj
#define Itcl_GetEnsembleUsageForObj \
	(itclIntStubsPtr->itcl_GetEnsembleUsageForObj) /* 106 */
#endif
#ifndef Itcl_EnsembleCmd
#define Itcl_EnsembleCmd \
	(itclIntStubsPtr->itcl_EnsembleCmd) /* 107 */
#endif
#ifndef Itcl_EnsPartCmd
#define Itcl_EnsPartCmd \
	(itclIntStubsPtr->itcl_EnsPartCmd) /* 108 */
#endif
#ifndef Itcl_EnsembleErrorCmd
#define Itcl_EnsembleErrorCmd \
	(itclIntStubsPtr->itcl_EnsembleErrorCmd) /* 109 */
#endif
/* Slot 110 is reserved */
/* Slot 111 is reserved */
#ifndef _Tcl_GetCallFrame
#define _Tcl_GetCallFrame \
	(itclIntStubsPtr->_Tcl_GetCallFrame) /* 112 */
#endif
#ifndef _Tcl_ActivateCallFrame
#define _Tcl_ActivateCallFrame \
	(itclIntStubsPtr->_Tcl_ActivateCallFrame) /* 113 */
#endif
#ifndef _TclNewVar
#define _TclNewVar \
	(itclIntStubsPtr->_TclNewVar) /* 114 */
#endif
#ifndef Itcl_Assert
#define Itcl_Assert \
	(itclIntStubsPtr->itcl_Assert) /* 115 */
#endif
#ifndef Itcl_IsObjectCmd
#define Itcl_IsObjectCmd \
	(itclIntStubsPtr->itcl_IsObjectCmd) /* 116 */
#endif
#ifndef Itcl_IsClassCmd
#define Itcl_IsClassCmd \
	(itclIntStubsPtr->itcl_IsClassCmd) /* 117 */
#endif

#endif /* defined(USE_ITCL_STUBS) && !defined(USE_ITCL_STUB_PROCS) */

/* !END!: Do not edit above this line. */

#endif /* _ITCLINTDECLS */
