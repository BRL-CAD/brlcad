.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` 
.    ds C' 
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title ".::uuid++ 3"
.TH .::uuid++ 3 "OSSP uuid 1.6.2" "04-Jul-2008" "Universally Unique Identifier"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
\&\fB\s-1OSSP\s0 uuid\fR \- \fBUniversally Unique Identifier\fR (\*(C+ \s-1API\s0)
.SH "VERSION"
.IX Header "VERSION"
\&\s-1OSSP\s0 uuid \s-11.6.2 (04-Jul-2008)\s0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBuuid++\fR is the \s-1ISO\-\*(C+\s0 language binding of the \fB\s-1OSSP\s0 uuid\fR C \s-1API\s0.
It provides a thin \s-1ISO\-\*(C+\s0 class \fBuuid\fR wrapping the ISO-C \s-1API\s0 type
\&\fBuuid_t\fR.
.SH "APPLICATION PROGRAMMING INTERFACE"
.IX Header "APPLICATION PROGRAMMING INTERFACE"
The \s-1ISO\-\*(C+\s0 Application Programming Interface (\s-1API\s0) of \fB\s-1OSSP\s0 uuid\fR
consists of the following components:
.Sh "\s-1CONSTANTS\s0"
.IX Subsection "CONSTANTS"
The constants are the same to those provided by the ISO-C \s-1API\s0.
See \fIuuid\fR\|(3) for details.
.Sh "\s-1CLASSES\s0"
.IX Subsection "CLASSES"
The following classes are provided:
.IP "\fBuuid\fR" 4
.IX Item "uuid"
This is the class corresponding to the C \s-1API\s0 type \fBuuid_t\fR.
It is the main object.
.IP "\fBuuid_error_t\fR" 4
.IX Item "uuid_error_t"
This is the class corresponding to the C \s-1API\s0 function \fBuuid_error\fR.
It is the object thrown as an exception in case of any errors.
.Sh "\s-1METHODS\s0"
.IX Subsection "METHODS"
The following methods are provided:
.IP "\fBuuid\fR();" 4
.IX Item "uuid();"
The standard constructor.
.IP "\fBuuid\fR(const uuid &_obj);" 4
.IX Item "uuid(const uuid &_obj);"
The copy constructor for \fBuuid\fR class.
.IP "\fBuuid\fR(const uuid_t *_obj);" 4
.IX Item "uuid(const uuid_t *_obj);"
The import constructor for C \s-1API\s0 objects.
.IP "\fBuuid\fR(const void *_bin);" 4
.IX Item "uuid(const void *_bin);"
The import constructor for binary representation.
.IP "\fBuuid\fR(const char *_str);" 4
.IX Item "uuid(const char *_str);"
The import constructor for string representation.
.IP "~\fBuuid\fR();" 4
.IX Item "~uuid();"
The standard destructor for \fBuuid\fR class.
.IP "uuid &\fBuuid::operator=\fR(const uuid &_obj);" 4
.IX Item "uuid &uuid::operator=(const uuid &_obj);"
The assignment operator corresponding to the copy constructor.
.IP "uuid &\fBuuid::operator=\fR(const uuid_t *_obj);" 4
.IX Item "uuid &uuid::operator=(const uuid_t *_obj);"
The assignment operator corresponding to the import constructor for C \s-1API\s0 objects.
.IP "uuid &\fBuuid::operator=\fR(const void *_bin);" 4
.IX Item "uuid &uuid::operator=(const void *_bin);"
The assignment operator corresponding to the import constructor for binary representation.
.IP "uuid &\fBuuid::operator=\fR(const char *_str);" 4
.IX Item "uuid &uuid::operator=(const char *_str);"
The assignment operator corresponding to the import constructor for string and single integer value representation.
.IP "uuid \fBuuid::clone\fR(void);" 4
.IX Item "uuid uuid::clone(void);"
Regular method corresponding to the C \s-1API\s0 function \fBuuid_clone\fR.
.IP "void \fBuuid::load\fR(const char *_name);" 4
.IX Item "void uuid::load(const char *_name);"
Regular method corresponding to the C \s-1API\s0 function \fBuuid_load\fR.
.IP "void \fBuuid::make\fR(unsigned int _mode, ...);" 4
.IX Item "void uuid::make(unsigned int _mode, ...);"
Regular method corresponding to the C \s-1API\s0 function \fBuuid_make\fR.
.IP "int \fBuuid::isnil\fR(void);" 4
.IX Item "int uuid::isnil(void);"
Regular method corresponding to the C \s-1API\s0 function \fBuuid_isnil\fR.
.IP "int \fBuuid::compare\fR(const uuid &_obj);" 4
.IX Item "int uuid::compare(const uuid &_obj);"
Regular method corresponding to the C \s-1API\s0 function \fBuuid_compare\fR.
.IP "int \fBuuid::operator==\fR(const uuid &_obj);" 4
.IX Item "int uuid::operator==(const uuid &_obj);"
The comparison operator corresponding to \fBuuid_compare\fR usage for equality.
.IP "int \fBuuid::operator!=\fR(const uuid &_obj);" 4
.IX Item "int uuid::operator!=(const uuid &_obj);"
The comparison operator corresponding to \fBuuid_compare\fR usage for inequality.
.IP "int \fBuuid::operator<\fR(const uuid &_obj);" 4
.IX Item "int uuid::operator<(const uuid &_obj);"
The comparison operator corresponding to \fBuuid_compare\fR usage for less-than.
.IP "int \fBuuid::operator<=\fR(const uuid &_obj);" 4
.IX Item "int uuid::operator<=(const uuid &_obj);"
The comparison operator corresponding to \fBuuid_compare\fR usage for less-than-or-equal.
.IP "int \fBuuid::operator>\fR(const uuid &_obj);" 4
.IX Item "int uuid::operator>(const uuid &_obj);"
The comparison operator corresponding to \fBuuid_compare\fR usage for greater-than.
.IP "int \fBuuid::operator>=\fR(const uuid &_obj);" 4
.IX Item "int uuid::operator>=(const uuid &_obj);"
The comparison operator corresponding to \fBuuid_compare\fR usage for greater-than-or-equal.
.IP "void \fBuuid::import\fR(const void *_bin);" 4
.IX Item "void uuid::import(const void *_bin);"
Regular method corresponding to the C \s-1API\s0 function \fBuuid_import\fR for binary representation usage.
.IP "void \fBuuid::import\fR(const char *_str);" 4
.IX Item "void uuid::import(const char *_str);"
Regular method corresponding to the C \s-1API\s0 function \fBuuid_import\fR for string representation usage.
.IP "void *\fBuuid::binary\fR(void);" 4
.IX Item "void *uuid::binary(void);"
Regular method corresponding to the C \s-1API\s0 function \fBuuid_export\fR for binary representation usage.
.IP "char *\fBuuid::string\fR(void);" 4
.IX Item "char *uuid::string(void);"
Regular method corresponding to the C \s-1API\s0 function \fBuuid_export\fR for string representation usage.
.IP "char *\fBuuid::integer\fR(void);" 4
.IX Item "char *uuid::integer(void);"
Regular method corresponding to the C \s-1API\s0 function \fBuuid_export\fR for single integer value representation usage.
.IP "char *\fBuuid::summary\fR(void);" 4
.IX Item "char *uuid::summary(void);"
Regular method corresponding to the C \s-1API\s0 function \fBuuid_export\fR for textual summary representation usage.
.IP "unsigned long \fBuuid::version\fR(void);" 4
.IX Item "unsigned long uuid::version(void);"
Regular method corresponding to the C \s-1API\s0 function \fBuuid_version\fR.
.IP "\fBuuid_error_t\fR()" 4
.IX Item "uuid_error_t()"
The standard constructor for \fBuuid_error_t\fR class.
.IP "\fBuuid_error_t\fR(uuid_rc_t _code)" 4
.IX Item "uuid_error_t(uuid_rc_t _code)"
The standard constructor for \fBuuid_error_t\fR class with return code initialization.
.IP "~\fBuuid_error_t\fR()" 4
.IX Item "~uuid_error_t()"
The standard destructor for \fBuuid_error_t\fR class.
.IP "void \fBuuid_error_t::code\fR(uuid_rc_t _code)" 4
.IX Item "void uuid_error_t::code(uuid_rc_t _code)"
Regular method for setting the return code.
.IP "uuid_rc_t \fBuuid_error_t::code\fR(void)" 4
.IX Item "uuid_rc_t uuid_error_t::code(void)"
Regular method for fetching the return code.
.IP "char *\fBuuid_error_t::string\fR(void)" 4
.IX Item "char *uuid_error_t::string(void)"
Regular method for fetching the string corresponding to the current return code.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
The following shows an example usage of the \*(C+ \s-1API\s0. Exception handling is
omitted for code simplification and has to be re-added for production
code.
.PP
.Vb 5
\& /* generate a DCE 1.1 v1 UUID from system environment */
\& char *uuid_v1(void)
\& {
\&     uuid id;
\&     char *str;
\&
\&     id.make(UUID_MAKE_V1);
\&     str = id.string();
\&     return str;
\& }
\&
\& /* generate a DCE 1.1 v3 UUID from an URL */
\& char *uuid_v3(const char *url)
\& {
\&     uuid id;
\&     uuid id_ns;
\&     char *str;
\&
\&     id_ns.load("ns:URL");
\&     id.make(UUID_MAKE_V3, &id_ns, url);
\&     str = id.string();
\&     return str;
\& }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIuuid\fR\|(3).
