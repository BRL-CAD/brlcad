.\" Copyright (c) 1987, University of Utah
.TH UNSLICE 1 "May 21, 1987" 1
.UC 4 
.SH NAME
unslice \- Quickly assemble image slices
.SH SYNOPSIS
.B unslice
[
.B \-f
.I ctlfile 
] [
.B \-y
.I ymax
] [
.B \-o
.I outfile
] 
.I infiles ...
.SH DESCRIPTION
.IR Unslice
quickly assembles a number of horizontal image strips into a single
output image.  A typical use for \fIunslice\fP is to put together
portions of an image ("slices") computed independently into a single
output picture.  Because \fIunslice\fP uses the "raw" RLE library
calls to read and write the images, it runs much faster than doing the
equivalent operations with crop and comp.

\fIunslice\fP has two modes of operation.  If given the
.B \-f
flag, \fIunslice\fP reads a control file telling it how to assemble
the images.  This is a text file with two decimal numbers on each
line, one line for each slice to be assembled into the output image.
Each line gives the starting and stopping scanlines (inclusive) for
each slice.  These must be in ascending order.  This is useful if the
slices have excess image area that should be cropped away.

If no control file is given, the
.B \-y
flag is used.  This tells \fIunslice\fP what the maximum Y value of
the output image is.
.I Unslice
reads the files in order, using the RLE headers to 
determine where to place the slices.  If two slices overlap, the first 
scanlines from the second slice are thrown away.  In both cases, the slices
must be in ascending order, and are expected to be of uniform width.
.SH SEE ALSO
.IR crop (1), 
.IR rlecomp (1), 
.IR rlepatch (1), 
.IR repos (1),
.IR urt (1),
.IR RLE (5).
.SH AUTHOR
John W. Peterson
.SH BUGS
.I Unslice
has really been superceded by 
.IR rlepatch (1).
