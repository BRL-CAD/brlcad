.ds c \fIcake\fP
.ds C \fICake\fP
.ds cf \fIcakefile\fP
.ds Cf \fICakefile\fP
.if n .ds lq \&"\"
.if n .ds rq \&"\"
.if t .ds lq ``
.if t .ds rq ''
.TH CAKE 1-ucb
.SH NAME
cake \- maintain groups of related files
.SH ORIGIN
University of Melbourne
.SH SYNOPSIS
.B cake
[ options ] ...  file ...
.SH DESCRIPTION
.PP
\*C is a program to maintain groups of related files.
A \*(cf needs to describe for each file
the set of other files it can be made from,
and the action which will update it from those files.
Then, given this \*(cf and the names of some files,
\*c traces through the network of dependencies
and executes just those actions necessary to update the files.
This is much faster than issuing the same commands manually
and it virtually eliminates the risks
of working with out-of-date files.
.PP
\*C's province overlaps that of make(1).
However, \*c's design philosophy emphasizes simplicity and generality
to a much greater extent than make's.
The principal differences are:
.IP (a)
\*C dependencies may be dynamic,
and their applicability may be conditional upon a test.
.IP (b)
\*C rules have the same syntax and semantics as ordinary dependencies,
and may have any number of targets.
.IP (c)
There are no restrictions on the forms of
either the targets or the sources.
This enables \*c to handle files in more than one directory
and to interface with SCCS, RCS and archivers,
among others, without any special arrangements.
.IP (d)
\*C has a more general search algorithm than make.
When seeking a target it considers all rules which could update it
even if the corresponding intermediate files do not exist;
it recreates them if (and only if) it is necessary to do so.
.IP (e)
\*(Cfs are passed through the C preprocessor.
They may therefore #include other \*(cfs (including standard ones)
and use #if and #ifdef to customize themselves.
.IP (f)
\*C allows the user to choose his own shell,
and to include shell scripts in actions.
.IP (g)
\*C can check to see if a newly 'updated' file
has actually been changed via a bit-by-bit comparison,
which works even if the modify date has been touched.
If there is no change, \*c avoids recomputing the file's dependents.
.IP (i)
\*C has a lot more options
(whether one considers these an improvement
of course depends on whether one needs them).
.PP
\*C is not oriented toward any particular type of files,
as make is towards program files (source and object).
For example, standard \*(cfs exist to handle
documents and VLSI designs, as well as programs.
.SH SYNTAX
.sp
Before being seen by \*c,
\*(cfs are piped through the C preprocessor.
The standard arguments to the preprocessor set up the search path
to visit the user's library directory (~/lib/cake)
and the directory /usr/lib/cake, which contains
standard sets of entries for program development, text processing, etc.
In addition, \*c gives its command line arguments to the preprocessor
as the value of the macro CAKEFLAGS.
.PP
\*C accepts standard C comments as well as
comments starting with a '$' and extending to the end of the line
(the first are stripped by the preprocessor, the second by \*c itself).
The single-line comments are particularly useful for commenting out
preprocessor directives by changing '#' into '$' or '$#'.
.PP
A fair number of characters have special meaning for \*c.
Any character can be prevented from being recognised as special
by preceding it with a backslash.
This can also be used to put arbitrary characters (including backslashes
but excluding newline and formfeed) into patterns (see below).
.PP
A \*(cf after preprocessing should be
a sequence of entries separated by blank lines,
with possibly one or more lines indicating options.
Option lines must be aligned on the margin
and begin with the word \*(lqset\*(rq;
the rest of the line is processed as a set of \*c options.
An entry consists of dependency rules aligned on the left margin
(with targets to the left and sources to the right of the colon)
and a possibly empty list of indented action lines (as in make).
If more than one dependency is given
the actions apply to all of them.
.PP
\*C treats unescaped percent signs and a possible following digit
(% and %0 to %9) as 11 \*(lqvariables\*(rq
for which any string may be consistently substituted
throughout an entry.
So an entry which contains variables
is a template for an infinite number of entries without variables.
This is the mechanism \*c uses
instead of make's entries with .x.y targets.
.PP
The following yacc grammar describes the syntax of
dependency rules (rule) and of actions (act).
The suffixes _l and _el denote
nonempty and possibly empty lists respectively.
Keywords are quoted;
other terminal symbols are in uppercase.
.sp
.nf
rule	:	pat_l \*(lq:\*(rq pat_el cond
	|	pat_l \*(lq::\*(rq pat_el cond
cond	:	\*(lqif\*(rq test
	|	/* empty */
test	:	basepat \*(lqin\*(rq pat_l
	|	basepat \*(lqmatch\*(rq basepat
	|	basepat \*(lqmatch\*(rq basepat basepat
	|	\*(lqexist\*(rq basepat
	|	\*(lqcando\*(rq basepat
	|	\*(lqok\*(rq basepat
	|	TESTCMD
	|	test \*(lqand\*(rq test
	|	test \*(lqor\*(rq test
	|	\*(lqnot\*(rq test
	|	\*(lq(\*(rq test \*(lq)\*(rq
act	:	aflag_el ACT
	|	aflag_el BEGIN_ACT ACT_el END_ACT
basepat	:	PAT
	|	PATCMD
pat	:	basepat pflag_el
	|	\*(lq(\*(rq pat_l \*(lq)\*(rq flag_el
aflag	:	\*(lq@\*(rq
	|	\*(lq-\*(rq
	|	\*(lq+\*(rq
	|	\*(lq!\*(rq
pflag	:	\*(lq@\*(rq
	|	\*(lq&\*(rq
	|	\*(lq!\*(rq
	|	\*(lq^\*(rq
	|	\*(lq*\*(rq
.fi
.PP
A dependency rule consists of a list of \fItarget\fP patterns 
followed (after a colon) by a list of \fIsource\fP patterns.
It states that the files corresponding to the target patterns
depend on the files of the source patterns.
If any are out-of-date, \*c will try to update them;
see the section on semantics.
The difference between single and double colons
is explained there also (it is \fInot\fP the same as in make)).
.PP
There are two kinds of patterns.
A name pattern (PAT) is a sequence of letters,
digits and special symbols from the set _/%,.+-
although other characters can also be included
if escaped with a backslash.
An alternate form, which obviates the need for backslashes
is a sequence of characters between double quotes,
which themselves can be included if escaped with a backslash.
.PP
The other kind of pattern (a pattern given by command: PATCMD)
is a string enclosed in matching double square brackets,
e.g. [[echo *.c]].
The string may contain non-matching double square brackets
if at least one is escaped with a backslash.
Strings between matching brackets are executed as commands
and replaced by the output of the command, innermost-first.
The expansion in this fashion of a PATCMD is then
interpreted as a pattern, or as a possibly empty list of patterns
if that is more appropriate.
E.g. the PATCMD [[sub X.c X.o [[echo *.c]]]] when executed
in a directory which contains a.c b.c and c.c will expand to
the list a.o, b.o and c.o.
Note that the generated patterns must be name patterns,
not command patterns, i.e. if a command's output contains
double brackets they will not be ignored.
.PP
Of the five flags that can appear after patterns and pattern lists,
four apply to target patterns,
and one ('*') applies to source patterns.
.IP '@'
A '@' character tells \*c that the target is not volatile;
whenever \*c executes the associated command
it checks if it changes the nonvolatile file.
If not, its dependents are not considered out-of-date wrt this file.
.IP '&'
A '&' postfix means that the pattern is not really a file;
this prevents \*c from worrying
if there are no actions to generate the pseudofile
or if the actions do not create a file
with the pattern's name.
.IP '!'
A '!' tells \*c to consider the target precious in the sense of make.
Directories are automatically precious.
.IP '^'
A file marked with '^' is deleted before \*c exits
unless it is one of the main targets or if it cannot be regenerated.
.IP '*'
A star after a source name pattern
tells \*c to update the flagged file
before expanding source command patterns and before executing the test.
Stars cannot appear after target patterns
or after source command patterns.
.PP
The definitions of the five primitive tests:
.br
.TP 14
{{cmd}}
Execute cmd and interpret its exit status:
zero is true, everything else is false.
The cmd may contain matched sets of double square brackets,
just as in PATCMD.
.TP 14
\*(lqexist\*(rq file
True if file exists.
.TP 14
\*(lqcando\*(rq file
True if file can be made according to this \*(cf.
.TP 14
\*(lqok\*(rq file
True if file is up-to-date according to this \*(cf.
.TP 14
file \*(lqmatch\*(rq pattern
True if file is matches pattern,
with X as the variable character.
.TP 14
file \*(lqmatch\*(rq argument pattern
True if file is matches pattern,
with argument specifying the variable character
as if it were an option to sub(1).
E.g. an omitted argument is equivalent to \-vX as the argument.
.TP 14
pat \*(lqin\*(rq pat1 .. patn
True if pat occurs among the list pat1 .. patn.
.PP
The precedence of \*(lqand\*(rq, \*(lqor\*(rq and \*(lqnot\*(rq,
increases in that order;
parentheses can be used to override precedence.
.PP
Syntactically, actions (ACT) are lines beginning with spaces or tabs.
BEGIN_ACT and END_ACT stand for actions
beginning with '{' and '}' respectively;
as a stylistic concession,
they may begin on the left margin, although they don't have to.
All actions may contain newlines escaped by a backslash.
.PP
Actions may be prefixed with flags.
Two ('@' and '-') turn on options \-s and \-i respectively
for a single action.
The third ('+') tells cake to execute the action
even if \-n says it shouldn't
(this is useful e.g. for recursive invocations of \*c with \-n).
The fourth ('!') causes cake to give the action to the shell
even if it doesn't have to.
.SH SEMANTICS
.sp
\*C's semantics is based on that of make.
The chief differences were listed
at the beginning of this manual entry;
a complete description with (hopefully illuminating) examples
should be in the \*c users' guide (if it ever gets finished).
.PP
Briefly, \*c goes about updating a file in two main phases
after an initial phase.
This initial phase does two things.
One, it expands any command patterns on the left side of dependencies.
As at this stage there is no way to find values for them,
variables should not occur in these patterns.
Two, this phase selects the main target to be made
if it was not given on the command line.
This target is the target of the first specific (variable-free)
dependency in the main \*(cf,
or in any include files if there is no such dependency
in the main \*(cf itself.
For this purpose, entries with double colons
are treated as if they were in the main \*(cf.
.PP
In the first phase, \*c plans ahead.
It matches the name(s) of the main target(s)
against the patterns on the left hand side of dependencies.
A match must give values to every variable appearing in the entry;
these variables are replaced by their values in the rest of the entry.
\*C next updates any starred name patterns in the matched entry,
expands any source command patterns and evaluates the test (if any).
.PP
\*C classifies the surviving entries into two kinds:
those with actions and those without.
The ones without actions represent unconditional dependencies,
and their sources are now planned for.
If any cannot be made, then the original file cannot be made either,
although \*c will update as many components as it can.
Next \*c tries to plan for the sources of the entries with actions,
and selects an entry for which all sources can be made.
(it is best to ensure either that there is only one such entry
or that the effects of the actions of all these entries are the same).
.PP
At the end of the planning phase
\*c has a directed acyclic graph
representing dependencies between files.
The information attached to the nodes of this graph says
whether the file exists or not, what is its modify time if it does
and what is its conceptual modify time.
The conceptual modify time of a file with no ancestors
is its real modify time;
the conceptual modify time of a file with ancestors
is the latest conceptual modify time of any of its ancestors.
(Pseudofiles and files with no ancestors but with actions
are treated specially, but in the same general spirit.)
The execute phase just traverses the graph in a postorder-like fashion,
and invokes the actions of those nodes whose files do not exist
or whose modify times are earlier than their conceptual modify times.
.PP
Actions and commands returning nonzero status
prevent any further processing of the node involved
and lead to the deletion of the targets,
except in the obvious of case of tests
(where the status code is used to return a boolean value
and not to signal an error).
.PP
The above is only a sketch of what actually happens.
For example, it does not describe what happens
when an entry has more than one target.
And of course flags on patterns and actions and command-line arguments
all modify \*c's behaviour.
A detailed explanation with examples of all this
can be found in the \*c users' guide.
.SH ACTIONS
.sp
\*C has three mechanisms for the execution of actions.
Which one \*c chooses depends on the form of the action
but can be overridden by the user.
The first two were present in make;
the third is unique to \*c and has a slightly different syntax.
.IP (a)
\*C may itself parse an action into words and call exec(2).
This is the most efficient way of executing actions,
and is therefore the one that \*c applies whereever possible.
However, it works only if the action does not contain metacharacters;
\*c uses (b) if it does.
.IP (b)
The action can be given to the shell.
\*C does this if the action contains shell metacharacters
or if it is instructed to by the user (see the action flag '!' above).
.IP (c)
The action may be a shell script.
Shell scripts consist of a sequence of actions,
the first of which begins with a '{' and
the last  of which begins with a '}'.
The text of an action may follow either or both of '{' and '}',
but it is neater to have '{' and '}' on lines of their own.
Any flags before the second and later lines
of a shellscript are ignored.
.PP
\*C will expand any bracketed commands in actions
in exactly the same way as if they were command patterns.
Each command is executed only once
and its output reused if necessary.
This should not cause any problems
unless the cakefile wants to have the same command is executed
in two different environments;
in this case you can rely on the C-shell backquote mechanism,
but beware: backquotes and double brackets don't mix.
.PP
Interrupt and quit signals cause
the targets of the current actions to be deleted;
the exceptions are pseudofiles, directories
and targets that have a '!' flag.
.SH OPTIONS
.sp
\*C has most of make's options, but it has new options too.
Some of the options have effects that can also be achieved
with action prefixes, as described below.
Options can be given to \*c (in order of increasing priority)
in the environment variable CAKE,
on the command line
or in the \*(cf itself.
Only the command line options are included in the macro CAKEFLAGS.
Some options are not effective when given from inside the \*(cf;
these are \-f, \-g, \-D, \-I and \-U.
.IP \-a
Abort the whole run if \*c sees an action return with a nonzero status
(\*c can turn a blind eye on a nonzero status if so instructed
(see \-i below)).
Note that in make the effect of \-a is the default.
.IP \-b
Print actions \fIbefore\fP any bracketed commands in them are expanded.
The default is to print them afterwards.
.IP \-c
Use the last status change time of files
instead of the last modify time (see stat(2)).
.IP \-d
Delete all regenerable intermediate files
after all other tasks have been completed
(files which can be updated but which are older than their ancestors
are not considered regenerable).
Files postfixed with '^' are considered candidates for deletion
even if this flag is not specified.
.IP "\-f file"
Use the given file to describe dependencies.
If this option is missing,
\*(lqcakefile\*(rq, \*(lqCakefile\*(rq,
\*(lqrecipe\*(rq and \*(lqRecipe\*(rq are tried, in that order.
Note that unlike make, \*c accepts only one \-f option;
if more are supplied, only the last one has effect.
With #include's being expanded by the preprocessor,
multiple \-f's are not needed.
.IP \-g
Go to (i.e. cd to) the directory containing the \*(cf
before doing anything else.
After this, all commands and actions issued by \*c
will behave as if \*c had started in that directory.
.IP \-i
Ignore the status returned by actions.
This option is turned on for an action
by prefixing it with a '-'.
Note that this overrides options \-R and \-a.
.IP \-k
Keep going in the event of an error,
following branches that are not related to files which cannot be made.
Since this is the default in \*c,
it is included purely for compatibility with make.
Its only effect is to negate an earlier \-a.
.IP \-n
Trace and print, but do not execute
the actions needed to update the targets,
including those that are normally executed but not printed.
The prefixes will be printed with the actions.
If the prefixes include '+', the action will still be executed.
In this mode \*c assumes that
the actions would not change any nonvolatile files.
Note that only one of \-n, \-q and \-t may be given,
and that \-n overrides \-s.
.IP \-q
Report if the main targets are up-to-date:
return exit status 0 if they are and 1 otherwise.
In this mode, the only actions executed
are those needed to discover dependency information.
Note that only one of \-n, \-q and \-t may be given.
.IP \-r
After each action reset the modify times of target files
to the modify time of the last updated ancestor.
This makes the physical update time
correspond more closely to the logical update time.
.IP \-s
Do not print actions.
Even without \-s, \*c does not print actions with a '@' prefix.
Both \-s and '@' are overridden by \-n.
.IP \-t
Touch, i.e. change only the modified date of targets,
without executing any actions.
If the -r flag is set, the modified date will be reset
to the that of the last modified ancestor.
If not, it will reset to the current time.
Note that only one of \-n, \-q and \-t may be given.
.IP \-v
Print error messages that are even more verbose than usual.
.IP \-w
The output of the C preprocessor frequently contains
non-significant spaces and tabs resulting from macro expansion.
\*C normally squeezes these out from actions before printing them.
The \-w (for wide) options prevents \*c from doing this.
.IP \-x
When specified, \-x prevents cake
from printing its own error message when an action fails.
.IP \-z
Do not expect bracketed commands to return zero exit status.
Unfortunately a fair number of programs
do not bother to return the correct exit status;
if you are using one of these then specify \-z.
.IP "\-Ddefn, \-Udefn, \-Idir"
These arguments are given to the preprocessor.
Any directories named here will be searched before the standard ones.
.IP \-G
Enable members of a group which has write permission on a directory
to use \*c to update files in that directory,
even if they don't have write permission on the files themselves.
\*C does this by removing all targets of a rule
before invoking its actions, \fIeven if they are said to be precious\fP.
The one thing which \fIdoes\fP stop \-G is \-n.
In rare cases this may cause problems with actions prefixed by '+';
the solution is to remove the offending files by hand.
.IP \-L
Check rules for simple loops.
If a target depends directly upon itself, and this option is set,
\*c will ignore the rule in question for that target.
This is useful for rules of the form %: DIR_PREFIX/**/%,
where DIR_PREFIX turns out to be empty.
.IP \-N num
\*C allows \fInum\fP outstanding (non-waited for)
processes at any one time.
If \fInum\fP is zero,
all commands are executed synchronously.
If it is one or more,
processes (up to the limit) are spawned in background
and are waited for only at the point where their results are used.
The default value of N depends on the system:
larger machines should usually set it higher than smaller ones.
(This option is not yet implemented.)
.IP \-R
Do not remove the targets of any actions
which return nonzero status (but see \-i above).
The default is to remove them to keep consistency.
.IP "\-S1 shell"
Use the given shell to execute commands and actions.
Note that the argument of \-S1 needs to be of the form
\*(lqcommand\*(rq or \*(lqcommand \-option\*(rq.
Commands and simple actions to be executed
are given to the shell as one argument after the option if any.
The C and Bourne shells need -c for option.
The default is \*(lq/bin/csh -fc\*(rq;
to use the Bourne shell specify -S1 \*(lq/bin/sh -c\*(rq.
.IP "\-S2 shell"
Use the given shell to execute shell scripts.
Shell needs to be of the same form as the argument of \-S1.
Scripts are written to a file and
the filename is passed to the shell after the option if any.
One can use different shells for actions and scripts.
The mnemonic of value of \-S1 and \-S2 is that
the first only applies to single-line actions,
while scripts are always at least two lines long.
The default is \*(lq/bin/csh -f\*(rq;
to use the Bourne shell specify -S2 \*(lq/bin/sh\*(rq.
.IP "\-T string"
The characters occurring in the string
are considered metacharacters of the single action (\-S1) shell.
If an action contains any of these it will be given to the shell;
otherwise it will be parsed and executed by cake directly.
The default string (for csh) is *?!&|;<>()[]{}'`"%$~#.
.IP \-X
Normally \*c will \*(lqremove\*rq user files by moving them to /tmp.
If the \-X option is set, it will remove them permamently.
.IP \-Z
Do nothing except print the output of the C preprocessor.
This option overrides all others.
.SH FILES
.sp
cakefile, Cakefile, recipe, Recipe
.br
/usr/lib/cake
.br
~/lib/cake
.br
/tmp/Cake*
.SH DIAGNOSTICS
.sp
\*C's diagnostics fall into three classes.
The most important class is the messages given
when \*c finds an error in the \*(cf or during the execution
of an action; these are generally similar to make's,
though \*c prefixes its messages by its name.
The second class, whose messages begin with "cake system error",
report problems with \*c's system calls; these should be pretty rare.
The third class, whose messages begin with "cake internal error",
report overflows of various arrays, which can be fixed by recompilation,
and failed internal consistency checks, which cannot.
.PP
\*C itself will return nonzero status (actually 1)
if any of the main targets were not updated properly.
.PP
The \-Z option can be useful in tracking down syntax errors
(that's what it is there for).
\*C also has five \*(lqhidden\*(rq options, \-C, \-E, \-P, \-W and \-Y,
which print out different kinds of debugging information
during execution;
these are not very likely to be helpful to anyone but the author,
but you never know.
.SH "SEE ALSO"
.sp
make(1), ccincl(1), later(1), need(1), soincl(1), sub(1), yyrepl(1).
.sp
S. I. Feldman:
.I
Make \- A Program for Maintaining Computer Programs,
Software - Practice and Experience, April 1979, pp. 255-265.
.sp
G. S. Fowler:
.I
A Fourth Generation Make,
Proceedings of the 1985 Summer Usenix Conference, pp 159-174.
.sp
Z. Somogyi:
.I
Cake: a fifth generation version of make,
Australian Unix system User Group Newsletter
7:6, April 1987, pp. 22-31.
.sp
The standard \*(cfs in /usr/lib/cake.
.SH BUGS
.sp
The C preprocessor sometimes replaces its control lines
with blank lines instead of removing them.
These blank lines then foul up \*c's picture
of the boundaries of entries.
For this reason, it is safest to use #ifdef's etc
only on complete entries;
in this case their replacement by blank lines has no effect.
.sp
\*C's own action/command parsing routine may sometimes make mistakes.
If you suspect that this is the case,
prefix the action by '!',
put a metacharacter into the action/command (" is the easiest),
or enlarge the set of metacharacters with -T
to include a character of the action/command (e.g. a-z).
.sp
The set of pattern flags and the set of action flags overlap;
this is a result of the cramped ASCII character set.
.sp
The syntax of options with arguments is confusing.
The ones passed on to the preprocessor have no space
before the option's argument; the others do.
.sp
The -N option is not yet implemented.
.\"	@(#)cake.l	9/2/85
