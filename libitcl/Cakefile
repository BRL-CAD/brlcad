/*
 *			libitcl/Cakefile
 */
#define SRCDIR	[[echo libitcl]]
#define	SRCSUFF	.c
#define MANSECTION	3

#include "../Cakefile.defs"

#if !defined(BUILD_LIBRARY)
#	define	BUILD_LIBRARY	ar r
#	define ITCL_OPTS	--srcdir=[[pwd]]/../SRCDIR --disable-shared --quiet \
			--cache-file cache.MTYPE  \
			--prefix=BASEDIR \
			--with-tcl=[[pwd]]/LIBTCL_DIR \
			--with-tk=[[pwd]]/LIBTK_DIR
#	define PRODUCTS	libitcl3.3.a& libitk3.3.a&
#	define	AFTER_MAKE	rm -f libitcl.a libitk.a ; cp [[pwd]]/itcl/libitcl''ITCL_VERS.a . ; cp [[pwd]]/itk/libitk''ITCL_VERS.a . ; ln -s libitcl''ITCL_VERS.a libitcl.a ; ln -s libitk''ITCL_VERS.a libitk.a

#else
/* Shared library case */
#	define ITCL_OPTS	--srcdir=[[pwd]]/../SRCDIR/ --enable-shared --quiet \
			--cache-file cache.MTYPE \
			--prefix=BASEDIR \
			--with-tcl=[[pwd]]/LIBTCL_DIR \
			--with-tk=[[pwd]]/LIBTK_DIR
#	define PRODUCTS	libitcl3.3.so libitk3.3.so
#	define SHARED_PRODUCT	libitcl''ITCL_VERS.[[echo ARCH_SUF]]''[[LIBVERS]] libitk''ITCL_VERS.[[echo ARCH_SUF]]''[[LIBVERS]]
#	define	AFTER_MAKE	/* mv -f libitcl''ITCL_VERS.ARCH_SUF libitcl''ITCL_VERS.ARCH_SUF''[[LIBVERS]] ; \
			mv -f libitk''ITCL_VERS.ARCH_SUF libitk''ITCL_VERS.ARCH_SUF''[[LIBVERS]] ; \
			sharedliblink.sh libitcl''ITCL_VERS.ARCH_SUF''[[LIBVERS]] ; \
			sharedliblink.sh libitk''ITCL_VERS.ARCH_SUF''[[LIBVERS]] ; */ \
			rm -f libitcl.ARCH_SUF libitk.ARCH_SUF ; \
			cp [[pwd]]/itcl/libitcl''ITCL_VERS.[[echo ARCH_SUF]] . ; \
			cp [[pwd]]/itk/libitk''ITCL_VERS.[[echo ARCH_SUF]] . ; \
			ln -s libitcl''ITCL_VERS.[[echo ARCH_SUF]] libitcl.ARCH_SUF ; \
			ln -s libitk''ITCL_VERS.[[echo ARCH_SUF]] libitk.ARCH_SUF
#endif

#if defined(USE_64)
#define ENABLE_64 --enable-64bit
#else
#define ENABLE_64 /**/
#endif

/* Rule to see if cake is running with -s flag */
#define MINUS_S	[[echo CAKEFLAGS | tr '\040' '\012' | sed -n -e /-s/p ]]

all&: PRODUCTS

PRODUCTS: Makefile.MTYPE cache.MTYPE
	echo cakeflags=CAKEFLAGS
	echo make -j2 MINUS_S -f Makefile.MTYPE CAKEFLAGS all
	make -j2 MINUS_S -f Makefile.MTYPE CAKEFLAGS all
	echo \"AFTER_MAKE\"
	AFTER_MAKE

Makefile.MTYPE cache.MTYPE:		if not exist Makefile.MTYPE or not exist cache.MTYPE
	( \C\F\L\A\G\S=\"GFLAG OPTIMIZER PROFILER\"; \
		INSTALL=[[pwd]]/../SRCDIR/config/install-sh ; \
		\A\F\T\E\R\_\M\A\K\E=\"AFTER_MAKE\"; \
		\R\A\N\L\I\B=\"RANLIB\"; \
		\L\D\F\L\A\G\S=\"LDFLAGS\"; \
		\S\H\L\I\B\_\L\D=\"BUILD_LIBRARY\"; \
		\C\C=\"CC\"; \
		 export INSTALL \C\F\L\A\G\S \R\A\N\L\I\B \L\D\F\L\A\G\S; \
		 export \S\H\L\I\B\_\L\D \C\C \A\F\T\E\R\_\M\A\K\E; \
		 echo ../SRCDIR/configure ITCL_OPTS ENABLE_64; \
		 ../SRCDIR/configure ITCL_OPTS ENABLE_64; \
		 echo ../SRCDIR/fix_makefile.sh '>' Makefile.MTYPE; \
		 ../SRCDIR/fix_makefile.sh > Makefile.MTYPE)

clean&:	Makefile.MTYPE
	make -f Makefile.MTYPE clean

noprod&:
	rm -rf libtcl.*

#ifdef NFS
clobber&:
	rm -f *.MTYPE *.o confdefs.h config.log config.status Makefile lib* *.a *.ARCH_SUF lib.exp
	rm -rf itcl itk
#else
clobber&:
	rm -f *.MTYPE *.o confdefs.h config.log config.status Makefile lib* *.a *.ARCH_SUF lib.exp
#endif

install&: Makefile.MTYPE
	make -f Makefile.MTYPE install
	( cd BASEDIR/lib; AFTER_MAKE )

install-nobak&: Makefile.MTYPE
	make -f Makefile.MTYPE install
	( cd BASEDIR/lib; AFTER_MAKE )

test&: Makefile.MTYPE
	make -f Makefile.MTYPE test

/* dltest:			if not exist dltest
	cp -r ../SRCDIR/"unix"/dltest .
*/
