<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="rtedge1">
  <refmeta>
      <refentrytitle>RTEDGE
</refentrytitle>
    <manvolnum>1</manvolnum>
    <refmiscinfo class="source">BRL-CAD</refmiscinfo>
    <refmiscinfo class="manual">BRL-CAD User Commands</refmiscinfo>
  </refmeta>

  <refnamediv xml:id="name">
    <refname>rtedge</refname>
    <refpurpose>ray-traces a model, detects edges, and writes a BRL-CAD color image (.pix) file</refpurpose>
  </refnamediv>

  <!-- body begins here -->
  <refsynopsisdiv xml:id="synopsis">
    <cmdsynopsis sepchar=" ">
      <command>rtedge</command>
      <arg choice="opt" rep="repeat"><replaceable>options</replaceable></arg>
      <arg choice="plain" rep="norepeat"><replaceable>model.g</replaceable></arg>
      <arg choice="plain" rep="repeat"><replaceable>objects</replaceable></arg>
      <arg choice="plain" rep="norepeat">&lt;</arg>
      <arg choice="plain" rep="norepeat"><replaceable>model.pix</replaceable></arg>
    </cmdsynopsis>
  </refsynopsisdiv>


  <refsection xml:id="description"><title>DESCRIPTION</title>

    <para>
      <command>rtedge</command> operates on the indicated
      <emphasis remap="I">objects</emphasis> in the input
      <emphasis remap="I">model.g</emphasis> and produces a BRL-CAD
      .pix file that indicates the 'edges' in the model file.
      <command>rtedge</command> produces images by drawing a
      boundary whenever a change in region_id is detected.  It also recognizes
      and portrays abrupt changes in surface curvature and changes in surface
      height.  This permits the recognition of pits, protrusions, and changes in
      surface curvature.
    </para>

    <para>
      The orientation of the rays to be fired may be specified by
      the <option>-a</option> and <option>-e</option>
      options, in which case the model will be autosized, and the grid
      will be centered on the centroid of the model, with ray spacing
      chosen to span the entire set of <emphasis remap="I">objects</emphasis>.
      Alternatively, with the <option>-M</option> option, a transformation
      matrix may be provided on standard input which maps model-space to view-space.
      In this case, the grid ranges from -1.0 &lt; = X,Y &lt; = +1.0 in view space,
      with the size of the grid (number of rays fired) specified with the
      <option>-s</option> option. This option is most useful when
      <command>rtedge</command> is being invoked from a shell script created by an
      <citerefentry><refentrytitle>mged</refentrytitle><manvolnum>1</manvolnum></citerefentry> <emphasis remap="I">saveview</emphasis> command.
    </para>

    <para>The following options are recognized:</para>

    <variablelist remap="TP">
      <varlistentry>
	<term><option>-. #</option></term>
	<listitem>
	  <para>
            selects the factor used in NUgrid algorithm. Default is 1.5 .
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-, #</option></term>
	<listitem>
	  <para>
           selects which space partitioning algorithm to use
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-a #</option></term>
	<listitem>
	  <para>
	    selects auto-sizing, and gives the view azimuth in degrees.  Used with
	    <option>-e</option>
	    and conflicts with
	    <option>-M </option>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-b "# #"</option></term>
	<listitem>
	  <para>
	    is sometimes useful for debugging.  A single ray is fired at the pixel
	    coordinates specified. This is best when accompanied by debugging options.
	    Note that the standard
	    <citerefentry><refentrytitle>getopt</refentrytitle><manvolnum>3</manvolnum></citerefentry>
	    routine only allows options to have one parameter, so the X and Y
	    pixel coordinates need to be combined into one string parameter by enclosing
	    them in double quotes.  This option must follow any viewing parameters.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-d #</option></term>
	<listitem>
	  <para>sets flag for reporting of pixel distances: 1 for on, 0 (default) for off.
          (Each pixel is represented by 3 bytes of color information followed by 8 bytes
	  for a double, in IEEE format, which gives the distance to the ray's first hit.
	  If the ray doesn't hit, a zero distance is reported by default
	  which causes <citerefentry><refentrytitle>rt</refentrytitle><manvolnum>1</manvolnum></citerefentry>
	  to write only the color information.
	  See
	  <citerefentry><refentrytitle>pix</refentrytitle><manvolnum>5</manvolnum></citerefentry>
	  and
	  <citerefentry><refentrytitle>pixd</refentrytitle><manvolnum>5</manvolnum></citerefentry>.)</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-e #</option></term>
	<listitem>
	  <para>selects auto-sizing, and gives the view elevation in degrees.  Used with
	  <option>-a</option>
	  and conflicts with
	  <option>-M </option>.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-f #</option></term>
	<listitem>
	  <para>sets the expected playback rate in frames-per-second;
	  the default is 30.
	  Several time-evolving shaders
	  such as
	  <emphasis remap="I">fire</emphasis>
	  and
	  <emphasis remap="I">grass</emphasis>
	  need to know the time at which each frame and pixel occur to drive their
	  evolution.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-g #</option></term>
	<listitem>
	  <para>sets the grid cell width, in millimeters.
	  Ordinarily, the cell width is computed by dividing the view size by
	  the number of pixels of width, so this option need not be used.
	  To obtain exactly 1 inch ray spacing, specify
	  <option>-g25.4 .</option>
	  If the grid cell width is specified and the grid cell height (which
	  would be set using <option>-G</option>) is <emphasis remap="I">not</emphasis> specified,
	  the grid cell height defaults to be the same as the width.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-m density,r,g,b</option></term>
	<listitem>
	  <para>enables an exponential shading of the void between the eye and the
	  first hit location.  This allows a cheap simulation of atmospheric haze
	  with lower performance impact than explicit modeling of the air volume.
	  The haze is computed using the form:</para>

	  <para>f = e^(-distance * density)</para>
	  <para>g = 1.0 - f</para>
	  <para>color = color * f + hazeRGB * g</para>

	  <para>The color values are optional.  If not specified, they will have the passable
	  values 0.8 .9 .99 .</para>

	  <para>Example usage: -m '2.5e-8,.75,.95,.99'</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-i</option></term>
	<listitem>
	  <para>enables <emphasis remap="I">incremental mode</emphasis> processing.
	  (First, a single ray is fired.
	  Then, the screen is subdivided into four parts by evenly subdividing
	  in the vertical and horizontal directions.
	  The previously fired ray was the lower left corner;
	  three more rays are fired.
	  This process recurses until full resolution has been reached.
	  Assumes square image.
	  Also assumes fast path between CPU and display hardware.)</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-j xmin,ymin,xmax,ymax</option></term>
	<listitem>
	  <para>enables processing of <emphasis remap="I">just a sub-rectangle</emphasis>,
	  located within the rectangle (0,0) (width-1,height-1), and whose screen coordinates
	  (lower left and upper right corners) are provided in the argument.
	  Ray-tracing will be limited to just those pixels within the sub-rectangle,
	  and only those pixels will be transmitted to the framebuffer.
	  The corner pixels (xmin,ymin) and (xmax,ymax) are included in
	  the sub-rectangle.
	  This option exists primarily for
	  <citerefentry><refentrytitle>mged</refentrytitle><manvolnum>1</manvolnum></citerefentry>
	  to allow sweeping out a rectangular portion of the view for ray-tracing.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-k xdir,ydir,zdir,dist</option></term>
	<listitem>
	  <para>enables the use of a <emphasis remap="I">cutting plane</emphasis>. The xdir, ydir, zdir, and dist
	  define a plane (equivalent to a halfspace primitive with the same parameters).
	  The vector (xdir, ydir, zdir) is normal to the plane and points away from
	  the space to be subtracted. The dist parameter specifies the distance from
	  the origin to the plane in the normal direction.
	  The resulting image approximates subtracting the halfspace from the objects
	  being raytraced. Note that this is not exactly the same as actually
	  subtracting the halfspace, but it is faster. If explicit lights are used,
	  objects that are cut away by the cutting plane will still cast shadows.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-l #</option></term>
	<listitem>
	  <para>selects lighting model.  Default is 0.
	  Model 0 is a full lighting model with the ability to implement
	  Phong shading, transparent and reflective objects, shadow penumbras,
	  texture maps, etc.
	  In addition to ambient light, a small amount of light is
	  supplied from eye position.
	  All objects in the active model space with a material property
	  string of "light" represent additional light sources
	  (up to 16 are presently permitted),
	  and shadow computations will be initiated automatically.
	  (This mechanism is subject to further change.)
	  Model 1 is a diffuse-lighting model only, and is intended for
	  debugging.
	  Model 2 displays the surface normals as colors, and is useful
	  for examining curvature and surface orientation.
	  Model 3 is a three-light diffuse-lighting model, and is intended
	  for debugging.
	  Model 4 is a curvature debugging display, showing the inverse
	  radius of curvature.
	  Model 5 is a curvature debugging display, showing the principal
	  direction vector.
	  Model 6 is for debugging the UV parameterization used for surface
	  texturing.  It is exactly the same as applying the texture 'testmap'
	  to every region.  The U parameter is displayed in the red channel
	  and the V parameter is displayed in the blue channel.
	  Model 7 is for using photon mapping to simulate global illumination
	  and caustics in a given scene.  Options to photon mapping are passed
	  through the -l parameter in the following format:</para>
	  <para>-l7,Num_Photons,Caustics_Percent,Irradiance_Rays,Angular_Tolerance,
	  Random_Seed,Importance_Mapping_Toggle,Irradiance_Hypersampling_Toggle,
	  Visual_Irradiance_Toggle,Scale_Lumens,Load_Save_File</para>
	  <para>Example: -l7,16384,0,10,60.0,0,0,0,0,1.0,scene.pm</para>
	  <para>
	  Note: If just -l7 is used, then the default values above will be applied.  Light sources
	  must also be explicitly defined with lumens defined for each source, i.e., default light
	  sources will not work.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-n #</option></term>
	<listitem>
	  <para>defines the height of the image as a number of scanlines.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-o output.pix</option></term>
	<listitem>
	  <para>
	  specifies the name of a file to store the
	  <citerefentry><refentrytitle>pix</refentrytitle><manvolnum>5</manvolnum></citerefentry>
	  format output.
	  The
	  <citerefentry><refentrytitle>pix-fb</refentrytitle><manvolnum>1</manvolnum></citerefentry>
	  utility can be used later to display ".pix" files.
	  Note that using -o disables parallel processing.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-p #</option></term>
	<listitem>
	  <para>sets the perspective, in degrees, with 0 &lt; = # &lt; 180</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-r</option></term>
	<listitem>
	  <para>requests that overlapping regions be reported (on by default); opposite of <option>-R</option> .</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-s #</option></term>
	<listitem>
	  <para>specifies the
	  number of rays to fire in the X and Y directions on a square grid.
	  The default size is 512 (i.e., 512 x 512).</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-t</option></term>
	<listitem>
	  <para>causes reversal of the order of grid traversal (default is not to do that)
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-u units</option></term>
	<listitem>
	  <para>specifies units, with "model" being used for the units of the local model
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-v #</option></term>
	<listitem>
	  <para>sets the verbosity bit vector flags for <command>rtedge</command> .
	  Use -v 0 for no output or -v fff for all available output.
	  See include/brlcad/rtprivate.h for various bit definitions.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-w #</option></term>
	<listitem>
	  <para>defines the width of each scanline in pixels.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-x #</option></term>
	<listitem>
	  <para>sets the
	  <citerefentry><refentrytitle>librt</refentrytitle><manvolnum>3</manvolnum></citerefentry>
	  debug flags to the given hexadecimal bit vector.
	  See raytrace.h for the bit definitions.
	  (Notice that <option>-! #</option>
	  sets the
	  <citerefentry><refentrytitle>libbu</refentrytitle><manvolnum>3</manvolnum></citerefentry>
	  debug flags to the given hexadecimal bit vector.
	  See bu.h for the bit definitions.)</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-A #</option></term>
	<listitem>
	  <para>
	    Select angle for shading.  Default is 5.0 degrees; 89.0 will produce
	    an image where only steep drops and rises are shaded.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-B</option></term>
	<listitem>
	  <para>turns on the "benchmark" flag. This causes all intentional random effects
	  such as ray dither, color dither, etc., to be turned off to allow
	  benchmark timing comparison and benchmark result comparison.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-C #/#/#</option></term>
	<listitem>
	  <para>sets the background color to the RGB value #/#/#, where each #
	  is in the range of 0 to 255.
	  All non-background colors will be dithered away from this value.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-D #</option></term>
	<listitem>
	  <para>This is the "desired frame" flag, specifying the frame number to start with.
           Used with animation scripts; specify the desired ending (kill-after) frame with
	  <option>-K #</option> .</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-E #</option></term>
	<listitem>
	  <para>sets the distance from the eye point to the center of the model RPP; default is
          the square root of 2.
	  Only useful with auto-sizing, and conflicts with
	  <option>-M</option> .</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-F framebuffer</option></term>
	<listitem>
	  <para>indicates that the output should be sent to the indicated framebuffer. See
	  <citerefentry><refentrytitle>libfb</refentrytitle><manvolnum>3</manvolnum></citerefentry>
	  for more details on the specification of a framebuffer.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-G #</option></term>
	<listitem>
	  <para>sets the grid cell height, in millimeters.
	  If the grid cell height is specified and the grid cell width (which
	  would be set using <option>-g</option>) is <emphasis remap="I">not</emphasis> specified,
	  the grid cell width defaults to be the same as the height.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-H #</option></term>
	<listitem>
          <para>This is the "hypersample" flag, specifying number of extra rays to fire for each pixel to
          obtain more accurate results without needing to store the extra pixels. Automatically invokes
	  <option>-J 1</option>. The final colors of all rays are averaged together. Better results can be
         obtained by simply increasing the resolution, and decimating the results with a filter such as
	  <citerefentry><refentrytitle>pixhalve</refentrytitle><manvolnum>1</manvolnum></citerefentry>.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-I</option></term>
	<listitem>
	  <para>turns on interactive mode.  If this flag is off and your image is
	  "large" (&gt; = 256 x 256), it will lower the priority of the <option>rt</option> process.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-J #</option></term>
	<listitem>
	  <para>This is the "jitter" flag, which is a bit vector.
	  If one (<option>-J 1</option>), it randomizes the point from which each ray
	  is fired by +/- one half of the pixel size.  Useful if doing your own
	  post-filtering for antialiasing, or to eliminate systematic
	  errors.  This has been useful in obtaining more accurate results
	  in a volume-calculating raytrace as well.
	  If two (<option>-J 2</option>), it shifts the origin of the output frame once for each frame.
	  The shift is along a circular path in the plane of the frame,
	  with a period of ten seconds, and a radius of +/- 1/4 pixel width.
	  If three (<option>-J 3</option>), it performs both operations.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-K #</option></term>
	<listitem>
	  <para>sets the final (kill-after) frame number.
	  Used with animation scripts in conjunction with
	  <option>-D #</option> .</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-M</option></term>
	<listitem>
	  <para>causes reading of animation (model2view) matrix or animation script from standard input.
	  Conflicts with
	  <option>-a</option>
	  and
	  <option>-e</option> options.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-N #</option></term>
	<listitem>
	  <para>sets the NMG_debug flags to the given hexadecimalbit vector.
	  See h/nmg.h for the bit definitions.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-O output.dpix</option></term>
	<listitem>
	  <para>specifies the name of a file to store the double-precision floating-point
	  version of the image.
	  <citerefentry><refentrytitle>dpix-pix</refentrytitle><manvolnum>1</manvolnum></citerefentry>
	  can be used to later convert the file to
	  <citerefentry><refentrytitle>pix</refentrytitle><manvolnum>5</manvolnum></citerefentry>
	  format output.
	  (Deferred implementation)</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-P #</option></term>
	<listitem>
	  <para>specifies the maximum number of processors (in a multi-processor system) to be
	  used for this execution.  The default is system dependent.
	  On "dedicated" multi-processors, such as workstations and super-minis,
	  the default is usually set for the maximum number of processors,
	  while on shared multi-processors, such as SuperComputers,
	  usually just one processor is used by default.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-Q x,y</option></term>
	<listitem>
	  <para>selects pixel ray for query with debugging.  The option is used to
	  specify a single pixel for which the debug flags should be turned on.
	  The computation of all other pixels will be performed without debugging.
	  This is similar to the -b option, except that it does not limit rendering
	  to the single ray.  The entire image is computed.  This option is useful in
	  debugging problems which arise from specific computation sequences (such as
	  the order of random numbers previously drawn).</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-R</option></term>
	<listitem>
	  <para>requests that overlapping regions not be reported; opposite of <option>-r</option> .</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-S</option></term>
	<listitem>
	  <para>turns on stereo viewing.
	  The left-eye image is drawn in red,
	  and the right-eye image is drawn in blue.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-T #</option> or <option>-T #,#</option> or <option>-T #/#</option></term>
	<listitem>
	  <para>sets the calculation tolerances used by
	  <citerefentry><refentrytitle>librt</refentrytitle><manvolnum>3</manvolnum></citerefentry>.
	  If only one number is given, it specifies the distance tolerance.
	  Any two entities closer than this distance are considered to be the same.
	  The default distance tolerance is 0.005mm.
	  If the second number is given, it specifies the value of the dot product
	  below which two lines are to be considered perpendicular.
	  This number should be near zero, but in any case should be less than 1.
	  The default perpendicular tolerance is 1e-6.
	  If both calculation tolerances are provided, they shall be separated
	  by either a slash ("/") or a comma (","), with no white space between them.
	  For example, the default tolerances would be specified as
	  <option>-T0.005/1e-6</option>
	  on the command line.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-U #</option></term>
	<listitem>
	  <para>
	    sets the Boolean variable <emphasis remap="I">use_air</emphasis>
	    to the given value.
	  The default is 0, which ignores regions that have non-zero aircode values.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-V #</option></term>
	<listitem>
	  <para>sets the view aspect.  This is the ratio of width over height and can
	  be specified as either a fraction or a colon-separated ratio.
	  For example, the NTSC aspect ratio can be specified by either
	  <option>-V1.33</option>
	  or
	  <option>-V4:3</option> .</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-W</option></term>
	<listitem>
	  <para>
	    inverts the foreground and background colors, changing the default from
	    white lines on a black background to black lines on a white
	    background
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-X #</option></term>
	<listitem>
	  <para>turns on the
	  <citerefentry><refentrytitle>rt</refentrytitle><manvolnum>1</manvolnum></citerefentry>
	  program debugging flags.  See raytrace.h for the meaning of these bits.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-! #</option></term>
	<listitem>
	  <para>turns on the
	  <citerefentry><refentrytitle>libbu</refentrytitle><manvolnum>3</manvolnum></citerefentry>
	  library debugging flags.  See bu.h for the meaning of these bits.
	  In particular, specifying
	  <option>-!1</option>
	  will cause
	  <function>bu_bomb()</function>
	  to dump core, rather than logging the error and exiting.
	  This is useful with
	  <citerefentry><refentrytitle>dbx</refentrytitle><manvolnum>1</manvolnum></citerefentry>
	  or
	  <citerefentry><refentrytitle>gdb</refentrytitle><manvolnum>1</manvolnum></citerefentry>
	  for debugging.
	  (Notice that <option>-x #</option>
	  sets the
	  <citerefentry><refentrytitle>libbt</refentrytitle><manvolnum>3</manvolnum></citerefentry>
	  debug flags to the given hexadecimal bit vector.
	  See raytrace.h for the bit definitions.)</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-+ #</option></term>
	<listitem>
	  <para>specifies (setting argument to "t") that output is NOT binary (default is that it is).
          <option>-+</option> is otherwise not implemented.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><option>-c</option></term>
	<listitem>
	  <para>
	    Set special <command>rtedge</command> configuration variables.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <para>
      The <command>rtedge</command> program is a simple front-end to
    <citerefentry><refentrytitle>librt</refentrytitle><manvolnum>3</manvolnum></citerefentry>.
    </para>
  </refsection>

  <refsection xml:id="additional_options"><title>ADDITIONAL OPTIONS</title>

    <para>
      <command>rtedge</command> replaces <citerefentry><refentrytitle>lgt</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
      In addition to the simple white edges on a black background (or black on white)
      provided by <command>lgt</command>, <command>rtedge</command>
      allows arbitrary color combinations. It also allows rendering into an
      existing framebuffer and occlusion detection between two pieces of geometry.
      To configure its behavior, <command>rtedge</command> makes copious use of
      the <option>-c</option> option.
    </para>

    <para>
      Note that this approach is necessitated by the fact that
      <citerefentry><refentrytitle>librt</refentrytitle><manvolnum>3</manvolnum></citerefentry>
      has used up nearly the entire
      alphabet. A transition to GNU-style long option names is planned.
    </para>
    <variablelist remap="TP">
      <varlistentry>
	<term><option>-c "set foreground=#,#,#"</option></term>
	<listitem>
	  <para>and</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set fg=#,#,#"</option></term>
	<listitem>
	  <para>
	    set the color of the foreground (edges) to the
	    given  r,g,b triple. The default is white
	    (255,255,255).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set background=#,#,#"</option></term>
	<listitem>
	  <para>and</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set bg=#,#,#"</option></term>
	<listitem>
	  <para>
	    set the color of the background to the r,g,b
	    triple. The default is near-black (0,0,1).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set region_colors=#"</option></term>
	<listitem>
	  <para>and</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set rc=#"</option></term>
	<listitem>
	  <para>
	    determine whether to use the material color
	    assigned to an object as the edge color. Valid
	    values are 1 (on) and 0 (off). The default is
	    off. Using region colors overrides any
	    foreground color setting.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set detect_regions=#"</option></term>
	<listitem>
	  <para>and</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set dr=#"</option></term>
	<listitem>
	  <para>
	    determine whether the boundary between two BRL-CAD regions
	    is considered to be an edge. Valid values are 1 (on) and
	    0 (off). The default is off.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set detect_distance=#"</option></term>
	<listitem>
	  <para>and</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set dd=#"</option></term>
	<listitem>
	  <para>
	    determine whether a difference in hit distance between
	    adjacent pixels defines an edge. Valid values are 1 (on)
	    and 0 (off). The default is on.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set detect_normals"</option></term>
	<listitem>
	  <para>and</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set dn=#"</option></term>
	<listitem>
	  <para>
	    determine whether a difference in surface normals
	    between adjacent pixels defines an edge. Valid values
	    are 1 (on) and 0 (off). The default is on.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set detect_ids"</option></term>
	<listitem>
	  <para>and</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set di=#"</option></term>
	<listitem>
	  <para>
	    determine whether a difference in component id numbers
	    between adjacent pixels defines an edge. Valid values
	    are 1 (on) and 0 (off). The default is on.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set overlaymode=#"</option></term>
	<listitem>
	  <para>and</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set ov=#"</option></term>
	<listitem>
	  <para>
	    configure the overlay mode to be either on (1) or off (0).
	    Overlay mode allows <command>rtedge</command>
	    to write into an existing framebuffer. The framebuffer is
	    specified with the -F option.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set max_dist=#"</option></term>
	<listitem>
	  <para>and</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set md=#"</option></term>
	<listitem>
	  <para>
	    override the maximum hit distance of neighboring pixels
	    before being declared an edge. The default value is
	    computed based on the size of the output image,
	    approximately 1000 for the default image/fb size.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set antialias"</option></term>
	<listitem>
	  <para>and</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set aa"</option></term>
	<listitem>
	  <para>
	    configure whether to perform antialiasing on edges. Valid
	    values are 1 (on) and 0 (off). The default is off.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set both_sides"</option></term>
	<listitem>
	  <para>and</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c "set bs"</option></term>
	<listitem>
	  <para>
	    configure whether to render both sides of an edge.  result
	    are edges twice as thick but that work well with
	    antialiasing.  Valid values are 1 (on) and 0 (off). The
	    default is off.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection xml:id="occlusion_checking"><title>OCCLUSION CHECKING</title>

    <para>
      <command>rtedge</command> has the ability to perform occlusion
      checking between two sets of BRL-CAD objects from the same database.
      Occlusion checking determines which set of geometry is closer
      to the eyepoint and thus should be rendered. The first
      set is that specified in the basic object list (after the
      database). This set will be rendered using edge detection.
      The second is specified using a <option>-c</option> option.
    </para>
    <para>
      Occlusion checking is most handy when combining <command>rtedge</command>
      renderings with <emphasis remap="I">rt</emphasis> renderings. The syntax
      for such compositions is daunting, but the results are cool.
    </para>
    <variablelist remap="TP">
      <varlistentry>
	<term><option>-c"set occlusion_objects=\"obj1 obj2 ... objN\ </option></term>
	<listitem>
	  <para>and</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c"set oo=\"obj1 obj2 ... objN\ </option></term>
	<listitem>
	  <para>specify the second set of geometry.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c"set occlusion_mode=#</option></term>
	<listitem>
	  <para>and</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-c"set om=#</option></term>
	<listitem>
	  <para>
	    determine how <command>rtedge</command> behaves when
	    performing occlusion checking. There are three
	    valid modes. Mode 2 is the default.
	  </para>
	  <para>
	    <emphasis remap="B" role="B">mode 1 -</emphasis>
	    An edge detected in the first set of geometry is written to
	    the framebuffer if and only if it occludes the second set of
	    geometry. The edge is colored according to the foreground or
	    region colors options.
	  </para>
	  <para>
	    <emphasis remap="B" role="B">mode 2 -</emphasis>
	    All pixels that hit the first set of geometry that are not
	    occluded by the second set are written to the framebuffer.
	    Edges are rendered in the foreground or region color; non-edges
	    are rendered in the background color.
	  </para>
	  <para>
	    <emphasis remap="B" role="B">mode 3 -</emphasis>
	    Like mode 2 except non-edge pixels are dithered to make the
	    geometry semi-transparent.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection xml:id="examples"><title>EXAMPLES</title>

    <para>
      <command>rtedge</command> can be somewhat complicated
      to configure. These examples illustrate both simple and complex examples.
      Hopefully they will be enough to get you started. These examples use
      the havoc.g target description that may be found in the
      source distribution.
    </para>

    <para>
      Note that in practice it will usually be easiest to use the
      <emphasis remap="I">saveview</emphasis> command in
      <command>mged</command>
      to produce a script and then modify that script to run
      <command>rtedge</command> .
    </para>

    <example><title><command>rtedge</command> rendering of havoc.g</title>

      <para>
      <userinput>rtedge -s 1024 -o new.pix havoc.g havoc</userinput>
      </para>
      <para>
	results in a 1024 by 1024 BRL-CAD image file showing the
	edges on a Havoc helicopter. The default settings are used,
	so the image has white edges on a black background. Edges
	exist where there are differences in component id, hit
	distance, surface normal, or between hits and misses.
      </para>

      <para>
	The command
	<userinput>rtedge -s1024 -o new.pix -c"set fg=0,255,0 bg=255,0,0" havoc.g havoc</userinput>
	changes the edge color to be green and the background color to be red.
      </para>

      <para>
	The command
	<userinput>rtedge -s1024 -o new.pix -c"set rc=1 dr=1" havoc.g havoc</userinput>
	activates region detection and uses the region colors for the edges.
      </para>

      <para>
	The remaining examples will illustrate how to use <command>rtedge</command>
	in concert with <command>rt</command> to produce interesting
	images. When merging <command>rtedge</command> and
	<command>rt</command> images, it is best to use
	<emphasis remap="I">saveview</emphasis> scripts. In
	<command>mged</command>, configure your view, save it,
	and then open the file in an editor. Duplicate the
	<command>rt</command> command block. After duplicating
	the block, change the second to <command>rtedge</command> .</para>

	<para>
	  This script will overlay bright orange edges on the Havoc.
	</para>

	<literallayout remap=".nf" class="normal">
#!/bin/sh
rt -M -s1280 -o new.pix -C255/255/255\
 $*\
 havoc.g\
 havoc\
 2&gt;&gt; example1.log\
 &lt;&lt;EOF
viewsize 8.000e+03;
orientation 2.4809e-01 4.7650e-01 7.4809e-01 3.8943e-01;
eye_pt 2.2146e+04 7.1103e+03 7.1913e+03;
start 0; clean;
end;

EOF

rtedge -M -s1280 -o new.pix \
 -c"set dr=1 dn=1 ov=1"\
 -c"set fg=255,200,0" \
 $*\
 havoc.g\
 havoc\
 2&gt;&gt; example1.log\

 &lt;&lt; EOF
viewsize 8.000e+03;
orientation 2.4809e-01 4.7650e-01 7.4809e-01 3.8943e-01;
eye_pt 2.2146e+04 7.1103e+03 7.1913e+03;
start 0; clean;
end;

EOF
	</literallayout>

	<para>
	  Finally, this script will render the Havoc weapon systems in
	  full color, render the edges on the remainder of the aircraft
	  in black, and render the non-edges in dithered gray to make
	  them semi-transparent. Note that when specifying the occlusion
	  objects, the delimiting quotes must be escaped.
	</para>

	<literallayout remap=".nf" class="normal">
#!/bin/sh

rt -M -s1280 -o new.pix -C255/255/255 \
 $*\
 havoc.g\
 weapons\
 2&gt;&gt; example2.log\
 &lt;&lt; EOF
viewsize 8.000e+03;
orientation 2.4809e-01 4.7650e-01 7.4809e-01 3.8943e-01;
eye_pt 2.2146e+04 7.1103e+03 7.1913e+03;
start 0; clean;
end;

EOF

rtedge -M -s1280 -o new.pix \
 -c"set dr=1 dn=1 om=3"\
 -c"set fg=0,0,0 bg=200,200,200"\
 -c"set oo=\"weapons\" "\
 $*\
 havoc.g\
 havoc_front havoc_middle havoc_tail landing_gear main_rotor\
 2&gt;&gt; example2.log\

 &lt;&lt; EOF
viewsize 8.000e+03;
orientation 2.4809e-01 4.7650e-01 7.4809e-01 3.8943e-01;
eye_pt 2.2146e+04 7.1103e+03 7.1913e+03;
start 0; clean;
end;

EOF
	</literallayout>

	<para>
	  In general, if you are mixing <command>rt</command>
	  and <command>rtedge</command> renderings, and the objects being
	  rendered are different, occlusion checking should be used.
	</para>
    </example>
  </refsection>

  <refsection xml:id="see_also"><title>SEE ALSO</title>

    <para><citerefentry><refentrytitle>mged</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>rt</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>fbserv</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>librt</refentrytitle><manvolnum>3</manvolnum></citerefentry></para>
  </refsection>

  <refsection xml:id="diagnostics"><title>DIAGNOSTICS</title>

    <para>
      Numerous error conditions are possible, usually due to errors in
      the geometry database. Descriptive messages are printed on stderr
      (file descriptor 2).
    </para>
  </refsection>

  <refsection xml:id="author"><title>AUTHORS</title>
    <para>Ronald Anthony Bowers</para>
    <para>Michael John Muuss</para>
  </refsection>

  <refsection xml:id="copyright"><title>COPYRIGHT</title>
  <para>This software is Copyright (c) 2001-2014 United States Government as
  represented by the U.S. Army Research Laboratory.</para>
  </refsection>

  <refsection xml:id="bugs"><title>BUGS</title>
  <para>Most deficiencies observed while using the
  <command>rtedge</command>
  program are a consequence of problems in
  <citerefentry><refentrytitle>librt</refentrytitle><manvolnum>3</manvolnum></citerefentry>.
  </para>
  </refsection>

  <refsection xml:id="bug_reports"><title>BUG REPORTS</title>
  <para>Reports of bugs or problems should be submitted via electronic
  mail to &lt;devs@brlcad.org&gt;.</para>
  </refsection>
</refentry>
