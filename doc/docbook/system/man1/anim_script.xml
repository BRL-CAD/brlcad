<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='anim_script1'>
<refmeta>
<refentrytitle>ANIM_SCRIPT</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class='source'>BRL-CAD</refmiscinfo>
<refmiscinfo class='manual'>BRL-CAD</refmiscinfo>
</refmeta>

<refnamediv>
<refname>anim_script</refname>
<refpurpose>make an animation script for one object</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<cmdsynopsis>
  <command>anim_script</command>
    <arg choice='opt'>-v <replaceable>#</replaceable></arg>
    <group choice='opt'><arg choice='plain'>-r </arg><arg choice='plain'><replaceable>t</replaceable></arg><arg choice='plain'><replaceable>s</replaceable></arg></group><arg choice='opt'>-p </arg>
    <group choice='opt'><arg choice='plain'>-a </arg><arg choice='plain'><replaceable>b</replaceable></arg><arg choice='plain'><replaceable>#</replaceable></arg><arg choice='plain'><replaceable>#</replaceable></arg><arg choice='plain'><replaceable>#</replaceable></arg></group>
    <group choice='opt'><arg choice='plain'>-c </arg><arg choice='plain'><replaceable>d</replaceable></arg><arg choice='plain'><replaceable>#</replaceable></arg><arg choice='plain'><replaceable>#</replaceable></arg><arg choice='plain'><replaceable>#</replaceable></arg></group>
    <arg choice='opt'>-f <replaceable>#</replaceable></arg>
    <arg choice='opt'>-m <replaceable>cmd</replaceable></arg>
    <arg choice='opt'><replaceable>objectname</replaceable></arg>
    <arg choice='plain'>&lt;</arg>
    <arg choice='plain'><replaceable>in.table</replaceable></arg>
    <arg choice='plain'>&gt;</arg>
    <arg choice='plain'><replaceable>out.script</replaceable></arg>
</cmdsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para><command>anim_script</command>
is designed to produce an animation script for the
animation of the virtual camera or one
<emphasis remap='I'>brlcad</emphasis>
object at a time. It is
complementary to
<command>tabsub</command>
in that it performs a similar
function, but with a different philosophy.</para>

<para>Both
<command>anim_script</command>
and
<command>tabsub</command>
use one row of an animation table to
produce one frame of an animation script. With
<command>tabsub</command>,
the user supplies
a template file which controls the form of the animation frames. This
allows the maximum user control, but also requires a good understanding
of the script format. With
<command>anim_script</command>,
the user supplies all the necessary
information on the command line. The range of possible output scripts is
limited, but the user does not have to deal directly with the details.
Both routines have special features which make certain common situations
easy to do. One of the most important special features of
<command>anim_script</command>
is the
ability to specify a reference position and orientation, as explained
below.</para>

<para>The objectname is the name of the object which is to be
animated, as it will appear in the output script. For example, if
"hatch1"
is a member of "turret" which is a member of "tank" which is one of the
objects specified on the command line of the call to
<command>rt</command>,
then the objectname "tank/turret/hatch1" or simply "turret/hatch1" would be used to
animate the hatch. The tank itself would be referred to by the name,
"/tank". Note that top-level objects should be preceded by a slash.
If view animation is being performed, no objectname
should be included.</para>

<para><emphasis remap='B'>in.table</emphasis>
should be a seven-column animation table,
specifying the time, 3d position, yaw, pitch and roll of the
object (or camera), although this changes if the
<option>-r</option>,
<option>-t</option>,
<option>-s</option>,
or
<option>-v#</option>
options are used.</para>
</refsect1>

<refsect1 xml:id='options'><title>OPTIONS</title>
<variablelist remap='TP'>
  <varlistentry>
  <term><option>-r</option></term>
  <listitem>
<para><emphasis remap='B'>in.table</emphasis>
is a four-column file including time and rotation
information only. No translation will occur.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-t</option></term>
  <listitem>
<para><emphasis remap='B'>in.table</emphasis>
is a four-column file including time and translation
information only. No rotation will occur.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-s</option></term>
  <listitem>
<para><emphasis remap='B'>in.table</emphasis>
is a four-column file including time and translation
information only. The vehicle will be rotated (steered) to face the
direction of motion.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-q</option></term>
  <listitem>
<para>Quaternion orientation. Any orientation information in
<emphasis remap='B'>in.table</emphasis>
will be in quaternion form, in the order x,y,z,w. The identity quaternion
representing no orientation change is (0,0,0,1).</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-p</option></term>
  <listitem>
<para>Permuted orientation. This option indicates that transformations defined by
the quaternions should be applied to an object which has first been placed
in
<command>rt</command>'s
default eye orientation. Thus, the identity quaternion represents yawing the
object 90 degrees to the left and then pitching it 90 degrees downward.
The quaternions produced by
<command>mged</command>'s
saveview command and used by
<command>rt</command>'s
orientation command
are quaternions of this type. See
<command>anim_orient</command>
for more information.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-v#</option></term>
  <listitem>
<para>The desired output is a view animation script, rather
than an object animation script. No object should be specified. The
argument can be any floating point number. If
the argument
is positive, the command:</para>

<para>viewsize #;</para>

<para>will be placed at the beginning of the output file. If it is
zero, the `viewsize' command is omitted from the output script. If it is
negative, then the
viewsize for each frame is expected to be in the first column after the
time in
<emphasis remap='B'>in.table</emphasis>.
A `viewsize' command would then be
included immediately after the `start' command of each frame.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-f#</option></term>
  <listitem>
<para>Specify the integer with which to begin
numbering the frames of the output script. The default is 0.</para>
  </listitem>
  </varlistentry>
</variablelist>

<para>The remaining options give information about the object which is
to be animated.</para>
<variablelist remap='TP'>
  <varlistentry>
  <term><option>-a # # #</option></term>
  <listitem>
<para>or</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-b # # #</option></term>
  <listitem>
<para>These options take three arguments, which are the
yaw, pitch, and roll of the object's axes with respect to the
world axes. With
<option>-a,</option>
rotations specified in the infile will be applied
with respect to the object's axes. With the
<option>-b</option>
option, the object is
rotated so that its axes coincide with the world axes, and then all
rotations and translations are carried out with respect to the world
axes. The
<option>-b</option>
option is particularly useful in conjunction with the
<option>-s</option>
option, because it tells
<command>anim_script</command>
which way the front of the vehicle faces. See
the examples below.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-c # # #</option></term>
  <listitem>
<para>or</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><option>-d # # #</option></term>
  <listitem>
<para>These options take three arguments, which are the x, y,
and z coordinates of the point which is to be considered the "centroid"
of the object. All rotations will occur about this point. If
<option>-c</option>
is used,
translations from the input table will be considered to be relative
displacements from this point. If
<option>-d</option>
is used, the translations in the
input table will be interpreted as absolute displacement from the world
origin. The direction of translation in both cases is along the world
axes, unless the
<option>-a</option>
option  has been used, in which case the
translations are with respect to the object's axes. See the examples below.</para>
  </listitem>
  </varlistentry>
</variablelist>

<para>When the
<option>-v</option>
option is used, the virtual camera is the object
being animated, and so the meaning of the preceding four options
changes somewhat. The
<option>-c</option>
and
<option>-a</option>
options are not useful in this context.
The
<option>-d</option>
option can be thought of as specifying the position and
orientation of a virtual
tripod with respect to the camera lens.  The translations and rotations
specified in
the input table will be applied to the tripod, to which the camera is
rigidly attached.  For example, the option
<option>-d 10 0 -2</option>
in conjunction with
the
<option>-v#</option>
option means that the virtual tripod is 10 units in front of the
camera and 2
units below the camera's line of sight. The option
<option>-b -90 0 0</option>
in this
context would mean that the front of the virtual tripod faces 90 degrees
to the right of the virtual camera. As translation and rotation
information are read in from in.table, they are applied to the virtual
tripod, with the virtual camera rigidly attached. See below for examples
of how this might be used.</para>
<variablelist remap='TP'>
  <varlistentry>
  <term><option>-m cmd</option></term>
  <listitem>
<para>Specify a matrix command to use in, object animation. The default value
is "lmul", which means that matrices in the output script are
multiplied onto the
left of the matrix between the object being animated and its parent.
The matrix residing between the object and its parent is referred to as
the current arc. The possible matrix commands are the following:</para>
<literallayout remap='.nf'>

     lmul   - left-multiply the matrix onto the current arc
     rmul   - right-multiply the matrix onto the current arc
     rarc   - replace the current arc with the matrix
     rstack - replace the stack of ancestor matrices with the matrix
     rboth  - replace the current arc with the matrix and replace the
		 stack of ancestor matrices with the identity matrix.

This option is intended primarily to give expert users additional
flexibility, and shouldn't be needed by most animators.

  </literallayout></listitem>
  </varlistentry>
</variablelist>
</refsect1>

<refsect1 xml:id='examples'><title>EXAMPLES</title>
<para>To animate a truck which is modeled with the front facing the positive
x-direction, the position of the center of the truck and its orientation at
each time should be in
<emphasis remap='B'>truck.table</emphasis>.
If the center of the modeled truck is at
the  point (234,0,1200) then the following command could be used:</para>

<para>anim_script -d 234 0 1200 /truck &lt; truck.table &gt; truck.script.</para>

<para>If the front of the model truck faces (for some reason)
halfway
between the x and y axes, a
<option>-b</option>
option is added, to show the relationship
between world and truck axes:</para>

<para>anim_script -b 45 0 0 -d 234 0 1200 /truck &lt; truck.table &gt; truck.script.</para>

<para>To steer the truck automatically to face the direction of motion,
the
<option>-s</option>
option is added, and the orientation columns should be removed from
<emphasis remap='B'>truck.table</emphasis>.</para>

<para>anim_script -s -b 45 0 0 -d 234 0 1200 /truck &lt; truck.table &gt; truck.script.</para>


<para>Animating a steering wheel: Suppose the steering wheel is stored
in the database so that the axis it turns on is at an yaw of -135
degrees and an pitch of 30 degrees.  It passes through the point
(700,800,2400). Then we select "rotation only" with
<option>-r</option>
and specify the
relationship between the steering wheels axes and the world with the
<option>-a</option>
and
<option>-c</option>
options. In
<emphasis remap='B'>roll.table</emphasis>
we put the time, two zero columns, and a
column specifying the roll of the wheel (How much it is to be twisted).</para>

<para>anim_script -r -a -135 30 0 -c 700 800 2400 truck/steering_column/wheel &lt;
roll.table &gt; steer.table</para>

<para>Alternatively, if the turning of the wheel was stored in the yaw
(second) column of a file,
<emphasis remap='B'>turn.table</emphasis>,
a different set of axes would be
used to achieve the same effect:</para>

<para>anim_script -r -a 45 60 0 -c 700 800 2400 truck/steering_column/wheel &lt;
turn.table &gt; steer.table</para>


<para>To animate seven little men doing simultaneous backflips in different
places, you would want to use relative motion. That is, a translation
vector of (0,0,1) means move one unit upward, instead of move to the
point (0,0,1). For each little man, we specify his position in the
model using the
<option>-c</option>
option. Then we can use the same backflip instructions
for each of the little men.</para>

<para>anim_script -c 12 34 5 /little.man.one &lt; generic.backflip.table &gt;
little.man.one.script</para>

<para>anim_script -c -3 13 5 /little.man.two &lt; generic.backflip.table &gt;
little.man.two.script</para>

<para>and so on.</para>



<refsect2 xml:id='camera_examples'><title>Camera examples</title>
<para>If we know the desired position of the camera and its orientation
at each time, it's very simple. The
<option>-v#</option>
option indicates that the view is
being animated; no object is specified.</para>

<para>anim_script -v0 &lt; view.table &gt; view.script</para>

<para>To follow a truck, so that the camera is always ten units behind and 4
units above it, we specify a virtual tripod in front of and below the
camera:</para>

<para>anim_script -v0 -d 10 0 -4 &lt; truck.table &gt; view.script</para>

<para>To do the same thing but with the camera turned to look at the right
side of the truck, we specify that the virtual tripod originally faces
to the right, so that the camera faces its right side. Thus when the
virtual tripod is placed in the same position and orientation as the
truck, the camera will be looking at the right side of the
truck.</para>

<para>anim_script -v0 -d 10 0 -4 -b -90 0 0 &lt; truck.table &gt; view.script</para>
</refsect2>
</refsect1>

<refsect1 xml:id='bugs'><title>BUGS</title>
<para>The reading of command line options which take more than one
argument are somewhat finicky. For example, it understands the
option "-d 1 1 1" but not "-d1 1 1".</para>
</refsect1>

<refsect1 xml:id='author'><title>AUTHOR</title>
<para>Carl J. Nuzman</para>
</refsect1>

<refsect1 xml:id='copyright'><title>COPYRIGHT</title>
<para>This software is Copyright (c) 1994-2016 by the United States
Government as represented by U.S. Army Research Laboratory.</para>
</refsect1>

<refsect1 xml:id='bug_reports'><title>BUG REPORTS</title>
<para>Reports of bugs or problems should be submitted via electronic
mail to &lt;devs@brlcad.org&gt;.</para>
</refsect1>
</refentry>

