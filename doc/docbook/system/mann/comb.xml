<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="comb">

  <refmeta>
    <refentrytitle>COMB</refentrytitle>
    <manvolnum>nged</manvolnum>
    <refmiscinfo class="source">BRL-CAD</refmiscinfo>
    <refmiscinfo class="manual">BRL-CAD User Commands</refmiscinfo>
  </refmeta>

  <refnamediv xml:id="name">
    <refname>comb</refname>
    <refpurpose>Create and manipulate BRL-CAD combination with the name
    <emphasis>combination_name</emphasis>.
    </refpurpose>
  </refnamediv>

  <!-- body begins here -->
  <refsynopsisdiv xml:id="synopsis">
    <cmdsynopsis sepchar=" ">
      <command>comb</command>
      <group choice="opt" rep="norepeat">
        <arg choice="opt" rep="norepeat">-c</arg>
        <arg choice="opt" rep="norepeat">-r</arg>
      </group>
      <group choice="opt" rep="norepeat">
        <arg choice="opt" rep="norepeat">-w</arg>
        <arg choice="opt" rep="norepeat">-f</arg>
        <arg choice="opt" rep="norepeat">-l</arg>
      </group>
      <group choice="opt" rep="norepeat">
        <arg choice="opt" rep="norepeat">-S</arg>
      </group>
      <arg choice="req" rep="norepeat"><replaceable>combination_name</replaceable> </arg>
      <arg choice="opt" rep="repeat"><replaceable>&lt;operator object_name&gt;</replaceable> </arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsection xml:id="description"><title>DESCRIPTION</title>

    <para>
       The <command>comb</command> command creates and manipulates <emphasis>BRL-CAD</emphasis>
       combination objects.  For combination creation or appending, <emphasis>operator/object_name</emphasis> pairs
       of boolean operators and object names are parsed into comb tree entries.  (TODO - integrate full
       expression evaluation like that in <command>c</command>.)
    </para>

    <para>
       The following options are recognized:
    </para>

    <variablelist remap="TP">

      <varlistentry>
        <term><option>-c</option></term>
        <listitem>
          <para>
            Ensures that the combination does not have the region flag set.
            Conflicts with <option>-r</option>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-r</option></term>
        <listitem>
          <para>
            Ensures that the combination does have the region flag set.
            Conflicts with <option>-c</option>.
          </para>
        </listitem>
      </varlistentry>

     <varlistentry>
        <term><option>-w</option></term>
        <listitem>
          <para>
            Moves the contents of a combination to a new combination
            and makes that combination the sole child of the original combination.  See the "fixing
            nested regions" example below for an illustration of how this option is used.
            Conflicts with <option>-f</option> and <option>-l</option>.
          </para>
        </listitem>
      </varlistentry>

     <varlistentry>
        <term><option>-f</option></term>
        <listitem>
          <para>
            Flattens a combination that contains only unions into a single top level
            combination with all of the solids unioned into it, and remove all
            combinations that were below the input combination that are not used
            elsewhere in the .g file.  (In essence, the latter behavior prevents
            "orphaned" combinations that are no longer used from showing up as new
            top level objects in the database.)  This feature will not work on any
	    combination containing non-union boolean operations.  The following
	    <command>search</command> command can be used to find combs
	    that are candidates for flattening:
	    <literallayout>
		    <computeroutput>
<prompt>mged&gt;</prompt> <userinput>search -type comb ! -below ( -bool + -or -bool - )</userinput>
		    </computeroutput>
	    </literallayout>
          </para>
          <para>
             Conflicts with <option>-w</option> and <option>-l</option>.
          </para>
        </listitem>
      </varlistentry>


     <varlistentry>
        <term><option>-l</option></term>
        <listitem>
          <para>
            "Lift" a region flag to the top comb, and clear all region flags below
            the comb in the tree.  Like the <option>f</option> option this option
            will work to respect the integrity of other geometry in the database, but
            it is more aggressive in the steps it will take and it will operate on trees
            that contain non-union booleans.   The decision logic is as follows:

            <orderedlist>
               <listitem>
                  <para>
                     Check if regions below the current comb are used elsewhere in
                     the .g file.  If they are not, they will simply be converted to combs.
                   </para>
               </listitem>
               <listitem>
                  <para>
                     For regions that are used elsewhere in the .g file, determine if
                     their parent comb (if that comb is not the original comb supplied
                     to the command) is also used elsewhere in the .g file.  If not, the
                     <option>w</option> wrapping behavior is used to produce a non-region
                     equivalent comb, and the parent comb is updated to use that new comb
                     instead of the region.  If one or more parent combs <emphasis>are</emphasis> used elsewhere (i.e. the
                     parent comb cannot be altered without altering other geometry) the
                     command will fail - manual intervention is required to resolve the situation.
                   </para>
               </listitem>

            </orderedlist>

            Conflicts with <option>-w</option> and <option>-f</option>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-S</option></term>
        <listitem>
          <para>
            Stop if the combination object already exists.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsection>

  <refsection xml:id="examples"><title>EXAMPLES</title>

    <para>
      This example shows how to use the <command>comb</command> command to create a combination
      according to a given formula.
    </para>
    <example><title>Creating a combination.</title>

      <variablelist>
	<varlistentry>
	  <term><prompt>mged&gt;</prompt> <userinput>comb abc u a u b - a + d</userinput></term>
	  <listitem>
	    <para>Creates a combination named <emphasis>abc</emphasis>.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </example>

    <example><title>Fixing a nested region.</title>

      <variablelist>
	<varlistentry>
		<term>
			Nested regions (a region containing another region in its tree) are generally
			viewed as poor modelling practice.  This example shows how to fix an instance of this nesting with minimal disruption to the model.
		</term>

	 <listitem>
	 <para></para>
	 <para>
		 Suppose we have a situation where <emphasis>region2.r</emphasis> is unioned into <emphasis>region1.r</emphasis>, and both
		 <emphasis>region1.r</emphasis> and <emphasis>region2.r</emphasis> have the region flag set, as seen in the tree below.
	 </para>

	<literallayout>
      <computeroutput>
<prompt>mged&gt;</prompt> <userinput>tree region1.r</userinput>
region1.r/R
        u region2.r/R
                u sph.s
        u comb.c/
                u arb.s
      </computeroutput>
      </literallayout>

      <para>
      This geometry has an error in that one
      region is not supposed to be combined into another using boolean operations.
      Further, suppose that one or
      more assemblies use <emphasis>region2.r</emphasis> and expect it to be a region - i.e., <emphasis>region2.r</emphasis> needs
      to remain a region with the same contents.

      To fix this problem without disturbing other geometry using <emphasis>region2.r</emphasis>, first
      make a combination below <emphasis>region2.r</emphasis> using the <option>w</option> flag to <command>comb</command>:
      </para>

      <literallayout>
      <computeroutput>
<prompt>mged&gt;</prompt> <userinput>comb -w region2.r</userinput>
<prompt>mged&gt;</prompt> <userinput>tree region2.r</userinput>
region2.r/R
        u region2.r.c/
                  u sph.s
      </computeroutput>
      </literallayout>

      <para>
	      The next step is to adjust the <emphasis>region1.r</emphasis> tree definition to reference the
	      non-region combination instead of <emphasis>region2.r</emphasis>:
      </para>

      <literallayout>
      <computeroutput>
<prompt>mged&gt;</prompt> <userinput>set glob_compat_mode 0</userinput>
0
<prompt>mged&gt;</prompt> <userinput>get region1.r tree</userinput>
u {l region2.r} {l comb.c}
<prompt>mged&gt;</prompt> <userinput>adjust region1.r tree {u {l region2.r.c} {l comb.c}}</userinput>
<prompt>mged&gt;</prompt> <userinput>tree region1.r</userinput>
region1.r/R
        u region2.r.c/
                u sph.s
        u comb.c/
                u arb.s
      </computeroutput>
      </literallayout>

      <para>
        Because the tree is manipulated as a Tcl list, we need glob compatibility mode to be
	off on the MGED command line.  Once the tree is re-defined, <emphasis>region1.r</emphasis> no longer has
	<emphasis>region2.r</emphasis> below it, but still defines the same physical volume via <emphasis>region2.r.c</emphasis>.
      </para>

      <para>
         Optionally, the name <emphasis>region2.r.c</emphasis> can be changed to the name <emphasis>region2.c</emphasis> with
        the <command>mvall</command> command:
      </para>

      <literallayout>
      <computeroutput>
<prompt>mged&gt;</prompt> <userinput>mvall region2.r.c region2.c</userinput>
<prompt>mged&gt;</prompt> <userinput>tree region1.r</userinput>
region1.r/R
        u region2.c/
                u sph.s
        u comb.c/
                u arb.s
<prompt>mged&gt;</prompt> <userinput>tree region2.r</userinput>
region2.r/R
        u region2.c/
                u sph.s
      </computeroutput>
      </literallayout>
	  </listitem>
	</varlistentry>
      </variablelist>

    </example>

    <example><title>Flattening a Combination.</title>

      <variablelist>
	<varlistentry>
	  <term>
		  When a combination contains only unioned objects, it can be flattened with the <option>f</option> option.
          </term>

	  <listitem>
		  <para></para>
		  <para>First, create an appropriate example to properly illustrate the option's behavior:</para>
		  <literallayout>
			  <computeroutput>
<prompt>mged&gt;</prompt> <userinput>make sph1.s sph</userinput>
<prompt>mged&gt;</prompt> <userinput>make sph2.s sph</userinput>
<prompt>mged&gt;</prompt> <userinput>comb sph1.c u sph1.s</userinput>
<prompt>mged&gt;</prompt> <userinput>comb sph2.c u sph2.s</userinput>
<prompt>mged&gt;</prompt> <userinput>comb spheres.c u sph1.c u sph2.c</userinput>
<prompt>mged&gt;</prompt> <userinput>comb misc.c u sph2.c</userinput>
<prompt>mged&gt;</prompt> <userinput>tree spheres.c</userinput>
spheres.c/
         u sph1.c/
                 u sph1.s
         u sph2.c/
                 u sph2.s

<prompt>mged&gt;</prompt> <userinput>tree misc.c</userinput>
misc.c/
         u sph2.c/
                 u sph2.s

<prompt>mged&gt;</prompt> <userinput>tops</userinput>
misc.c/               spheres.c
      </computeroutput>
      </literallayout>

      <para>
	      Note that <emphasis>sph2.c</emphasis> is used in both <emphasis>spheres.c</emphasis> and <emphasis>misc.c</emphasis>, but <emphasis>sph1.c</emphasis> is only used in <emphasis>spheres.c</emphasis>
	      In the <command>tops</command> command output, <emphasis>misc.c</emphasis> and <emphasis>spheres.c</emphasis> are the only top level objects.  Targeting <emphasis>spheres.c</emphasis> with the <option>f</option> option reworks the tree as follows:
      </para>

      <literallayout>
      <computeroutput>
<prompt>mged&gt;</prompt> <userinput>comb -f spheres.c</userinput>
<prompt>mged&gt;</prompt> <userinput>tree spheres.c</userinput>
spheres.c/
        u sph1.s
        u sph2.s

<prompt>mged&gt;</prompt> <userinput>tree misc.c</userinput>
misc.c/
         u sph2.c/
                 u sph2.s

<prompt>mged&gt;</prompt> <userinput>tops</userinput>
misc.c/               spheres.c
      </computeroutput>
      </literallayout>

      <para>
	      Notice that while <emphasis>spheres.c</emphasis> has indeed been flattened and no longer has the intermediate combinations over its solids,
	      <emphasis>misc.c</emphasis> is still intact.  Notice also that while <emphasis>sph2.c</emphasis> was preserved, since it is used by <emphasis>misc.c</emphasis>, <emphasis>sph1.c</emphasis> was removed
	      and does not show up in the <command>tops</command> command's output since it was no longer used by any object in the
	      database.
      </para>
	  </listitem>
	</varlistentry>
      </variablelist>

    </example>

    <example><title>Example Of Comb Region Lifting.</title>

      <variablelist>
	<varlistentry>
	  <term>
		  The <option>l</option> option is useful in cases where many <option>w</option>
		  type operations are needed.
          </term>

	  <listitem>
		  <para></para>
		  <para>Suppose a geometry has the following structure:</para>
		  <literallayout>
			  <computeroutput>
<prompt>mged&gt;</prompt> <userinput>make sph1.s sph</userinput>
<prompt>mged&gt;</prompt> <userinput>make sph2.s sph</userinput>
<prompt>mged&gt;</prompt> <userinput>r r1 u sph1.s</userinput>
<prompt>mged&gt;</prompt> <userinput>r r2 u sph2.s</userinput>
<prompt>mged&gt;</prompt> <userinput>comb assembly u r1 u r2</userinput>
<prompt>mged&gt;</prompt> <userinput>r r3 u r1 - r2</userinput>
<prompt>mged&gt;</prompt> <userinput>tops</userinput>
assembly/           r3/R

<prompt>mged&gt;</prompt> <userinput>tree assembly</userinput>
assembly/
        u r1/R
                u sph1.s
        u r2/R
                u sph2.s
<prompt>mged&gt;</prompt> <userinput>tree r3</userinput>
r3/R
        u r1/R
                u sph1.s
        - r2/R
                u sph2.s
      </computeroutput>
      </literallayout>

      <para>
	      There are regions below region <emphasis>r3</emphasis>, which is not good modeling practice.
	      The <option>l</option> option applied to <emphasis>r3</emphasis> makes <emphasis>r3</emphasis>
	      a region that no longer has regions below it, while at the same time preserving the
	      geometric volumes defined by all existing combs and preserving the meaning of
	      the <emphasis>assembly</emphasis> region definitions:
      </para>

      <literallayout>
      <computeroutput>
<prompt>mged&gt;</prompt> <userinput>comb -l r3</userinput>
<prompt>mged&gt;</prompt> <userinput>tree assembly</userinput>
assembly/
        u r1/R
                u r1.c/
                         u sph1.s
        u r2/R
                u r1.c/
                         u sph1.s
<prompt>mged&gt;</prompt> <userinput>tree r3</userinput>
r3/R
        u r1.c/
                u sph1.s
        - r2.c/
                u sph2.s

      </computeroutput>
      </literallayout>
	  </listitem>
	</varlistentry>
      </variablelist>

    </example>


    <example><title>Example Tree Structure That Will Prevent Successful Region Lifting.</title>

      <variablelist>
	<varlistentry>
	  <term>
		  While the <option>l</option> option can handle many tree configurations, there are
		  some situations where manual intervention is required.  This example illustrates
		  one such case.
          </term>

	  <listitem>
		  <para></para>
		  <para>Suppose a geometry has the following structure:</para>
		  <literallayout>
			  <computeroutput>
<prompt>mged&gt;</prompt> <userinput>make sph1.s sph</userinput>
<prompt>mged&gt;</prompt> <userinput>make sph2.s sph</userinput>
<prompt>mged&gt;</prompt> <userinput>make sph3.s sph</userinput>
<prompt>mged&gt;</prompt> <userinput>r r1 u sph1.s</userinput>
<prompt>mged&gt;</prompt> <userinput>r r2 u sph2.s</userinput>
<prompt>mged&gt;</prompt> <userinput>comb subassembly u r1 u r2</userinput>
<prompt>mged&gt;</prompt> <userinput>r r3 u sph3.s - subassembly</userinput>
<prompt>mged&gt;</prompt> <userinput>comb assembly u subassembly</userinput>
<prompt>mged&gt;</prompt> <userinput>tops</userinput>
assembly/           r3/R

<prompt>mged&gt;</prompt> <userinput>tree assembly</userinput>
assembly/
        u subassembly/
                u r1/R
                        u sph1.s
                u r2/R
                        u sph2.s
<prompt>mged&gt;</prompt> <userinput>tree r3</userinput>
r3/R
        u sph3.s
        - subassembly/
                u r1/R
                        u sph1.s
                u r2/R
                        u sph2.s

      </computeroutput>
      </literallayout>

      <para>
	      This geometry has regions below region <emphasis>r3</emphasis>, which is not ideal.  However, attempting to
	      use the <option>l</option> option on <emphasis>r3</emphasis> will produce the following error:
      </para>

      <literallayout>
      <computeroutput>
<prompt>mged&gt;</prompt> <userinput>comb -l r3</userinput>
Comb region lift failed - the following combs in the tree contain
regions and are also used outside the tree of r3:

subassembly, containing region r1
subassembly, containing region r2

The above combs must be reworked before region lifting the tree
of r3 can succeed.
      </computeroutput>
      </literallayout>

      <para>
	      While <emphasis>r3</emphasis> has problems, the geometry tree under <emphasis>assembly</emphasis> is entirely correct.  For
	      <emphasis>r3</emphasis> to become a toplevel region with no regions under it, the definition of <emphasis>subassembly</emphasis>
	      would have to change too.  Because <emphasis>subassembly</emphasis> is used in the definition of <emphasis>assembly</emphasis>,
	      as well as the definition of <emphasis>r3</emphasis>, changing <emphasis>subassembly</emphasis>'s contents would destroy the meaning of
	      the (valid) <emphasis>assembly</emphasis> comb.  Hence, the command fails and does not change the geometry.
      </para>
	  </listitem>
	</varlistentry>
      </variablelist>

    </example>



  </refsection>

  <refsection xml:id="author"><title>AUTHOR</title><para>BRL-CAD Team</para></refsection>

  <refsection xml:id="bug_reports"><title>BUG REPORTS</title>

    <para>
      Reports of bugs or problems should be submitted via electronic
      mail to &lt;devs@brlcad.org&gt;, or via the "cadbug.sh" script.
    </para>
  </refsection>
</refentry>
