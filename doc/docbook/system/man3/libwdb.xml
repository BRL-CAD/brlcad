<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- lifted from troff+man by doclifter -->
<refentry xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en' xml:id='libwdb3'>
<refmeta>
    <refentrytitle>LIBWDB
</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='source'>BRL-CAD</refmiscinfo>
<refmiscinfo class='manual'>BRL-CAD</refmiscinfo>
</refmeta>

<refnamediv>
<refname>libwdb</refname>
<refpurpose>library for procedural generation of MGED databases</refpurpose>
</refnamediv>
<!-- body begins here -->
<refsynopsisdiv xml:id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>
#include "vmath.h"
#include "wdb.h"

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>mk_id</function></funcdef>
    <paramdef>FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>title</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>mk_half</function></funcdef>
    <paramdef>FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
    <paramdef>double <parameter>d</parameter></paramdef>
    <paramdef>point_t <parameter>norm</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>mk_rpp</function></funcdef>
    <paramdef>FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
    <paramdef>point_t min , <parameter>max</parameter></paramdef>
    <paramdef>mk_wedge ( fp , name , vert , xdir , zdir , xlen , ylen , zlen , x_top_len ) <parameter></parameter></paramdef>
</funcprototype>
<funcsynopsisinfo>
FILE	*fp;
char	*name;
point_t	vert;
vect_t	xdir;
vect_t	zdir;
fastf_t	xlen;
fastf_t	ylen;
fastf_t	zlen;
fastf_t	x_top_len;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>mk_arb4</function></funcdef>
    <paramdef>FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
    <paramdef>point_t <parameter>pts</parameter>[]</paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>mk_arb5</function></funcdef>
    <paramdef>FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
    <paramdef>point_t <parameter>pts</parameter>[]</paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>mk_arb6</function></funcdef>
    <paramdef>FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
    <paramdef>point_t <parameter>pts</parameter>[]</paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>mk_arb7</function></funcdef>
    <paramdef>FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
    <paramdef>point_t <parameter>pts</parameter>[]</paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>mk_arb8</function></funcdef>
    <paramdef>FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
    <paramdef>point_t <parameter>pts</parameter>[]</paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>mk_sph</function></funcdef>
    <paramdef>FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
    <paramdef>point_t <parameter>center</parameter></paramdef>
    <paramdef>fastf_t <parameter>radius</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>mk_ell</function></funcdef>
    <paramdef>FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
    <paramdef>point_t <parameter>center</parameter></paramdef>
    <paramdef>vect_t a , b , <parameter>c</parameter></paramdef>
    <paramdef>mk_tgc ( fp , name , center , a , b , c , d ) FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
</funcprototype>
<funcsynopsisinfo>
point_t	center;
vect_t	a, b, c, d;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>mk_tor</function></funcdef>
    <paramdef>FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
    <paramdef>point_t <parameter>center</parameter></paramdef>
    <paramdef>vect_t <parameter>n</parameter></paramdef>
    <paramdef>double r1 , <parameter>r2</parameter></paramdef>
    <paramdef>mk_cone ( fp , name , base , dir , height , rad1 , rad2 ) FILE * <parameter>fp</parameter></paramdef>
</funcprototype>
<funcsynopsisinfo>
char	*name;
point_t	base;
vect_t	dir;
fastf_t	height;
fastf_t	rad1;
fastf_t	rad2;


</funcsynopsisinfo>
<funcprototype>
<funcdef><function>mk_rcc</function></funcdef>
    <paramdef>FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
    <paramdef>point_t <parameter>base</parameter></paramdef>
    <paramdef>vect_t <parameter>height</parameter></paramdef>
    <paramdef>fastf_t <parameter>radius</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>mk_pipe</function></funcdef>
    <paramdef>FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
</funcprototype>
<funcsynopsisinfo>
struct wdb_pipept *headp;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>mk_pipe_free</function></funcdef>
    <paramdef>struct wdb_pipept * <parameter>headp</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>mk_pipe_init</function></funcdef>
    <paramdef>struct wdb_pipept * <parameter>headp</parameter></paramdef>
    <paramdef>point_t <parameter>coord</parameter></paramdef>
    <paramdef>fastf_t od , id , <parameter>bendradius</parameter></paramdef>
    <paramdef>mk_add_pipe_pt ( headp , coord , od , id , bendradius ) struct wdb_pipept * <parameter>headp</parameter></paramdef>
    <paramdef>point_t <parameter>coord</parameter></paramdef>
</funcprototype>
<funcsynopsisinfo>
fastf_t od, id, bendradius;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>mk_comb</function></funcdef>
    <paramdef>FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
    <paramdef>char * <parameter>matname</parameter></paramdef>
    <paramdef>char * <parameter>matparm</parameter></paramdef>
    <paramdef>char * <parameter>rgb</parameter></paramdef>
    <paramdef>mk_fcomb ( fp , name , len , region ) FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
    <paramdef>mk_memb ( fp , name , mat , op ) FILE * <parameter>fp</parameter></paramdef>
</funcprototype>
<funcsynopsisinfo>
char	*name;
mat_t	mat;
int	op;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>mk_addmember</function></funcdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
    <paramdef>struct wmember * <parameter>headp</parameter></paramdef>
    <paramdef>mat_t <parameter>mat</parameter></paramdef>
    <paramdef>int <parameter>op</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>mk_lcomb</function></funcdef>
    <paramdef>FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
    <paramdef>struct wmember * <parameter>headp</parameter></paramdef>
    <paramdef>char * <parameter>matname</parameter></paramdef>
    <paramdef>char * <parameter>matparm</parameter></paramdef>
    <paramdef>char * <parameter>rgb</parameter></paramdef>
    <paramdef>mk_lfcomb ( fp , name , headp , region ) FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
</funcprototype>
<funcsynopsisinfo>
struct	wmember *headp;

</funcsynopsisinfo>
<funcprototype>
<funcdef><function>mk_bsolid</function></funcdef>
    <paramdef>FILE * <parameter>fp</parameter></paramdef>
    <paramdef>char * <parameter>name</parameter></paramdef>
    <paramdef>int <parameter>nsurf</parameter></paramdef>
    <paramdef>double <parameter>res</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef><function>mk_bsurf</function></funcdef>
    <paramdef>FILE * <parameter>filep</parameter></paramdef>
    <paramdef>struct b_spline * <parameter>bp</parameter></paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>


<refsect1 xml:id='description'><title>DESCRIPTION</title>
<para>This library exists to permit writing MGED databases from
arbitrary procedures.
Some of the high-level structure of MGED databases (e.g., that
they start with an ID record, and that COMB records must be
followed immediately by MEMBER records) is currently implicit
in the calling routines.
This library is by no means complete, and routines for writing every
type of solid do not yet exist.
While it is expected that this library will grow and change as
experience is gained, it is not clear what direction that evolution
will take.  Be prepared for changes in the interface to some of these
routines in future releases.
All routines take as their first argument the stdio FILE pointer
(e.g., stdout) on which the generated MGED database record(s) will
be written with fwrite().</para>

<para><emphasis remap='I'>mk_id</emphasis>
fwrites an IDENT record on the indicated stdio file, with the string
<emphasis remap='I'>title</emphasis>
associated.  Note that to have a valid database, the
the first record written must have been an IDENT record such as
written by this routine.</para>

<para><emphasis remap='I'>mk_half</emphasis>
makes a halfspace with name "name".  It is specified by
the distance "d" from the origin, and the outward pointing
normal vector "norm".</para>

<para><emphasis remap='I'>mk_rpp</emphasis>
makes an ARB8 called "name"
specified as a right rectangular parallelepiped in
terms of a minimum point "min" and a maximum point "max".</para>

<para><emphasis remap='I'>mk_wedge</emphasis>
makes a right angular wedge called "name" specified by
a starting vertex located in the lower left corner of the solid, an x-direction
vector, a z-direction vector, an x-length, a y-length, a z-length, and
a top x-length.  The y-direction vector is the result of x-direction vector
cross z-direction vector.
All vertices are make in the counterclockwise direction,
bottom face first.  The top face is made by extruding the bottom face in
the z direction.</para>

<para><emphasis remap='I'>mk_arb4</emphasis>
makes an ARB8 called "name"
described as an ARB4, i.e., by 4 points, the first 3 of which
lie on a plane, and the fourth is the "peak".</para>

<para><emphasis remap='I'>mk_arb8</emphasis>
makes an ARB8 called "name"
described by an array of 8 points in "pts".
All plates with 4 points must be co-planar.
If there are degeneracies (i.e., all 8 vertices are not distinct),
then certain requirements must be met.
If we think of the ARB8 as having a top and a bottom plate,
the first four points listed must lie on one plate, and
the second four points listed must lie on the other plate.</para>

<para><emphasis remap='I'>mk_sph</emphasis>
makes a spherical ellipsoid called "name"
centered at point "center" with radius "radius".
<emphasis remap='I'>mk_ell</emphasis>
makes an ellipsoid called "name" centered at point "center"
with three perpendicular radius vectors.
The eccentricity of the ellipsoid is controlled by the relative
lengths of the three radius vectors.</para>

<para><emphasis remap='I'>mk_tgc</emphasis>
makes a truncated general cone called "name" with the base plate
centered at "center" and a height vector "height", which is
perpendicular to the two end plates.  The length of the height vector
defines the location of the top plate.  The vectors "a" and "b"
are the base radius vectors, and the vectors "c" and "d" are the
nose vectors.</para>

<para><emphasis remap='I'>mk_tor</emphasis>
makes a torus called "name" centered at point "center",
with the torus lying in a plane with normal "n".
Radius "r1" is the distance from the center point of the torus
to the center of the solid part, and radius "f2" is
the radius of the solid part.</para>

<para><emphasis remap='I'>mk_cone</emphasis>
makes a right circular cone called "name"
specified by the center point of the base, a direction or height vector,
a height scalar, and a radius for each end of the cone.
The direction vector is unitized and serves to derive a vector
"a", which is orthogonal to the direction vector and itself.  This vector
is scaled by both radii to obtain two of four vectors required to make a
cone.  It is then crossed with the unitized direction vector, and the
result thereof is scaled by both radii as well to obtain the last of four
vectors needed to make a cone.</para>

<para><emphasis remap='I'>mk_rcc</emphasis>
makes a truncated general cone (TGC) with name "name"
specified as a right circular cylinder.
The base plate of the cylinder is centered at "base",
with height vector "height" which is perpendicular to
the two end plates, the length of which defines the location of
the top plate.
The radius given as "radius" defines the size of the end plates.</para>

<para><function>mk_pipe</function>
creates a "pipe" solid with the specified "name" and writes it to the
file "fp".  The user must provide a linked list of "pipe"
segments headed by "headp".  Each pipe segment includes fields indicating a
"control" point for the pipe, an inner diameter, an outer diameter and a bend radius.
The inner diameter must be less than the outer diameter, and a zero inner diameter
creates a solid wire rather than a hollow pipe.  The pipe is constructed along straight
lines through successive points, with circular bends (of the indicated radius) connecting
the straight sections. The bend radius must be greater than the outer radius. The user
is responsible for freeing the memory used by the list of pipe segments (see
<function>mk_pipe_free()</function>
below.</para>

<para><function>mk_pipe_free</function>
will free the memory used by a linked list of pipe segments. This does not free the list head.</para>

<para><function>mk_pipe_init</function>
initializes a linked list of pipe segments with the initial point,
inside diameter, outside diameter, and bend radius.</para>

<para><emphasis remap='I'>mk_add_pipe_pt</emphasis>
adds another pipe segment to the list with the indicated point,
outside radius, inside radius, and bend radius.</para>

<para><emphasis remap='I'>mk_comb</emphasis>
defines a combination of name "name", with material properties
information included.
"len" indicated the number of
<emphasis remap='I'>mk_memb</emphasis>
calls (MEMB records) that will immediately follow.
"region" is a boolean that is set to mark this combination
as a region.
"matname" is either a NULL pointer, or a pointer to a string
containing the material property name.
"matparm" is either a NULL pointer, or a pointer to a string
containing the material property parameter information,
which is material-specific (and still experimental).
Color is passed as an array of three unsigned chars in "rgb".
Color "inherit" is a boolean, and if true, the color and material
properties will be passed from upper-level objects to lower-level
objects.
<emphasis remap='I'>mk_fcomb</emphasis>
makes a simple combination header, with name "name", length "len",
and the boolean "region".  It functions just like
<emphasis remap='I'>mk_comb</emphasis>.
"len"
<emphasis remap='I'>mk_memb</emphasis>
calls must immediately follow the call to
<emphasis remap='I'>mk_comb</emphasis>
or
<emphasis remap='I'>mk_fcomb</emphasis>.
Each call to
<emphasis remap='I'>mk_memb</emphasis>
adds a reference to object "name" to the combination.
It is transformed by the 4x4 matrix "mat", and is combined
by boolean operation "op", chosen from
the list of:  UNION, INTERSECT, SUBTRACT, from &lt;brlcad/db.h&gt;.</para>

<para><emphasis remap='I'>mk_addmember</emphasis>
is used to obtain dynamic storage for a new wmember structure
(see
<emphasis remap='I'>wdb.h</emphasis>
).  Then
<emphasis remap='I'>mk_lcomb</emphasis>
can be used in the same way as
<emphasis remap='I'>mk_comb</emphasis>
to make a combination of a linked list of wmember structures.
This is the only recommended way to create combinations,
because it collects up the details in memory, and produces the
combination and member records all at once, rather than in multiple
calls, as in
<emphasis remap='I'>mk_comb</emphasis>
and
<emphasis remap='I'>mk_memb.</emphasis>
The "op" argument must be one of
WMOP_UNION, WMOP_SUBTRACT, or WMOP_INTERSECT.
In the future,
<emphasis remap='I'>mk_comb</emphasis>
and
<emphasis remap='I'>mk_memb</emphasis>
will no longer be supported.
<emphasis remap='I'>mk_lfcomb</emphasis>
is the linked list equivalent of
<emphasis remap='I'>mk_fcomb.</emphasis>
Note that the linked list heads must be initialized by an
invocation of BU_LIST_INIT( &amp;head.l );</para>

<para>The routine
<emphasis remap='I'>mk_bsolid</emphasis>
writes the header for a b-spline solid "name", with "nsurf" surfaces,
at "res" resolution.  This call must be followed by "nsurf"
calls to
<emphasis remap='I'>mk_bsurf</emphasis>
which enters the respective surfaces into the combination.  This pair
work much like the
<emphasis remap='I'>mk_comb</emphasis>
and
<emphasis remap='I'>mk_memb</emphasis>
pair.</para>

<para>The global variable
<emphasis remap='I'>mk_version</emphasis>
may be set to 4 or 5, depending on which format BRL-CAD database
you wish to write.
By default, the most recent version is always created.</para>
</refsect1>

<refsect1 xml:id='examples'><title>EXAMPLE(S)</title>

<para>Several examples of how to use this library can be found
in the proc-db directory of the BRL-CAD source distribution.</para>

</refsect1>

<refsect1 xml:id='see_also'><title>SEE ALSO</title>
<para><citerefentry><refentrytitle>brlcad</refentrytitle><manvolnum>1B</manvolnum></citerefentry>, <citerefentry><refentrytitle>mged</refentrytitle><manvolnum>1B</manvolnum></citerefentry>, <citerefentry><refentrytitle>rt</refentrytitle><manvolnum>1B</manvolnum></citerefentry></para>
</refsect1>

<refsect1 xml:id='diagnostics'><title>DIAGNOSTICS</title>
<para>None</para>
</refsect1>

<refsect1 xml:id='bugs'><title>BUGS</title>
<para>The library is incomplete.
The need for the application to know higher-level details
is unfortunate, but necessary to keep the library simple.
We may pay for this later.</para>

</refsect1>

<refsect1 xml:id='author'><title>AUTHOR</title>
<para>BRL-CAD Team</para>
</refsect1>

<refsect1 xml:id='copyright'><title>COPYRIGHT</title>
<para>
  This software is Copyright (c) 1987-2016 United States Government as
  represented by the U.S. Army Research Laboratory.
</para>
</refsect1>

<refsect1 xml:id='bug_reports'><title>BUG REPORTS</title>
<para>Reports of bugs or problems should be submitted via electronic
mail to &lt;devs@brlcad.org&gt;.</para>
</refsect1>
</refentry>

